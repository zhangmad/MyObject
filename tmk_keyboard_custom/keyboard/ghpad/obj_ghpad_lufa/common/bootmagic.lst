   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scan_keycode,"ax",@progbits
  12               	scan_keycode:
  13               	.LFB106:
  14               		.file 1 "../../tmk_core_custom/common/bootmagic.c"
   1:../../tmk_core_custom/common/bootmagic.c **** #include <stdint.h>
   2:../../tmk_core_custom/common/bootmagic.c **** #include <stdbool.h>
   3:../../tmk_core_custom/common/bootmagic.c **** #include <util/delay.h>
   4:../../tmk_core_custom/common/bootmagic.c **** #include "matrix.h"
   5:../../tmk_core_custom/common/bootmagic.c **** #include "bootloader.h"
   6:../../tmk_core_custom/common/bootmagic.c **** #include "debug.h"
   7:../../tmk_core_custom/common/bootmagic.c **** #include "keymap.h"
   8:../../tmk_core_custom/common/bootmagic.c **** #include "host.h"
   9:../../tmk_core_custom/common/bootmagic.c **** #include "action_layer.h"
  10:../../tmk_core_custom/common/bootmagic.c **** #include "eeconfig.h"
  11:../../tmk_core_custom/common/bootmagic.c **** #include "keymap_in_eeprom.h"
  12:../../tmk_core_custom/common/bootmagic.c **** #include "ledmap_in_eeprom.h"
  13:../../tmk_core_custom/common/bootmagic.c **** #include "bootmagic.h"
  14:../../tmk_core_custom/common/bootmagic.c **** 
  15:../../tmk_core_custom/common/bootmagic.c **** #ifdef PS2_MOUSE_ENABLE
  16:../../tmk_core_custom/common/bootmagic.c **** extern uint8_t ps2_mouse_enabled;
  17:../../tmk_core_custom/common/bootmagic.c **** #endif
  18:../../tmk_core_custom/common/bootmagic.c **** 
  19:../../tmk_core_custom/common/bootmagic.c **** void bootmagic(void)
  20:../../tmk_core_custom/common/bootmagic.c **** {
  21:../../tmk_core_custom/common/bootmagic.c ****     /* check signature */
  22:../../tmk_core_custom/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  23:../../tmk_core_custom/common/bootmagic.c ****         eeconfig_init();
  24:../../tmk_core_custom/common/bootmagic.c ****     }
  25:../../tmk_core_custom/common/bootmagic.c **** 
  26:../../tmk_core_custom/common/bootmagic.c ****     /* do scans in case of bounce */
  27:../../tmk_core_custom/common/bootmagic.c ****     print("boogmagic scan: ... ");
  28:../../tmk_core_custom/common/bootmagic.c ****     uint8_t scan = 100;
  29:../../tmk_core_custom/common/bootmagic.c ****     while (scan--) { matrix_scan(); _delay_ms(10); }
  30:../../tmk_core_custom/common/bootmagic.c ****     print("done.\n");
  31:../../tmk_core_custom/common/bootmagic.c **** 
  32:../../tmk_core_custom/common/bootmagic.c ****     /* bootmagic skip */
  33:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
  34:../../tmk_core_custom/common/bootmagic.c ****         return;
  35:../../tmk_core_custom/common/bootmagic.c ****     }
  36:../../tmk_core_custom/common/bootmagic.c **** 
  37:../../tmk_core_custom/common/bootmagic.c ****     /* eeconfig clear */
  38:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  39:../../tmk_core_custom/common/bootmagic.c ****         eeconfig_disable();
  40:../../tmk_core_custom/common/bootmagic.c ****         eeconfig_init();
  41:../../tmk_core_custom/common/bootmagic.c **** #ifdef KEYMAP_IN_EEPROM_ENABLE
  42:../../tmk_core_custom/common/bootmagic.c ****         write_keymap_to_eeprom();
  43:../../tmk_core_custom/common/bootmagic.c **** #endif
  44:../../tmk_core_custom/common/bootmagic.c **** #ifdef LEDMAP_IN_EEPROM_ENABLE
  45:../../tmk_core_custom/common/bootmagic.c ****         write_ledmap_to_eeprom();
  46:../../tmk_core_custom/common/bootmagic.c **** #endif
  47:../../tmk_core_custom/common/bootmagic.c ****     }
  48:../../tmk_core_custom/common/bootmagic.c **** 
  49:../../tmk_core_custom/common/bootmagic.c ****     /* bootloader */
  50:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
  51:../../tmk_core_custom/common/bootmagic.c ****         bootloader_jump();
  52:../../tmk_core_custom/common/bootmagic.c ****     }
  53:../../tmk_core_custom/common/bootmagic.c **** 
  54:../../tmk_core_custom/common/bootmagic.c ****     /* debug enable */
  55:../../tmk_core_custom/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  56:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  57:../../tmk_core_custom/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  58:../../tmk_core_custom/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  59:../../tmk_core_custom/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  60:../../tmk_core_custom/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  61:../../tmk_core_custom/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  62:../../tmk_core_custom/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  63:../../tmk_core_custom/common/bootmagic.c ****         } else {
  64:../../tmk_core_custom/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  65:../../tmk_core_custom/common/bootmagic.c ****         }
  66:../../tmk_core_custom/common/bootmagic.c ****     }
  67:../../tmk_core_custom/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
  68:../../tmk_core_custom/common/bootmagic.c **** 
  69:../../tmk_core_custom/common/bootmagic.c ****     /* keymap config */
  70:../../tmk_core_custom/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  71:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  72:../../tmk_core_custom/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  73:../../tmk_core_custom/common/bootmagic.c ****     }
  74:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  75:../../tmk_core_custom/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  76:../../tmk_core_custom/common/bootmagic.c ****     }
  77:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  78:../../tmk_core_custom/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  79:../../tmk_core_custom/common/bootmagic.c ****     }
  80:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  81:../../tmk_core_custom/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  82:../../tmk_core_custom/common/bootmagic.c ****     }
  83:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
  84:../../tmk_core_custom/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  85:../../tmk_core_custom/common/bootmagic.c ****     }
  86:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  87:../../tmk_core_custom/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  88:../../tmk_core_custom/common/bootmagic.c ****     }
  89:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  90:../../tmk_core_custom/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  91:../../tmk_core_custom/common/bootmagic.c ****     }
  92:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
  93:../../tmk_core_custom/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  94:../../tmk_core_custom/common/bootmagic.c ****     }
  95:../../tmk_core_custom/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
  96:../../tmk_core_custom/common/bootmagic.c **** 
  97:../../tmk_core_custom/common/bootmagic.c **** #ifdef NKRO_ENABLE
  98:../../tmk_core_custom/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
  99:../../tmk_core_custom/common/bootmagic.c **** #endif
 100:../../tmk_core_custom/common/bootmagic.c **** 
 101:../../tmk_core_custom/common/bootmagic.c ****     /* default layer */
 102:../../tmk_core_custom/common/bootmagic.c ****     uint8_t default_layer = 0;
 103:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
 104:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 105:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 106:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 107:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 108:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 109:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 110:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 111:../../tmk_core_custom/common/bootmagic.c ****     if (default_layer) {
 112:../../tmk_core_custom/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 113:../../tmk_core_custom/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 114:../../tmk_core_custom/common/bootmagic.c ****     } else {
 115:../../tmk_core_custom/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 116:../../tmk_core_custom/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 117:../../tmk_core_custom/common/bootmagic.c ****     }
 118:../../tmk_core_custom/common/bootmagic.c **** 
 119:../../tmk_core_custom/common/bootmagic.c **** #ifdef PS2_MOUSE_ENABLE
 120:../../tmk_core_custom/common/bootmagic.c ****     ps2_mouse_enabled = eeconfig_read_ps2_mouse();
 121:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_PS2_MOUSE_ENABLE)) {
 122:../../tmk_core_custom/common/bootmagic.c ****         ps2_mouse_enabled = !ps2_mouse_enabled;
 123:../../tmk_core_custom/common/bootmagic.c ****     }
 124:../../tmk_core_custom/common/bootmagic.c ****     eeconfig_write_ps2_mouse(ps2_mouse_enabled);
 125:../../tmk_core_custom/common/bootmagic.c **** #endif
 126:../../tmk_core_custom/common/bootmagic.c **** }
 127:../../tmk_core_custom/common/bootmagic.c **** 
 128:../../tmk_core_custom/common/bootmagic.c **** static bool scan_keycode(uint8_t keycode)
 129:../../tmk_core_custom/common/bootmagic.c **** {
  15               		.loc 1 129 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 EF92      		push r14
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 14, -2
  22 0002 FF92      		push r15
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 15, -3
  26 0004 0F93      		push r16
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 16, -4
  30 0006 1F93      		push r17
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 17, -5
  34 0008 CF93      		push r28
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 28, -6
  38 000a DF93      		push r29
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 29, -7
  42               	/* prologue: function */
  43               	/* frame size = 0 */
  44               	/* stack size = 6 */
  45               	.L__stack_usage = 6
  46 000c E82E      		mov r14,r24
  47               	.LVL1:
  48               	.LBB6:
 130:../../tmk_core_custom/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  49               		.loc 1 130 0
  50 000e F12C      		mov r15,__zero_reg__
  51               	.LVL2:
  52               	.L8:
  53               	.LBB7:
 131:../../tmk_core_custom/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  54               		.loc 1 131 0
  55 0010 8F2D      		mov r24,r15
  56 0012 0E94 0000 		call matrix_get_row
  57               	.LVL3:
  58 0016 C0E0      		ldi r28,0
  59 0018 D0E0      		ldi r29,0
  60               	.LBB8:
 132:../../tmk_core_custom/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 133:../../tmk_core_custom/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  61               		.loc 1 133 0
  62 001a 082F      		mov r16,r24
  63 001c 10E0      		ldi r17,0
  64               	.LVL4:
  65               	.L7:
  66 001e 9801      		movw r18,r16
  67 0020 0C2E      		mov r0,r28
  68 0022 00C0      		rjmp 2f
  69               		1:
  70 0024 3595      		asr r19
  71 0026 2795      		ror r18
  72               		2:
  73 0028 0A94      		dec r0
  74 002a 02F4      		brpl 1b
  75 002c 20FD      		sbrc r18,0
  76 002e 00C0      		rjmp .L2
  77               	.L6:
  78               	.LVL5:
  79 0030 2196      		adiw r28,1
  80               	.LVL6:
 132:../../tmk_core_custom/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
  81               		.loc 1 132 0
  82 0032 C430      		cpi r28,4
  83 0034 D105      		cpc r29,__zero_reg__
  84 0036 01F4      		brne .L7
  85 0038 00C0      		rjmp .L13
  86               	.L2:
 134:../../tmk_core_custom/common/bootmagic.c ****                 if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
  87               		.loc 1 134 0
  88 003a 6C2F      		mov r22,r28
  89 003c 7F2D      		mov r23,r15
  90 003e 80E0      		ldi r24,0
  91 0040 0E94 0000 		call keymap_key_to_keycode
  92               	.LVL7:
  93 0044 E812      		cpse r14,r24
  94 0046 00C0      		rjmp .L6
 135:../../tmk_core_custom/common/bootmagic.c ****                     return true;
  95               		.loc 1 135 0
  96 0048 81E0      		ldi r24,lo8(1)
  97 004a 00C0      		rjmp .L5
  98               	.L13:
  99               	.LBE8:
 100               	.LBE7:
 130:../../tmk_core_custom/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 101               		.loc 1 130 0
 102 004c F394      		inc r15
 103               	.LVL8:
 104 004e 86E0      		ldi r24,lo8(6)
 105 0050 F812      		cpse r15,r24
 106 0052 00C0      		rjmp .L8
 107               	.LBE6:
 136:../../tmk_core_custom/common/bootmagic.c ****                 }
 137:../../tmk_core_custom/common/bootmagic.c ****             }
 138:../../tmk_core_custom/common/bootmagic.c ****         }
 139:../../tmk_core_custom/common/bootmagic.c ****     }
 140:../../tmk_core_custom/common/bootmagic.c ****     return false;
 108               		.loc 1 140 0
 109 0054 80E0      		ldi r24,0
 110               	.LVL9:
 111               	.L5:
 112               	/* epilogue start */
 141:../../tmk_core_custom/common/bootmagic.c **** }
 113               		.loc 1 141 0
 114 0056 DF91      		pop r29
 115 0058 CF91      		pop r28
 116 005a 1F91      		pop r17
 117 005c 0F91      		pop r16
 118               	.LVL10:
 119 005e FF90      		pop r15
 120               	.LVL11:
 121 0060 EF90      		pop r14
 122               	.LVL12:
 123 0062 0895      		ret
 124               		.cfi_endproc
 125               	.LFE106:
 127               		.section	.text.matrix_power_up,"ax",@progbits
 128               		.weak	matrix_power_up
 130               	matrix_power_up:
 131               	.LFB10:
 132               		.file 2 "../../tmk_core_custom/common/keyboard.h"
   1:../../tmk_core_custom/common/keyboard.h **** /*
   2:../../tmk_core_custom/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core_custom/common/keyboard.h **** 
   4:../../tmk_core_custom/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core_custom/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core_custom/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core_custom/common/keyboard.h **** (at your option) any later version.
   8:../../tmk_core_custom/common/keyboard.h **** 
   9:../../tmk_core_custom/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core_custom/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core_custom/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core_custom/common/keyboard.h **** GNU General Public License for more details.
  13:../../tmk_core_custom/common/keyboard.h **** 
  14:../../tmk_core_custom/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../tmk_core_custom/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core_custom/common/keyboard.h **** */
  17:../../tmk_core_custom/common/keyboard.h **** 
  18:../../tmk_core_custom/common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../tmk_core_custom/common/keyboard.h **** #define KEYBOARD_H
  20:../../tmk_core_custom/common/keyboard.h **** 
  21:../../tmk_core_custom/common/keyboard.h **** #include <stdbool.h>
  22:../../tmk_core_custom/common/keyboard.h **** #include <stdint.h>
  23:../../tmk_core_custom/common/keyboard.h **** 
  24:../../tmk_core_custom/common/keyboard.h **** 
  25:../../tmk_core_custom/common/keyboard.h **** #ifdef __cplusplus
  26:../../tmk_core_custom/common/keyboard.h **** extern "C" {
  27:../../tmk_core_custom/common/keyboard.h **** #endif
  28:../../tmk_core_custom/common/keyboard.h **** 
  29:../../tmk_core_custom/common/keyboard.h **** /* key matrix position */
  30:../../tmk_core_custom/common/keyboard.h **** typedef struct {
  31:../../tmk_core_custom/common/keyboard.h ****     uint8_t col;
  32:../../tmk_core_custom/common/keyboard.h ****     uint8_t row;
  33:../../tmk_core_custom/common/keyboard.h **** } keypos_t;
  34:../../tmk_core_custom/common/keyboard.h **** 
  35:../../tmk_core_custom/common/keyboard.h **** /* key event */
  36:../../tmk_core_custom/common/keyboard.h **** typedef struct {
  37:../../tmk_core_custom/common/keyboard.h ****     keypos_t key;
  38:../../tmk_core_custom/common/keyboard.h ****     bool     pressed;
  39:../../tmk_core_custom/common/keyboard.h ****     uint16_t time;
  40:../../tmk_core_custom/common/keyboard.h **** } keyevent_t;
  41:../../tmk_core_custom/common/keyboard.h **** 
  42:../../tmk_core_custom/common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../tmk_core_custom/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../tmk_core_custom/common/keyboard.h **** 
  45:../../tmk_core_custom/common/keyboard.h **** /* Rules for No Event:
  46:../../tmk_core_custom/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../tmk_core_custom/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../tmk_core_custom/common/keyboard.h ****  */
  49:../../tmk_core_custom/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  50:../../tmk_core_custom/common/keyboard.h **** static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
  51:../../tmk_core_custom/common/keyboard.h **** static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
  52:../../tmk_core_custom/common/keyboard.h **** 
  53:../../tmk_core_custom/common/keyboard.h **** /* Tick event */
  54:../../tmk_core_custom/common/keyboard.h **** #define TICK                    (keyevent_t){           \
  55:../../tmk_core_custom/common/keyboard.h ****     .key = (keypos_t){ .row = 255, .col = 255 },           \
  56:../../tmk_core_custom/common/keyboard.h ****     .pressed = false,                                   \
  57:../../tmk_core_custom/common/keyboard.h ****     .time = (timer_read() | 1)                          \
  58:../../tmk_core_custom/common/keyboard.h **** }
  59:../../tmk_core_custom/common/keyboard.h **** 
  60:../../tmk_core_custom/common/keyboard.h **** 
  61:../../tmk_core_custom/common/keyboard.h **** void keyboard_init(void);
  62:../../tmk_core_custom/common/keyboard.h **** void keyboard_task(void);
  63:../../tmk_core_custom/common/keyboard.h **** void keyboard_set_leds(uint8_t leds);
  64:../../tmk_core_custom/common/keyboard.h **** 
  65:../../tmk_core_custom/common/keyboard.h **** __attribute__ ((weak)) void matrix_power_up(void) {}
 133               		.loc 2 65 0
 134               		.cfi_startproc
 135               	/* prologue: function */
 136               	/* frame size = 0 */
 137               	/* stack size = 0 */
 138               	.L__stack_usage = 0
 139 0000 0895      		ret
 140               		.cfi_endproc
 141               	.LFE10:
 143               		.section	.text.matrix_power_down,"ax",@progbits
 144               		.weak	matrix_power_down
 146               	matrix_power_down:
 147               	.LFB11:
  66:../../tmk_core_custom/common/keyboard.h **** __attribute__ ((weak)) void matrix_power_down(void) {}
 148               		.loc 2 66 0
 149               		.cfi_startproc
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 0 */
 153               	.L__stack_usage = 0
 154 0000 0895      		ret
 155               		.cfi_endproc
 156               	.LFE11:
 158               		.section	.text.bootmagic_scan_keycode,"ax",@progbits
 159               	.global	bootmagic_scan_keycode
 161               	bootmagic_scan_keycode:
 162               	.LFB107:
 142:../../tmk_core_custom/common/bootmagic.c **** 
 143:../../tmk_core_custom/common/bootmagic.c **** bool bootmagic_scan_keycode(uint8_t keycode)
 144:../../tmk_core_custom/common/bootmagic.c **** {
 163               		.loc 1 144 0
 164               		.cfi_startproc
 165               	.LVL13:
 166               		.loc 1 144 0
 167 0000 CF93      		push r28
 168               	.LCFI6:
 169               		.cfi_def_cfa_offset 3
 170               		.cfi_offset 28, -2
 171               	/* prologue: function */
 172               	/* frame size = 0 */
 173               	/* stack size = 1 */
 174               	.L__stack_usage = 1
 175 0002 C82F      		mov r28,r24
 145:../../tmk_core_custom/common/bootmagic.c ****     if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
 176               		.loc 1 145 0
 177 0004 80EC      		ldi r24,lo8(-64)
 178               	.LVL14:
 179 0006 0E94 0000 		call scan_keycode
 180               	.LVL15:
 181 000a 8823      		tst r24
 182 000c 01F0      		breq .L17
 146:../../tmk_core_custom/common/bootmagic.c **** 
 147:../../tmk_core_custom/common/bootmagic.c ****     return scan_keycode(keycode);
 183               		.loc 1 147 0
 184 000e 8C2F      		mov r24,r28
 185               	/* epilogue start */
 148:../../tmk_core_custom/common/bootmagic.c **** }
 186               		.loc 1 148 0
 187 0010 CF91      		pop r28
 188               	.LVL16:
 147:../../tmk_core_custom/common/bootmagic.c ****     return scan_keycode(keycode);
 189               		.loc 1 147 0
 190 0012 0C94 0000 		jmp scan_keycode
 191               	.LVL17:
 192               	.L17:
 193               		.loc 1 148 0
 194 0016 80E0      		ldi r24,0
 195               	/* epilogue start */
 196 0018 CF91      		pop r28
 197               	.LVL18:
 198 001a 0895      		ret
 199               		.cfi_endproc
 200               	.LFE107:
 202               		.section	.text.bootmagic,"ax",@progbits
 203               	.global	bootmagic
 205               	bootmagic:
 206               	.LFB105:
  20:../../tmk_core_custom/common/bootmagic.c **** {
 207               		.loc 1 20 0
 208               		.cfi_startproc
 209 0000 CF93      		push r28
 210               	.LCFI7:
 211               		.cfi_def_cfa_offset 3
 212               		.cfi_offset 28, -2
 213               	/* prologue: function */
 214               	/* frame size = 0 */
 215               	/* stack size = 1 */
 216               	.L__stack_usage = 1
  22:../../tmk_core_custom/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
 217               		.loc 1 22 0
 218 0002 0E94 0000 		call eeconfig_is_enabled
 219               	.LVL19:
 220 0006 8111      		cpse r24,__zero_reg__
 221 0008 00C0      		rjmp .L19
  23:../../tmk_core_custom/common/bootmagic.c ****         eeconfig_init();
 222               		.loc 1 23 0
 223 000a 0E94 0000 		call eeconfig_init
 224               	.LVL20:
 225               	.L19:
  27:../../tmk_core_custom/common/bootmagic.c ****     print("boogmagic scan: ... ");
 226               		.loc 1 27 0
 227 000e 80E0      		ldi r24,lo8(__c.4721)
 228 0010 90E0      		ldi r25,hi8(__c.4721)
 229 0012 0E94 0000 		call xputs
 230               	.LVL21:
  29:../../tmk_core_custom/common/bootmagic.c ****     while (scan--) { matrix_scan(); _delay_ms(10); }
 231               		.loc 1 29 0
 232 0016 C5E6      		ldi r28,lo8(101)
 233               	.LVL22:
 234               	.L20:
 235 0018 C150      		subi r28,lo8(-(-1))
 236               	.LVL23:
  29:../../tmk_core_custom/common/bootmagic.c ****     while (scan--) { matrix_scan(); _delay_ms(10); }
 237               		.loc 1 29 0 is_stmt 0 discriminator 1
 238 001a 01F0      		breq .L99
 239               	.LVL24:
  29:../../tmk_core_custom/common/bootmagic.c ****     while (scan--) { matrix_scan(); _delay_ms(10); }
 240               		.loc 1 29 0 discriminator 2
 241 001c 0E94 0000 		call matrix_scan
 242               	.LVL25:
 243               	.LBB9:
 244               	.LBB10:
 245               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h"
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 246               		.loc 3 163 0 is_stmt 1 discriminator 2
 247 0020 8FE3      		ldi r24,lo8(-25537)
 248 0022 9CE9      		ldi r25,hi8(-25537)
 249 0024 0197      		1: sbiw r24,1
 250 0026 01F4      		brne 1b
 251 0028 00C0      		rjmp .
 252 002a 0000      		nop
 253 002c 00C0      		rjmp .L20
 254               	.LVL26:
 255               	.L99:
 256               	.LBE10:
 257               	.LBE9:
  30:../../tmk_core_custom/common/bootmagic.c ****     print("done.\n");
 258               		.loc 1 30 0
 259 002e 80E0      		ldi r24,lo8(__c.4727)
 260 0030 90E0      		ldi r25,hi8(__c.4727)
 261 0032 0E94 0000 		call xputs
 262               	.LVL27:
  33:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
 263               		.loc 1 33 0
 264 0036 89E2      		ldi r24,lo8(41)
 265 0038 0E94 0000 		call bootmagic_scan_keycode
 266               	.LVL28:
 267 003c 8111      		cpse r24,__zero_reg__
 268 003e 00C0      		rjmp .L18
  38:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
 269               		.loc 1 38 0
 270 0040 8AE2      		ldi r24,lo8(42)
 271 0042 0E94 0000 		call bootmagic_scan_keycode
 272               	.LVL29:
 273 0046 8823      		tst r24
 274 0048 01F0      		breq .L23
  39:../../tmk_core_custom/common/bootmagic.c ****         eeconfig_disable();
 275               		.loc 1 39 0
 276 004a 0E94 0000 		call eeconfig_disable
 277               	.LVL30:
  40:../../tmk_core_custom/common/bootmagic.c ****         eeconfig_init();
 278               		.loc 1 40 0
 279 004e 0E94 0000 		call eeconfig_init
 280               	.LVL31:
  45:../../tmk_core_custom/common/bootmagic.c ****         write_ledmap_to_eeprom();
 281               		.loc 1 45 0
 282 0052 0E94 0000 		call write_ledmap_to_eeprom
 283               	.LVL32:
 284               	.L23:
  50:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
 285               		.loc 1 50 0
 286 0056 85E0      		ldi r24,lo8(5)
 287 0058 0E94 0000 		call bootmagic_scan_keycode
 288               	.LVL33:
 289 005c 8111      		cpse r24,__zero_reg__
  51:../../tmk_core_custom/common/bootmagic.c ****         bootloader_jump();
 290               		.loc 1 51 0
 291 005e 0E94 0000 		call bootloader_jump
 292               	.LVL34:
 293               	.L24:
  55:../../tmk_core_custom/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
 294               		.loc 1 55 0
 295 0062 0E94 0000 		call eeconfig_read_debug
 296               	.LVL35:
 297 0066 8093 0000 		sts debug_config,r24
  56:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 298               		.loc 1 56 0
 299 006a 87E0      		ldi r24,lo8(7)
 300 006c 0E94 0000 		call bootmagic_scan_keycode
 301               	.LVL36:
 302 0070 8823      		tst r24
 303 0072 01F0      		breq .L25
  57:../../tmk_core_custom/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 304               		.loc 1 57 0
 305 0074 8BE1      		ldi r24,lo8(27)
 306 0076 0E94 0000 		call bootmagic_scan_keycode
 307               	.LVL37:
 308 007a 8823      		tst r24
 309 007c 01F0      		breq .L26
  58:../../tmk_core_custom/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 310               		.loc 1 58 0
 311 007e 9091 0000 		lds r25,debug_config
 312 0082 91FB      		bst r25,1
 313 0084 8827      		clr r24
 314 0086 80F9      		bld r24,0
 315 0088 21E0      		ldi r18,lo8(1)
 316 008a 8227      		eor r24,r18
 317 008c 80FB      		bst r24,0
 318 008e 91F9      		bld r25,1
 319 0090 00C0      		rjmp .L97
 320               	.L26:
  59:../../tmk_core_custom/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 321               		.loc 1 59 0
 322 0092 8EE0      		ldi r24,lo8(14)
 323 0094 0E94 0000 		call bootmagic_scan_keycode
 324               	.LVL38:
 325 0098 8823      		tst r24
 326 009a 01F0      		breq .L27
  60:../../tmk_core_custom/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 327               		.loc 1 60 0
 328 009c 9091 0000 		lds r25,debug_config
 329 00a0 92FB      		bst r25,2
 330 00a2 8827      		clr r24
 331 00a4 80F9      		bld r24,0
 332 00a6 21E0      		ldi r18,lo8(1)
 333 00a8 8227      		eor r24,r18
 334 00aa 80FB      		bst r24,0
 335 00ac 92F9      		bld r25,2
 336 00ae 00C0      		rjmp .L97
 337               	.L27:
  61:../../tmk_core_custom/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 338               		.loc 1 61 0
 339 00b0 80E1      		ldi r24,lo8(16)
 340 00b2 0E94 0000 		call bootmagic_scan_keycode
 341               	.LVL39:
 342 00b6 9091 0000 		lds r25,debug_config
 343 00ba 8823      		tst r24
 344 00bc 01F0      		breq .L28
  62:../../tmk_core_custom/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 345               		.loc 1 62 0
 346 00be 93FB      		bst r25,3
 347 00c0 8827      		clr r24
 348 00c2 80F9      		bld r24,0
 349 00c4 21E0      		ldi r18,lo8(1)
 350 00c6 8227      		eor r24,r18
 351 00c8 80FB      		bst r24,0
 352 00ca 93F9      		bld r25,3
 353 00cc 00C0      		rjmp .L97
 354               	.L28:
  64:../../tmk_core_custom/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
 355               		.loc 1 64 0
 356 00ce 892F      		mov r24,r25
 357 00d0 8095      		com r24
 358 00d2 80FB      		bst r24,0
 359 00d4 90F9      		bld r25,0
 360               	.L97:
 361 00d6 9093 0000 		sts debug_config,r25
 362               	.L25:
  67:../../tmk_core_custom/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
 363               		.loc 1 67 0
 364 00da 8091 0000 		lds r24,debug_config
 365 00de 0E94 0000 		call eeconfig_write_debug
 366               	.LVL40:
  70:../../tmk_core_custom/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
 367               		.loc 1 70 0
 368 00e2 0E94 0000 		call eeconfig_read_keymap
 369               	.LVL41:
 370 00e6 8093 0000 		sts keymap_config,r24
  71:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 371               		.loc 1 71 0
 372 00ea 80EE      		ldi r24,lo8(-32)
 373 00ec 0E94 0000 		call bootmagic_scan_keycode
 374               	.LVL42:
 375 00f0 8823      		tst r24
 376 00f2 01F0      		breq .L29
  72:../../tmk_core_custom/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 377               		.loc 1 72 0
 378 00f4 8091 0000 		lds r24,keymap_config
 379 00f8 982F      		mov r25,r24
 380 00fa 9095      		com r25
 381 00fc 90FB      		bst r25,0
 382 00fe 80F9      		bld r24,0
 383 0100 8093 0000 		sts keymap_config,r24
 384               	.L29:
  74:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
 385               		.loc 1 74 0
 386 0104 89E3      		ldi r24,lo8(57)
 387 0106 0E94 0000 		call bootmagic_scan_keycode
 388               	.LVL43:
 389 010a 8823      		tst r24
 390 010c 01F0      		breq .L30
  75:../../tmk_core_custom/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 391               		.loc 1 75 0
 392 010e 9091 0000 		lds r25,keymap_config
 393 0112 91FB      		bst r25,1
 394 0114 8827      		clr r24
 395 0116 80F9      		bld r24,0
 396 0118 21E0      		ldi r18,lo8(1)
 397 011a 8227      		eor r24,r18
 398 011c 80FB      		bst r24,0
 399 011e 91F9      		bld r25,1
 400 0120 9093 0000 		sts keymap_config,r25
 401               	.L30:
  77:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
 402               		.loc 1 77 0
 403 0124 82EE      		ldi r24,lo8(-30)
 404 0126 0E94 0000 		call bootmagic_scan_keycode
 405               	.LVL44:
 406 012a 8823      		tst r24
 407 012c 01F0      		breq .L31
  78:../../tmk_core_custom/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 408               		.loc 1 78 0
 409 012e 9091 0000 		lds r25,keymap_config
 410 0132 92FB      		bst r25,2
 411 0134 8827      		clr r24
 412 0136 80F9      		bld r24,0
 413 0138 21E0      		ldi r18,lo8(1)
 414 013a 8227      		eor r24,r18
 415 013c 80FB      		bst r24,0
 416 013e 92F9      		bld r25,2
 417 0140 9093 0000 		sts keymap_config,r25
 418               	.L31:
  80:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
 419               		.loc 1 80 0
 420 0144 86EE      		ldi r24,lo8(-26)
 421 0146 0E94 0000 		call bootmagic_scan_keycode
 422               	.LVL45:
 423 014a 8823      		tst r24
 424 014c 01F0      		breq .L32
  81:../../tmk_core_custom/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 425               		.loc 1 81 0
 426 014e 9091 0000 		lds r25,keymap_config
 427 0152 93FB      		bst r25,3
 428 0154 8827      		clr r24
 429 0156 80F9      		bld r24,0
 430 0158 21E0      		ldi r18,lo8(1)
 431 015a 8227      		eor r24,r18
 432 015c 80FB      		bst r24,0
 433 015e 93F9      		bld r25,3
 434 0160 9093 0000 		sts keymap_config,r25
 435               	.L32:
  83:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
 436               		.loc 1 83 0
 437 0164 83EE      		ldi r24,lo8(-29)
 438 0166 0E94 0000 		call bootmagic_scan_keycode
 439               	.LVL46:
 440 016a 8823      		tst r24
 441 016c 01F0      		breq .L33
  84:../../tmk_core_custom/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 442               		.loc 1 84 0
 443 016e 9091 0000 		lds r25,keymap_config
 444 0172 94FB      		bst r25,4
 445 0174 8827      		clr r24
 446 0176 80F9      		bld r24,0
 447 0178 21E0      		ldi r18,lo8(1)
 448 017a 8227      		eor r24,r18
 449 017c 80FB      		bst r24,0
 450 017e 94F9      		bld r25,4
 451 0180 9093 0000 		sts keymap_config,r25
 452               	.L33:
  86:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
 453               		.loc 1 86 0
 454 0184 85E3      		ldi r24,lo8(53)
 455 0186 0E94 0000 		call bootmagic_scan_keycode
 456               	.LVL47:
 457 018a 8823      		tst r24
 458 018c 01F0      		breq .L34
  87:../../tmk_core_custom/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 459               		.loc 1 87 0
 460 018e 9091 0000 		lds r25,keymap_config
 461 0192 95FB      		bst r25,5
 462 0194 8827      		clr r24
 463 0196 80F9      		bld r24,0
 464 0198 21E0      		ldi r18,lo8(1)
 465 019a 8227      		eor r24,r18
 466 019c 80FB      		bst r24,0
 467 019e 95F9      		bld r25,5
 468 01a0 9093 0000 		sts keymap_config,r25
 469               	.L34:
  89:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
 470               		.loc 1 89 0
 471 01a4 81E3      		ldi r24,lo8(49)
 472 01a6 0E94 0000 		call bootmagic_scan_keycode
 473               	.LVL48:
 474 01aa 8823      		tst r24
 475 01ac 01F0      		breq .L35
  90:../../tmk_core_custom/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 476               		.loc 1 90 0
 477 01ae 9091 0000 		lds r25,keymap_config
 478 01b2 96FB      		bst r25,6
 479 01b4 8827      		clr r24
 480 01b6 80F9      		bld r24,0
 481 01b8 21E0      		ldi r18,lo8(1)
 482 01ba 8227      		eor r24,r18
 483 01bc 80FB      		bst r24,0
 484 01be 96F9      		bld r25,6
 485 01c0 9093 0000 		sts keymap_config,r25
 486               	.L35:
  92:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
 487               		.loc 1 92 0
 488 01c4 81E1      		ldi r24,lo8(17)
 489 01c6 0E94 0000 		call bootmagic_scan_keycode
 490               	.LVL49:
 491 01ca 8823      		tst r24
 492 01cc 01F0      		breq .L36
  93:../../tmk_core_custom/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 493               		.loc 1 93 0
 494 01ce 9091 0000 		lds r25,keymap_config
 495 01d2 97FB      		bst r25,7
 496 01d4 8827      		clr r24
 497 01d6 80F9      		bld r24,0
 498 01d8 21E0      		ldi r18,lo8(1)
 499 01da 8227      		eor r24,r18
 500 01dc 80FB      		bst r24,0
 501 01de 97F9      		bld r25,7
 502 01e0 9093 0000 		sts keymap_config,r25
 503               	.L36:
  95:../../tmk_core_custom/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
 504               		.loc 1 95 0
 505 01e4 8091 0000 		lds r24,keymap_config
 506 01e8 0E94 0000 		call eeconfig_write_keymap
 507               	.LVL50:
  98:../../tmk_core_custom/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
 508               		.loc 1 98 0
 509 01ec 8091 0000 		lds r24,keymap_config
 510 01f0 87FB      		bst r24,7
 511 01f2 8827      		clr r24
 512 01f4 80F9      		bld r24,0
 513 01f6 8093 0000 		sts keyboard_nkro,r24
 514               	.LVL51:
 103:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
 515               		.loc 1 103 0
 516 01fa 87E2      		ldi r24,lo8(39)
 517 01fc 0E94 0000 		call bootmagic_scan_keycode
 518               	.LVL52:
 519 0200 C82F      		mov r28,r24
 520               	.LVL53:
 104:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 521               		.loc 1 104 0
 522 0202 8EE1      		ldi r24,lo8(30)
 523               	.LVL54:
 524 0204 0E94 0000 		call bootmagic_scan_keycode
 525               	.LVL55:
 526 0208 8111      		cpse r24,__zero_reg__
 104:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 527               		.loc 1 104 0 is_stmt 0 discriminator 1
 528 020a C260      		ori r28,lo8(2)
 529               	.LVL56:
 530               	.L37:
 105:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 531               		.loc 1 105 0 is_stmt 1
 532 020c 8FE1      		ldi r24,lo8(31)
 533 020e 0E94 0000 		call bootmagic_scan_keycode
 534               	.LVL57:
 535 0212 8111      		cpse r24,__zero_reg__
 105:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 536               		.loc 1 105 0 is_stmt 0 discriminator 1
 537 0214 C460      		ori r28,lo8(4)
 538               	.LVL58:
 539               	.L38:
 106:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 540               		.loc 1 106 0 is_stmt 1
 541 0216 80E2      		ldi r24,lo8(32)
 542 0218 0E94 0000 		call bootmagic_scan_keycode
 543               	.LVL59:
 544 021c 8111      		cpse r24,__zero_reg__
 106:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 545               		.loc 1 106 0 is_stmt 0 discriminator 1
 546 021e C860      		ori r28,lo8(8)
 547               	.LVL60:
 548               	.L39:
 107:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 549               		.loc 1 107 0 is_stmt 1
 550 0220 81E2      		ldi r24,lo8(33)
 551 0222 0E94 0000 		call bootmagic_scan_keycode
 552               	.LVL61:
 553 0226 8111      		cpse r24,__zero_reg__
 107:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 554               		.loc 1 107 0 is_stmt 0 discriminator 1
 555 0228 C061      		ori r28,lo8(16)
 556               	.LVL62:
 557               	.L40:
 108:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 558               		.loc 1 108 0 is_stmt 1
 559 022a 82E2      		ldi r24,lo8(34)
 560 022c 0E94 0000 		call bootmagic_scan_keycode
 561               	.LVL63:
 562 0230 8111      		cpse r24,__zero_reg__
 108:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 563               		.loc 1 108 0 is_stmt 0 discriminator 1
 564 0232 C062      		ori r28,lo8(32)
 565               	.LVL64:
 566               	.L41:
 109:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 567               		.loc 1 109 0 is_stmt 1
 568 0234 83E2      		ldi r24,lo8(35)
 569 0236 0E94 0000 		call bootmagic_scan_keycode
 570               	.LVL65:
 571 023a 8111      		cpse r24,__zero_reg__
 109:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 572               		.loc 1 109 0 is_stmt 0 discriminator 1
 573 023c C064      		ori r28,lo8(64)
 574               	.LVL66:
 575               	.L42:
 110:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 576               		.loc 1 110 0 is_stmt 1
 577 023e 84E2      		ldi r24,lo8(36)
 578 0240 0E94 0000 		call bootmagic_scan_keycode
 579               	.LVL67:
 580 0244 8823      		tst r24
 581 0246 01F0      		breq .L43
 110:../../tmk_core_custom/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 582               		.loc 1 110 0 is_stmt 0 discriminator 1
 583 0248 C068      		ori r28,lo8(-128)
 584               	.LVL68:
 585 024a 00C0      		rjmp .L44
 586               	.L43:
 111:../../tmk_core_custom/common/bootmagic.c ****     if (default_layer) {
 587               		.loc 1 111 0 is_stmt 1
 588 024c CC23      		tst r28
 589 024e 01F0      		breq .L45
 590               	.L44:
 112:../../tmk_core_custom/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 591               		.loc 1 112 0
 592 0250 8C2F      		mov r24,r28
 593 0252 0E94 0000 		call eeconfig_write_default_layer
 594               	.LVL69:
 113:../../tmk_core_custom/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 595               		.loc 1 113 0
 596 0256 6C2F      		mov r22,r28
 597 0258 00C0      		rjmp .L98
 598               	.L45:
 115:../../tmk_core_custom/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 599               		.loc 1 115 0
 600 025a 0E94 0000 		call eeconfig_read_default_layer
 601               	.LVL70:
 116:../../tmk_core_custom/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 602               		.loc 1 116 0
 603 025e 682F      		mov r22,r24
 604               	.LVL71:
 605               	.L98:
 606 0260 70E0      		ldi r23,0
 607 0262 80E0      		ldi r24,0
 608 0264 90E0      		ldi r25,0
 609               	/* epilogue start */
 126:../../tmk_core_custom/common/bootmagic.c **** }
 610               		.loc 1 126 0
 611 0266 CF91      		pop r28
 116:../../tmk_core_custom/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 612               		.loc 1 116 0
 613 0268 0C94 0000 		jmp default_layer_set
 614               	.LVL72:
 615               	.L18:
 616               	/* epilogue start */
 126:../../tmk_core_custom/common/bootmagic.c **** }
 617               		.loc 1 126 0
 618 026c CF91      		pop r28
 619               	.LVL73:
 620 026e 0895      		ret
 621               		.cfi_endproc
 622               	.LFE105:
 624               		.section	.progmem.data.__c.4727,"a",@progbits
 627               	__c.4727:
 628 0000 646F 6E65 		.string	"done.\n"
 628      2E0A 00
 629               		.section	.progmem.data.__c.4721,"a",@progbits
 632               	__c.4721:
 633 0000 626F 6F67 		.string	"boogmagic scan: ... "
 633      6D61 6769 
 633      6320 7363 
 633      616E 3A20 
 633      2E2E 2E20 
 634               		.comm	keymap_config,1,1
 635               		.text
 636               	.Letext0:
 637               		.file 4 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 638               		.file 5 "../../tmk_core_custom/common/matrix.h"
 639               		.file 6 "../../tmk_core_custom/common/debug.h"
 640               		.file 7 "../../tmk_core_custom/common/keycode.h"
 641               		.file 8 "../../tmk_core_custom/common/keymap.h"
 642               		.file 9 "../../tmk_core_custom/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 643               		.file 10 "../../tmk_core_custom/common/host.h"
 644               		.file 11 "../../tmk_core_custom/common/eeconfig.h"
 645               		.file 12 "../../tmk_core_custom/common/ledmap_in_eeprom.h"
 646               		.file 13 "../../tmk_core_custom/common/bootloader.h"
 647               		.file 14 "../../tmk_core_custom/common/avr/xprintf.h"
 648               		.file 15 "../../tmk_core_custom/common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:00000000 bootmagic.c
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccpc4ZwP.s:2      *ABS*:0000003e __SP_H__
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccpc4ZwP.s:3      *ABS*:0000003d __SP_L__
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccpc4ZwP.s:4      *ABS*:0000003f __SREG__
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccpc4ZwP.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccpc4ZwP.s:6      *ABS*:00000001 __zero_reg__
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccpc4ZwP.s:12     .text.scan_keycode:00000000 scan_keycode
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccpc4ZwP.s:130    .text.matrix_power_up:00000000 matrix_power_up
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccpc4ZwP.s:146    .text.matrix_power_down:00000000 matrix_power_down
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccpc4ZwP.s:161    .text.bootmagic_scan_keycode:00000000 bootmagic_scan_keycode
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccpc4ZwP.s:205    .text.bootmagic:00000000 bootmagic
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccpc4ZwP.s:632    .progmem.data.__c.4721:00000000 __c.4721
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccpc4ZwP.s:627    .progmem.data.__c.4727:00000000 __c.4727
                            *COM*:00000001 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
keymap_key_to_keycode
eeconfig_is_enabled
eeconfig_init
xputs
matrix_scan
eeconfig_disable
write_ledmap_to_eeprom
bootloader_jump
eeconfig_read_debug
debug_config
eeconfig_write_debug
eeconfig_read_keymap
eeconfig_write_keymap
keyboard_nkro
eeconfig_write_default_layer
eeconfig_read_default_layer
default_layer_set
__do_clear_bss
