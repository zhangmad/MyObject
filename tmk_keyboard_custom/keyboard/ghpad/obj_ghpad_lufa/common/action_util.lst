   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LFB101:
  15               		.file 1 "../../tmk_core_custom/common/action_util.c"
   1:../../tmk_core_custom/common/action_util.c **** /*
   2:../../tmk_core_custom/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core_custom/common/action_util.c **** 
   4:../../tmk_core_custom/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core_custom/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core_custom/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core_custom/common/action_util.c **** (at your option) any later version.
   8:../../tmk_core_custom/common/action_util.c **** 
   9:../../tmk_core_custom/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core_custom/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core_custom/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core_custom/common/action_util.c **** GNU General Public License for more details.
  13:../../tmk_core_custom/common/action_util.c **** 
  14:../../tmk_core_custom/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core_custom/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core_custom/common/action_util.c **** */
  17:../../tmk_core_custom/common/action_util.c **** #include "host.h"
  18:../../tmk_core_custom/common/action_util.c **** #include "report.h"
  19:../../tmk_core_custom/common/action_util.c **** #include "debug.h"
  20:../../tmk_core_custom/common/action_util.c **** #include "action_util.h"
  21:../../tmk_core_custom/common/action_util.c **** #include "timer.h"
  22:../../tmk_core_custom/common/action_util.c **** 
  23:../../tmk_core_custom/common/action_util.c **** static inline void add_key_byte(uint8_t code);
  24:../../tmk_core_custom/common/action_util.c **** static inline void del_key_byte(uint8_t code);
  25:../../tmk_core_custom/common/action_util.c **** #ifdef NKRO_ENABLE
  26:../../tmk_core_custom/common/action_util.c **** static inline void add_key_bit(uint8_t code);
  27:../../tmk_core_custom/common/action_util.c **** static inline void del_key_bit(uint8_t code);
  28:../../tmk_core_custom/common/action_util.c **** #endif
  29:../../tmk_core_custom/common/action_util.c **** 
  30:../../tmk_core_custom/common/action_util.c **** static uint8_t real_mods = 0;
  31:../../tmk_core_custom/common/action_util.c **** static uint8_t weak_mods = 0;
  32:../../tmk_core_custom/common/action_util.c **** 
  33:../../tmk_core_custom/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  34:../../tmk_core_custom/common/action_util.c **** #undef KEYBOARD_REPORT_KEYS
  35:../../tmk_core_custom/common/action_util.c **** #define KEYBOARD_REPORT_KEYS 6
  36:../../tmk_core_custom/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  37:../../tmk_core_custom/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  38:../../tmk_core_custom/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  39:../../tmk_core_custom/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  40:../../tmk_core_custom/common/action_util.c **** static int8_t cb_head = 0;
  41:../../tmk_core_custom/common/action_util.c **** static int8_t cb_tail = 0;
  42:../../tmk_core_custom/common/action_util.c **** static int8_t cb_count = 0;
  43:../../tmk_core_custom/common/action_util.c **** #endif
  44:../../tmk_core_custom/common/action_util.c **** 
  45:../../tmk_core_custom/common/action_util.c **** // TODO: pointer variable is not needed
  46:../../tmk_core_custom/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  47:../../tmk_core_custom/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  48:../../tmk_core_custom/common/action_util.c **** 
  49:../../tmk_core_custom/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  50:../../tmk_core_custom/common/action_util.c **** static int8_t oneshot_mods = 0;
  51:../../tmk_core_custom/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  52:../../tmk_core_custom/common/action_util.c **** static int16_t oneshot_time = 0;
  53:../../tmk_core_custom/common/action_util.c **** #endif
  54:../../tmk_core_custom/common/action_util.c **** #endif
  55:../../tmk_core_custom/common/action_util.c **** 
  56:../../tmk_core_custom/common/action_util.c **** 
  57:../../tmk_core_custom/common/action_util.c **** void send_keyboard_report(void) {
  58:../../tmk_core_custom/common/action_util.c ****     keyboard_report->mods  = real_mods;
  59:../../tmk_core_custom/common/action_util.c ****     keyboard_report->mods |= weak_mods;
  60:../../tmk_core_custom/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  61:../../tmk_core_custom/common/action_util.c ****     if (oneshot_mods) {
  62:../../tmk_core_custom/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  63:../../tmk_core_custom/common/action_util.c ****         if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
  64:../../tmk_core_custom/common/action_util.c ****             dprintf("Oneshot: timeout\n");
  65:../../tmk_core_custom/common/action_util.c ****             clear_oneshot_mods();
  66:../../tmk_core_custom/common/action_util.c ****         }
  67:../../tmk_core_custom/common/action_util.c **** #endif
  68:../../tmk_core_custom/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
  69:../../tmk_core_custom/common/action_util.c ****         if (has_anykey()) {
  70:../../tmk_core_custom/common/action_util.c ****             clear_oneshot_mods();
  71:../../tmk_core_custom/common/action_util.c ****         }
  72:../../tmk_core_custom/common/action_util.c ****     }
  73:../../tmk_core_custom/common/action_util.c **** #endif
  74:../../tmk_core_custom/common/action_util.c ****     host_keyboard_send(keyboard_report);
  75:../../tmk_core_custom/common/action_util.c **** }
  76:../../tmk_core_custom/common/action_util.c **** 
  77:../../tmk_core_custom/common/action_util.c **** /* key */
  78:../../tmk_core_custom/common/action_util.c **** void add_key(uint8_t key)
  79:../../tmk_core_custom/common/action_util.c **** {
  16               		.loc 1 79 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF92      		push r12
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 12, -2
  23 0002 DF92      		push r13
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 13, -3
  27 0004 EF92      		push r14
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 14, -4
  31 0006 FF92      		push r15
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 15, -5
  35 0008 0F93      		push r16
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 16, -6
  39 000a 1F93      		push r17
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 17, -7
  43 000c CF93      		push r28
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 28, -8
  47 000e DF93      		push r29
  48               	.LCFI7:
  49               		.cfi_def_cfa_offset 10
  50               		.cfi_offset 29, -9
  51               	/* prologue: function */
  52               	/* frame size = 0 */
  53               	/* stack size = 8 */
  54               	.L__stack_usage = 8
  55 0010 F82E      		mov r15,r24
  80:../../tmk_core_custom/common/action_util.c **** #ifdef NKRO_ENABLE
  81:../../tmk_core_custom/common/action_util.c ****     if (keyboard_nkro) {
  56               		.loc 1 81 0
  57 0012 8091 0000 		lds r24,keyboard_nkro
  58               	.LVL1:
  59 0016 8823      		tst r24
  60 0018 01F0      		breq .L2
  61               	.LVL2:
  62               	.LBB8:
  63               	.LBB9:
  82:../../tmk_core_custom/common/action_util.c ****         add_key_bit(key);
  83:../../tmk_core_custom/common/action_util.c ****         return;
  84:../../tmk_core_custom/common/action_util.c ****     }
  85:../../tmk_core_custom/common/action_util.c **** #endif
  86:../../tmk_core_custom/common/action_util.c ****     add_key_byte(key);
  87:../../tmk_core_custom/common/action_util.c **** }
  88:../../tmk_core_custom/common/action_util.c **** 
  89:../../tmk_core_custom/common/action_util.c **** void del_key(uint8_t key)
  90:../../tmk_core_custom/common/action_util.c **** {
  91:../../tmk_core_custom/common/action_util.c **** #ifdef NKRO_ENABLE
  92:../../tmk_core_custom/common/action_util.c ****     if (keyboard_nkro) {
  93:../../tmk_core_custom/common/action_util.c ****         del_key_bit(key);
  94:../../tmk_core_custom/common/action_util.c ****         return;
  95:../../tmk_core_custom/common/action_util.c ****     }
  96:../../tmk_core_custom/common/action_util.c **** #endif
  97:../../tmk_core_custom/common/action_util.c ****     del_key_byte(key);
  98:../../tmk_core_custom/common/action_util.c **** }
  99:../../tmk_core_custom/common/action_util.c **** 
 100:../../tmk_core_custom/common/action_util.c **** void clear_keys(void)
 101:../../tmk_core_custom/common/action_util.c **** {
 102:../../tmk_core_custom/common/action_util.c ****     // not clear mods
 103:../../tmk_core_custom/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 104:../../tmk_core_custom/common/action_util.c ****         keyboard_report->raw[i] = 0;
 105:../../tmk_core_custom/common/action_util.c ****     }
 106:../../tmk_core_custom/common/action_util.c **** }
 107:../../tmk_core_custom/common/action_util.c **** 
 108:../../tmk_core_custom/common/action_util.c **** 
 109:../../tmk_core_custom/common/action_util.c **** /* modifier */
 110:../../tmk_core_custom/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 111:../../tmk_core_custom/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 112:../../tmk_core_custom/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 113:../../tmk_core_custom/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 114:../../tmk_core_custom/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 115:../../tmk_core_custom/common/action_util.c **** 
 116:../../tmk_core_custom/common/action_util.c **** /* weak modifier */
 117:../../tmk_core_custom/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 118:../../tmk_core_custom/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 119:../../tmk_core_custom/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 120:../../tmk_core_custom/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 121:../../tmk_core_custom/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 122:../../tmk_core_custom/common/action_util.c **** 
 123:../../tmk_core_custom/common/action_util.c **** /* Oneshot modifier */
 124:../../tmk_core_custom/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 125:../../tmk_core_custom/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 126:../../tmk_core_custom/common/action_util.c **** {
 127:../../tmk_core_custom/common/action_util.c ****     oneshot_mods = mods;
 128:../../tmk_core_custom/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 129:../../tmk_core_custom/common/action_util.c ****     oneshot_time = timer_read();
 130:../../tmk_core_custom/common/action_util.c **** #endif
 131:../../tmk_core_custom/common/action_util.c **** }
 132:../../tmk_core_custom/common/action_util.c **** void clear_oneshot_mods(void)
 133:../../tmk_core_custom/common/action_util.c **** {
 134:../../tmk_core_custom/common/action_util.c ****     oneshot_mods = 0;
 135:../../tmk_core_custom/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 136:../../tmk_core_custom/common/action_util.c ****     oneshot_time = 0;
 137:../../tmk_core_custom/common/action_util.c **** #endif
 138:../../tmk_core_custom/common/action_util.c **** }
 139:../../tmk_core_custom/common/action_util.c **** #endif
 140:../../tmk_core_custom/common/action_util.c **** 
 141:../../tmk_core_custom/common/action_util.c **** 
 142:../../tmk_core_custom/common/action_util.c **** 
 143:../../tmk_core_custom/common/action_util.c **** 
 144:../../tmk_core_custom/common/action_util.c **** /*
 145:../../tmk_core_custom/common/action_util.c ****  * inspect keyboard state
 146:../../tmk_core_custom/common/action_util.c ****  */
 147:../../tmk_core_custom/common/action_util.c **** uint8_t has_anykey(void)
 148:../../tmk_core_custom/common/action_util.c **** {
 149:../../tmk_core_custom/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 150:../../tmk_core_custom/common/action_util.c **** #ifdef NKRO_ENABLE
 151:../../tmk_core_custom/common/action_util.c ****     if (!keyboard_nkro) {
 152:../../tmk_core_custom/common/action_util.c **** #endif
 153:../../tmk_core_custom/common/action_util.c ****         return cb_count;
 154:../../tmk_core_custom/common/action_util.c **** #ifdef NKRO_ENABLE
 155:../../tmk_core_custom/common/action_util.c ****     }
 156:../../tmk_core_custom/common/action_util.c **** #endif
 157:../../tmk_core_custom/common/action_util.c **** #else
 158:../../tmk_core_custom/common/action_util.c ****     uint8_t cnt = 0;
 159:../../tmk_core_custom/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 160:../../tmk_core_custom/common/action_util.c ****         if (keyboard_report->raw[i])
 161:../../tmk_core_custom/common/action_util.c ****             cnt++;
 162:../../tmk_core_custom/common/action_util.c ****     }
 163:../../tmk_core_custom/common/action_util.c ****     return cnt;
 164:../../tmk_core_custom/common/action_util.c **** #endif
 165:../../tmk_core_custom/common/action_util.c **** }
 166:../../tmk_core_custom/common/action_util.c **** 
 167:../../tmk_core_custom/common/action_util.c **** uint8_t has_anymod(void)
 168:../../tmk_core_custom/common/action_util.c **** {
 169:../../tmk_core_custom/common/action_util.c ****     return bitpop(real_mods);
 170:../../tmk_core_custom/common/action_util.c **** }
 171:../../tmk_core_custom/common/action_util.c **** 
 172:../../tmk_core_custom/common/action_util.c **** uint8_t get_first_key(void)
 173:../../tmk_core_custom/common/action_util.c **** {
 174:../../tmk_core_custom/common/action_util.c **** #ifdef NKRO_ENABLE
 175:../../tmk_core_custom/common/action_util.c ****     if (keyboard_nkro) {
 176:../../tmk_core_custom/common/action_util.c ****         uint8_t i = 0;
 177:../../tmk_core_custom/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 178:../../tmk_core_custom/common/action_util.c ****             ;
 179:../../tmk_core_custom/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 180:../../tmk_core_custom/common/action_util.c ****     }
 181:../../tmk_core_custom/common/action_util.c **** #endif
 182:../../tmk_core_custom/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 183:../../tmk_core_custom/common/action_util.c ****     uint8_t i = cb_head;
 184:../../tmk_core_custom/common/action_util.c ****     do {
 185:../../tmk_core_custom/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 186:../../tmk_core_custom/common/action_util.c ****             break;
 187:../../tmk_core_custom/common/action_util.c ****         }
 188:../../tmk_core_custom/common/action_util.c ****         i = RO_INC(i);
 189:../../tmk_core_custom/common/action_util.c ****     } while (i != cb_tail);
 190:../../tmk_core_custom/common/action_util.c ****     return keyboard_report->keys[i];
 191:../../tmk_core_custom/common/action_util.c **** #else
 192:../../tmk_core_custom/common/action_util.c ****     return keyboard_report->keys[0];
 193:../../tmk_core_custom/common/action_util.c **** #endif
 194:../../tmk_core_custom/common/action_util.c **** }
 195:../../tmk_core_custom/common/action_util.c **** 
 196:../../tmk_core_custom/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 197:../../tmk_core_custom/common/action_util.c **** #ifdef DEBUG
 198:../../tmk_core_custom/common/action_util.c **** static void dump_report_keys(void) {
 199:../../tmk_core_custom/common/action_util.c ****     dprintf("\n");
 200:../../tmk_core_custom/common/action_util.c ****     for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 201:../../tmk_core_custom/common/action_util.c ****         dprintf("%02X ", keyboard_report->keys[i]);
 202:../../tmk_core_custom/common/action_util.c ****     }
 203:../../tmk_core_custom/common/action_util.c ****     dprintf("\n");
 204:../../tmk_core_custom/common/action_util.c ****     for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 205:../../tmk_core_custom/common/action_util.c ****         dprintf("%c%c ", i==cb_head?'H':' ', i==cb_tail?'T':' ');
 206:../../tmk_core_custom/common/action_util.c ****     }
 207:../../tmk_core_custom/common/action_util.c ****     dprintf("\n");
 208:../../tmk_core_custom/common/action_util.c **** }
 209:../../tmk_core_custom/common/action_util.c **** #endif
 210:../../tmk_core_custom/common/action_util.c **** #endif
 211:../../tmk_core_custom/common/action_util.c **** 
 212:../../tmk_core_custom/common/action_util.c **** /* local functions */
 213:../../tmk_core_custom/common/action_util.c **** static inline void add_key_byte(uint8_t code)
 214:../../tmk_core_custom/common/action_util.c **** {
 215:../../tmk_core_custom/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 216:../../tmk_core_custom/common/action_util.c ****     int8_t i = cb_head;
 217:../../tmk_core_custom/common/action_util.c ****     int8_t empty = -1;
 218:../../tmk_core_custom/common/action_util.c ****     if (cb_count) {
 219:../../tmk_core_custom/common/action_util.c ****         do {
 220:../../tmk_core_custom/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 221:../../tmk_core_custom/common/action_util.c ****                 return;
 222:../../tmk_core_custom/common/action_util.c ****             }
 223:../../tmk_core_custom/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 224:../../tmk_core_custom/common/action_util.c ****                 empty = i;
 225:../../tmk_core_custom/common/action_util.c ****             }
 226:../../tmk_core_custom/common/action_util.c ****             i = RO_INC(i);
 227:../../tmk_core_custom/common/action_util.c ****         } while (i != cb_tail);
 228:../../tmk_core_custom/common/action_util.c ****         if (i == cb_tail) {
 229:../../tmk_core_custom/common/action_util.c ****             if (cb_tail == cb_head) {
 230:../../tmk_core_custom/common/action_util.c ****                 // buffer is full
 231:../../tmk_core_custom/common/action_util.c ****                 if (empty == -1) {
 232:../../tmk_core_custom/common/action_util.c ****                     // pop head when has no empty space
 233:../../tmk_core_custom/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 234:../../tmk_core_custom/common/action_util.c ****                     cb_count--;
 235:../../tmk_core_custom/common/action_util.c ****                 }
 236:../../tmk_core_custom/common/action_util.c ****                 else {
 237:../../tmk_core_custom/common/action_util.c ****                     // left shift when has empty space
 238:../../tmk_core_custom/common/action_util.c ****                     uint8_t offset = 1;
 239:../../tmk_core_custom/common/action_util.c ****                     i = RO_INC(empty);
 240:../../tmk_core_custom/common/action_util.c ****                     do {
 241:../../tmk_core_custom/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 242:../../tmk_core_custom/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 243:../../tmk_core_custom/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 244:../../tmk_core_custom/common/action_util.c ****                             empty = RO_INC(empty);
 245:../../tmk_core_custom/common/action_util.c ****                         }
 246:../../tmk_core_custom/common/action_util.c ****                         else {
 247:../../tmk_core_custom/common/action_util.c ****                             offset++;
 248:../../tmk_core_custom/common/action_util.c ****                         }
 249:../../tmk_core_custom/common/action_util.c ****                         i = RO_INC(i);
 250:../../tmk_core_custom/common/action_util.c ****                     } while (i != cb_tail);
 251:../../tmk_core_custom/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 252:../../tmk_core_custom/common/action_util.c ****                 }
 253:../../tmk_core_custom/common/action_util.c ****             }
 254:../../tmk_core_custom/common/action_util.c ****         }
 255:../../tmk_core_custom/common/action_util.c ****     }
 256:../../tmk_core_custom/common/action_util.c ****     // add to tail
 257:../../tmk_core_custom/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 258:../../tmk_core_custom/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 259:../../tmk_core_custom/common/action_util.c ****     cb_count++;
 260:../../tmk_core_custom/common/action_util.c **** #ifdef DEBUG
 261:../../tmk_core_custom/common/action_util.c ****     dump_report_keys();
 262:../../tmk_core_custom/common/action_util.c **** #endif
 263:../../tmk_core_custom/common/action_util.c **** #else
 264:../../tmk_core_custom/common/action_util.c ****     int8_t i = 0;
 265:../../tmk_core_custom/common/action_util.c ****     int8_t empty = -1;
 266:../../tmk_core_custom/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
 267:../../tmk_core_custom/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 268:../../tmk_core_custom/common/action_util.c ****             break;
 269:../../tmk_core_custom/common/action_util.c ****         }
 270:../../tmk_core_custom/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
 271:../../tmk_core_custom/common/action_util.c ****             empty = i;
 272:../../tmk_core_custom/common/action_util.c ****         }
 273:../../tmk_core_custom/common/action_util.c ****     }
 274:../../tmk_core_custom/common/action_util.c ****     if (i == KEYBOARD_REPORT_KEYS) {
 275:../../tmk_core_custom/common/action_util.c ****         if (empty != -1) {
 276:../../tmk_core_custom/common/action_util.c ****             keyboard_report->keys[empty] = code;
 277:../../tmk_core_custom/common/action_util.c ****         }
 278:../../tmk_core_custom/common/action_util.c ****     }
 279:../../tmk_core_custom/common/action_util.c **** #endif
 280:../../tmk_core_custom/common/action_util.c **** }
 281:../../tmk_core_custom/common/action_util.c **** 
 282:../../tmk_core_custom/common/action_util.c **** static inline void del_key_byte(uint8_t code)
 283:../../tmk_core_custom/common/action_util.c **** {
 284:../../tmk_core_custom/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 285:../../tmk_core_custom/common/action_util.c ****     uint8_t i = cb_head;
 286:../../tmk_core_custom/common/action_util.c ****     if (cb_count) {
 287:../../tmk_core_custom/common/action_util.c ****         do {
 288:../../tmk_core_custom/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 289:../../tmk_core_custom/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 290:../../tmk_core_custom/common/action_util.c ****                 cb_count--;
 291:../../tmk_core_custom/common/action_util.c ****                 if (cb_count == 0) {
 292:../../tmk_core_custom/common/action_util.c ****                     // reset head and tail
 293:../../tmk_core_custom/common/action_util.c ****                     cb_tail = cb_head = 0;
 294:../../tmk_core_custom/common/action_util.c ****                 }
 295:../../tmk_core_custom/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 296:../../tmk_core_custom/common/action_util.c ****                     // left shift when next to tail
 297:../../tmk_core_custom/common/action_util.c ****                     do {
 298:../../tmk_core_custom/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 299:../../tmk_core_custom/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 300:../../tmk_core_custom/common/action_util.c ****                             break;
 301:../../tmk_core_custom/common/action_util.c ****                         }
 302:../../tmk_core_custom/common/action_util.c ****                     } while (cb_tail != cb_head);
 303:../../tmk_core_custom/common/action_util.c ****                 }
 304:../../tmk_core_custom/common/action_util.c ****                 break;
 305:../../tmk_core_custom/common/action_util.c ****             }
 306:../../tmk_core_custom/common/action_util.c ****             i = RO_INC(i);
 307:../../tmk_core_custom/common/action_util.c ****         } while (i != cb_tail);
 308:../../tmk_core_custom/common/action_util.c ****     }
 309:../../tmk_core_custom/common/action_util.c **** #ifdef DEBUG
 310:../../tmk_core_custom/common/action_util.c ****     dump_report_keys();
 311:../../tmk_core_custom/common/action_util.c **** #endif
 312:../../tmk_core_custom/common/action_util.c **** #else
 313:../../tmk_core_custom/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 314:../../tmk_core_custom/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 315:../../tmk_core_custom/common/action_util.c ****             keyboard_report->keys[i] = 0;
 316:../../tmk_core_custom/common/action_util.c ****         }
 317:../../tmk_core_custom/common/action_util.c ****     }
 318:../../tmk_core_custom/common/action_util.c **** #endif
 319:../../tmk_core_custom/common/action_util.c **** }
 320:../../tmk_core_custom/common/action_util.c **** 
 321:../../tmk_core_custom/common/action_util.c **** #ifdef NKRO_ENABLE
 322:../../tmk_core_custom/common/action_util.c **** static inline void add_key_bit(uint8_t code)
 323:../../tmk_core_custom/common/action_util.c **** {
 324:../../tmk_core_custom/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
  64               		.loc 1 324 0
  65 001a 8F2D      		mov r24,r15
  66 001c 8695      		lsr r24
  67 001e 8695      		lsr r24
  68 0020 8695      		lsr r24
  69 0022 8F30      		cpi r24,lo8(15)
  70 0024 00F4      		brsh .L3
 325:../../tmk_core_custom/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
  71               		.loc 1 325 0
  72 0026 E091 0000 		lds r30,keyboard_report
  73 002a F091 0000 		lds r31,keyboard_report+1
  74 002e E80F      		add r30,r24
  75 0030 F11D      		adc r31,__zero_reg__
  76 0032 8F2D      		mov r24,r15
  77 0034 8770      		andi r24,lo8(7)
  78 0036 21E0      		ldi r18,lo8(1)
  79 0038 30E0      		ldi r19,0
  80 003a 00C0      		rjmp 2f
  81               		1:
  82 003c 220F      		lsl r18
  83               		2:
  84 003e 8A95      		dec r24
  85 0040 02F4      		brpl 1b
  86 0042 8181      		ldd r24,Z+1
  87 0044 822B      		or r24,r18
  88 0046 8183      		std Z+1,r24
  89 0048 00C0      		rjmp .L1
  90               	.L3:
 326:../../tmk_core_custom/common/action_util.c ****     } else {
 327:../../tmk_core_custom/common/action_util.c ****         dprintf("add_key_bit: can't add: %02X\n", code);
  91               		.loc 1 327 0
  92 004a 8091 0000 		lds r24,debug_config
  93 004e 80FF      		sbrs r24,0
  94 0050 00C0      		rjmp .L1
  95 0052 1F92      		push __zero_reg__
  96               	.LCFI8:
  97               		.cfi_def_cfa_offset 11
  98 0054 FF92      		push r15
  99               	.LCFI9:
 100               		.cfi_def_cfa_offset 12
 101 0056 80E0      		ldi r24,lo8(__c.4556)
 102 0058 90E0      		ldi r25,hi8(__c.4556)
 103 005a 9F93      		push r25
 104               	.LCFI10:
 105               		.cfi_def_cfa_offset 13
 106 005c 8F93      		push r24
 107               	.LCFI11:
 108               		.cfi_def_cfa_offset 14
 109 005e 0E94 0000 		call __xprintf
 110               	.LVL3:
 111 0062 0F90      		pop __tmp_reg__
 112 0064 0F90      		pop __tmp_reg__
 113 0066 0F90      		pop __tmp_reg__
 114 0068 0F90      		pop __tmp_reg__
 115               	.LCFI12:
 116               		.cfi_def_cfa_offset 10
 117 006a 00C0      		rjmp .L1
 118               	.LVL4:
 119               	.L2:
 120               	.LBE9:
 121               	.LBE8:
 122               	.LBB10:
 123               	.LBB11:
 216:../../tmk_core_custom/common/action_util.c ****     int8_t i = cb_head;
 124               		.loc 1 216 0
 125 006c E090 0000 		lds r14,cb_head
 126               	.LVL5:
 218:../../tmk_core_custom/common/action_util.c ****     if (cb_count) {
 127               		.loc 1 218 0
 128 0070 4091 0000 		lds r20,cb_count
 129 0074 E091 0000 		lds r30,keyboard_report
 130 0078 F091 0000 		lds r31,keyboard_report+1
 131 007c 4423      		tst r20
 132 007e 01F4      		brne .+2
 133 0080 00C0      		rjmp .L5
 227:../../tmk_core_custom/common/action_util.c ****         } while (i != cb_tail);
 134               		.loc 1 227 0
 135 0082 2091 0000 		lds r18,cb_tail
 136 0086 8E2D      		mov r24,r14
 137 0088 3FEF      		ldi r19,lo8(-1)
 226:../../tmk_core_custom/common/action_util.c ****             i = RO_INC(i);
 138               		.loc 1 226 0
 139 008a 06E0      		ldi r16,lo8(6)
 140 008c 10E0      		ldi r17,0
 141               	.LVL6:
 142               	.L8:
 220:../../tmk_core_custom/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 143               		.loc 1 220 0
 144 008e A82F      		mov r26,r24
 145 0090 BB27      		clr r27
 146 0092 A7FD      		sbrc r26,7
 147 0094 B095      		com r27
 148 0096 EF01      		movw r28,r30
 149 0098 CA0F      		add r28,r26
 150 009a DB1F      		adc r29,r27
 151 009c 9A81      		ldd r25,Y+2
 152 009e 9F15      		cp r25,r15
 153 00a0 01F4      		brne .+2
 154 00a2 00C0      		rjmp .L1
 223:../../tmk_core_custom/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 155               		.loc 1 223 0
 156 00a4 3F3F      		cpi r19,lo8(-1)
 157 00a6 01F4      		brne .L6
 158 00a8 9111      		cpse r25,__zero_reg__
 159 00aa 00C0      		rjmp .L6
 224:../../tmk_core_custom/common/action_util.c ****                 empty = i;
 160               		.loc 1 224 0
 161 00ac 382F      		mov r19,r24
 162               	.LVL7:
 163               	.L6:
 226:../../tmk_core_custom/common/action_util.c ****             i = RO_INC(i);
 164               		.loc 1 226 0
 165 00ae CD01      		movw r24,r26
 166               	.LVL8:
 167 00b0 0196      		adiw r24,1
 168 00b2 C6E0      		ldi r28,lo8(6)
 169 00b4 D0E0      		ldi r29,0
 170 00b6 B801      		movw r22,r16
 171 00b8 0E94 0000 		call __divmodhi4
 172               	.LVL9:
 227:../../tmk_core_custom/common/action_util.c ****         } while (i != cb_tail);
 173               		.loc 1 227 0
 174 00bc 8213      		cpse r24,r18
 175 00be 00C0      		rjmp .L8
 229:../../tmk_core_custom/common/action_util.c ****             if (cb_tail == cb_head) {
 176               		.loc 1 229 0
 177 00c0 2E11      		cpse r18,r14
 178 00c2 00C0      		rjmp .L5
 231:../../tmk_core_custom/common/action_util.c ****                 if (empty == -1) {
 179               		.loc 1 231 0
 180 00c4 3F3F      		cpi r19,lo8(-1)
 181 00c6 01F4      		brne .L9
 233:../../tmk_core_custom/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 182               		.loc 1 233 0
 183 00c8 822F      		mov r24,r18
 184 00ca 9927      		clr r25
 185 00cc 87FD      		sbrc r24,7
 186 00ce 9095      		com r25
 187               	.LVL10:
 188 00d0 0196      		adiw r24,1
 189 00d2 BE01      		movw r22,r28
 190 00d4 0E94 0000 		call __divmodhi4
 191 00d8 8093 0000 		sts cb_head,r24
 234:../../tmk_core_custom/common/action_util.c ****                     cb_count--;
 192               		.loc 1 234 0
 193 00dc 4150      		subi r20,lo8(-(-1))
 194 00de 4093 0000 		sts cb_count,r20
 195 00e2 00C0      		rjmp .L5
 196               	.LVL11:
 197               	.L9:
 198               	.LBB12:
 239:../../tmk_core_custom/common/action_util.c ****                     i = RO_INC(empty);
 199               		.loc 1 239 0
 200 00e4 832F      		mov r24,r19
 201 00e6 9927      		clr r25
 202 00e8 87FD      		sbrc r24,7
 203 00ea 9095      		com r25
 204               	.LVL12:
 205 00ec 0196      		adiw r24,1
 206 00ee BE01      		movw r22,r28
 207 00f0 0E94 0000 		call __divmodhi4
 208               	.LVL13:
 238:../../tmk_core_custom/common/action_util.c ****                     uint8_t offset = 1;
 209               		.loc 1 238 0
 210 00f4 EE24      		clr r14
 211 00f6 E394      		inc r14
 244:../../tmk_core_custom/common/action_util.c ****                             empty = RO_INC(empty);
 212               		.loc 1 244 0
 213 00f8 C6E0      		ldi r28,lo8(6)
 214 00fa D0E0      		ldi r29,0
 215               	.LVL14:
 216               	.L13:
 241:../../tmk_core_custom/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 217               		.loc 1 241 0
 218 00fc 082F      		mov r16,r24
 219 00fe 1127      		clr r17
 220 0100 07FD      		sbrc r16,7
 221 0102 1095      		com r17
 222 0104 6F01      		movw r12,r30
 223 0106 C00E      		add r12,r16
 224 0108 D11E      		adc r13,r17
 225 010a D601      		movw r26,r12
 226 010c 1296      		adiw r26,2
 227 010e 6C91      		ld r22,X
 228 0110 6623      		tst r22
 229 0112 01F0      		breq .L10
 242:../../tmk_core_custom/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 230               		.loc 1 242 0
 231 0114 432F      		mov r20,r19
 232 0116 5527      		clr r21
 233 0118 47FD      		sbrc r20,7
 234 011a 5095      		com r21
 235 011c CF01      		movw r24,r30
 236               	.LVL15:
 237 011e 840F      		add r24,r20
 238 0120 951F      		adc r25,r21
 239 0122 DC01      		movw r26,r24
 240 0124 1296      		adiw r26,2
 241 0126 6C93      		st X,r22
 243:../../tmk_core_custom/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 242               		.loc 1 243 0
 243 0128 D601      		movw r26,r12
 244 012a 1296      		adiw r26,2
 245 012c 1C92      		st X,__zero_reg__
 244:../../tmk_core_custom/common/action_util.c ****                             empty = RO_INC(empty);
 246               		.loc 1 244 0
 247 012e CA01      		movw r24,r20
 248 0130 0196      		adiw r24,1
 249 0132 BE01      		movw r22,r28
 250 0134 0E94 0000 		call __divmodhi4
 251 0138 382F      		mov r19,r24
 252               	.LVL16:
 253 013a 00C0      		rjmp .L11
 254               	.LVL17:
 255               	.L10:
 247:../../tmk_core_custom/common/action_util.c ****                             offset++;
 256               		.loc 1 247 0
 257 013c E394      		inc r14
 258               	.LVL18:
 259               	.L11:
 249:../../tmk_core_custom/common/action_util.c ****                         i = RO_INC(i);
 260               		.loc 1 249 0
 261 013e C801      		movw r24,r16
 262 0140 0196      		adiw r24,1
 263 0142 BE01      		movw r22,r28
 264 0144 0E94 0000 		call __divmodhi4
 265               	.LVL19:
 250:../../tmk_core_custom/common/action_util.c ****                     } while (i != cb_tail);
 266               		.loc 1 250 0
 267 0148 8213      		cpse r24,r18
 268 014a 00C0      		rjmp .L13
 251:../../tmk_core_custom/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 269               		.loc 1 251 0
 270 014c 822F      		mov r24,r18
 271 014e 9927      		clr r25
 272 0150 87FD      		sbrc r24,7
 273 0152 9095      		com r25
 274               	.LVL20:
 275 0154 8E19      		sub r24,r14
 276 0156 9109      		sbc r25,__zero_reg__
 277 0158 0696      		adiw r24,6
 278 015a 66E0      		ldi r22,lo8(6)
 279 015c 70E0      		ldi r23,0
 280 015e 0E94 0000 		call __divmodhi4
 281 0162 8093 0000 		sts cb_tail,r24
 282               	.LVL21:
 283               	.L5:
 284               	.LBE12:
 257:../../tmk_core_custom/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 285               		.loc 1 257 0
 286 0166 2091 0000 		lds r18,cb_tail
 287 016a 3327      		clr r19
 288 016c 27FD      		sbrc r18,7
 289 016e 3095      		com r19
 290 0170 E20F      		add r30,r18
 291 0172 F31F      		adc r31,r19
 292 0174 F282      		std Z+2,r15
 258:../../tmk_core_custom/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 293               		.loc 1 258 0
 294 0176 C901      		movw r24,r18
 295 0178 0196      		adiw r24,1
 296 017a 66E0      		ldi r22,lo8(6)
 297 017c 70E0      		ldi r23,0
 298 017e 0E94 0000 		call __divmodhi4
 299 0182 8093 0000 		sts cb_tail,r24
 259:../../tmk_core_custom/common/action_util.c ****     cb_count++;
 300               		.loc 1 259 0
 301 0186 8091 0000 		lds r24,cb_count
 302 018a 8F5F      		subi r24,lo8(-(1))
 303 018c 8093 0000 		sts cb_count,r24
 304               	.LVL22:
 305               	.L1:
 306               	/* epilogue start */
 307               	.LBE11:
 308               	.LBE10:
  87:../../tmk_core_custom/common/action_util.c **** }
 309               		.loc 1 87 0
 310 0190 DF91      		pop r29
 311 0192 CF91      		pop r28
 312 0194 1F91      		pop r17
 313 0196 0F91      		pop r16
 314 0198 FF90      		pop r15
 315               	.LVL23:
 316 019a EF90      		pop r14
 317 019c DF90      		pop r13
 318 019e CF90      		pop r12
 319 01a0 0895      		ret
 320               		.cfi_endproc
 321               	.LFE101:
 323               		.section	.text.del_key,"ax",@progbits
 324               	.global	del_key
 326               	del_key:
 327               	.LFB102:
  90:../../tmk_core_custom/common/action_util.c **** {
 328               		.loc 1 90 0
 329               		.cfi_startproc
 330               	.LVL24:
 331 0000 DF92      		push r13
 332               	.LCFI13:
 333               		.cfi_def_cfa_offset 3
 334               		.cfi_offset 13, -2
 335 0002 EF92      		push r14
 336               	.LCFI14:
 337               		.cfi_def_cfa_offset 4
 338               		.cfi_offset 14, -3
 339 0004 FF92      		push r15
 340               	.LCFI15:
 341               		.cfi_def_cfa_offset 5
 342               		.cfi_offset 15, -4
 343 0006 0F93      		push r16
 344               	.LCFI16:
 345               		.cfi_def_cfa_offset 6
 346               		.cfi_offset 16, -5
 347 0008 1F93      		push r17
 348               	.LCFI17:
 349               		.cfi_def_cfa_offset 7
 350               		.cfi_offset 17, -6
 351 000a CF93      		push r28
 352               	.LCFI18:
 353               		.cfi_def_cfa_offset 8
 354               		.cfi_offset 28, -7
 355 000c DF93      		push r29
 356               	.LCFI19:
 357               		.cfi_def_cfa_offset 9
 358               		.cfi_offset 29, -8
 359               	/* prologue: function */
 360               	/* frame size = 0 */
 361               	/* stack size = 7 */
 362               	.L__stack_usage = 7
 363 000e 482F      		mov r20,r24
  92:../../tmk_core_custom/common/action_util.c ****     if (keyboard_nkro) {
 364               		.loc 1 92 0
 365 0010 8091 0000 		lds r24,keyboard_nkro
 366               	.LVL25:
 367 0014 8823      		tst r24
 368 0016 01F0      		breq .L23
 369               	.LVL26:
 370               	.LBB18:
 371               	.LBB19:
 328:../../tmk_core_custom/common/action_util.c ****     }
 329:../../tmk_core_custom/common/action_util.c **** }
 330:../../tmk_core_custom/common/action_util.c **** 
 331:../../tmk_core_custom/common/action_util.c **** static inline void del_key_bit(uint8_t code)
 332:../../tmk_core_custom/common/action_util.c **** {
 333:../../tmk_core_custom/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
 372               		.loc 1 333 0
 373 0018 842F      		mov r24,r20
 374 001a 8695      		lsr r24
 375 001c 8695      		lsr r24
 376 001e 8695      		lsr r24
 377 0020 8F30      		cpi r24,lo8(15)
 378 0022 00F4      		brsh .L24
 334:../../tmk_core_custom/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
 379               		.loc 1 334 0
 380 0024 E091 0000 		lds r30,keyboard_report
 381 0028 F091 0000 		lds r31,keyboard_report+1
 382 002c E80F      		add r30,r24
 383 002e F11D      		adc r31,__zero_reg__
 384 0030 4770      		andi r20,lo8(7)
 385               	.LVL27:
 386 0032 21E0      		ldi r18,lo8(1)
 387 0034 30E0      		ldi r19,0
 388 0036 042E      		mov r0,r20
 389 0038 00C0      		rjmp 2f
 390               		1:
 391 003a 220F      		lsl r18
 392               		2:
 393 003c 0A94      		dec r0
 394 003e 02F4      		brpl 1b
 395 0040 2095      		com r18
 396 0042 8181      		ldd r24,Z+1
 397 0044 2823      		and r18,r24
 398 0046 2183      		std Z+1,r18
 399 0048 00C0      		rjmp .L22
 400               	.LVL28:
 401               	.L24:
 335:../../tmk_core_custom/common/action_util.c ****     } else {
 336:../../tmk_core_custom/common/action_util.c ****         dprintf("del_key_bit: can't del: %02X\n", code);
 402               		.loc 1 336 0
 403 004a 8091 0000 		lds r24,debug_config
 404 004e 80FF      		sbrs r24,0
 405 0050 00C0      		rjmp .L22
 406 0052 1F92      		push __zero_reg__
 407               	.LCFI20:
 408               		.cfi_def_cfa_offset 10
 409 0054 4F93      		push r20
 410               	.LCFI21:
 411               		.cfi_def_cfa_offset 11
 412 0056 80E0      		ldi r24,lo8(__c.4561)
 413 0058 90E0      		ldi r25,hi8(__c.4561)
 414 005a 9F93      		push r25
 415               	.LCFI22:
 416               		.cfi_def_cfa_offset 12
 417 005c 8F93      		push r24
 418               	.LCFI23:
 419               		.cfi_def_cfa_offset 13
 420 005e 0E94 0000 		call __xprintf
 421               	.LVL29:
 422 0062 0F90      		pop __tmp_reg__
 423 0064 0F90      		pop __tmp_reg__
 424 0066 0F90      		pop __tmp_reg__
 425 0068 0F90      		pop __tmp_reg__
 426               	.LCFI24:
 427               		.cfi_def_cfa_offset 9
 428 006a 00C0      		rjmp .L22
 429               	.LVL30:
 430               	.L23:
 431               	.LBE19:
 432               	.LBE18:
 433               	.LBB20:
 434               	.LBB21:
 285:../../tmk_core_custom/common/action_util.c ****     uint8_t i = cb_head;
 435               		.loc 1 285 0
 436 006c E091 0000 		lds r30,cb_head
 437               	.LVL31:
 286:../../tmk_core_custom/common/action_util.c ****     if (cb_count) {
 438               		.loc 1 286 0
 439 0070 D090 0000 		lds r13,cb_count
 440 0074 DD20      		tst r13
 441 0076 01F4      		brne .+2
 442 0078 00C0      		rjmp .L22
 288:../../tmk_core_custom/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 443               		.loc 1 288 0
 444 007a C091 0000 		lds r28,keyboard_report
 445 007e D091 0000 		lds r29,keyboard_report+1
 307:../../tmk_core_custom/common/action_util.c ****         } while (i != cb_tail);
 446               		.loc 1 307 0
 447 0082 0091 0000 		lds r16,cb_tail
 448 0086 1127      		clr r17
 449 0088 07FD      		sbrc r16,7
 450 008a 1095      		com r17
 306:../../tmk_core_custom/common/action_util.c ****             i = RO_INC(i);
 451               		.loc 1 306 0
 452 008c 86E0      		ldi r24,lo8(6)
 453 008e E82E      		mov r14,r24
 454 0090 F12C      		mov r15,__zero_reg__
 455               	.LVL32:
 456               	.L33:
 288:../../tmk_core_custom/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 457               		.loc 1 288 0
 458 0092 F0E0      		ldi r31,0
 459 0094 DE01      		movw r26,r28
 460 0096 AE0F      		add r26,r30
 461 0098 BF1F      		adc r27,r31
 462 009a 9D01      		movw r18,r26
 463 009c 2E5F      		subi r18,-2
 464 009e 3F4F      		sbci r19,-1
 465 00a0 1296      		adiw r26,2
 466 00a2 8C91      		ld r24,X
 467 00a4 8413      		cpse r24,r20
 468 00a6 00C0      		rjmp .L28
 289:../../tmk_core_custom/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 469               		.loc 1 289 0
 470 00a8 D901      		movw r26,r18
 471 00aa 1C92      		st X,__zero_reg__
 290:../../tmk_core_custom/common/action_util.c ****                 cb_count--;
 472               		.loc 1 290 0
 473 00ac DA94      		dec r13
 474 00ae D092 0000 		sts cb_count,r13
 291:../../tmk_core_custom/common/action_util.c ****                 if (cb_count == 0) {
 475               		.loc 1 291 0
 476 00b2 D110      		cpse r13,__zero_reg__
 477 00b4 00C0      		rjmp .L29
 293:../../tmk_core_custom/common/action_util.c ****                     cb_tail = cb_head = 0;
 478               		.loc 1 293 0
 479 00b6 1092 0000 		sts cb_head,__zero_reg__
 480 00ba 1092 0000 		sts cb_tail,__zero_reg__
 481               	.L29:
 295:../../tmk_core_custom/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 482               		.loc 1 295 0
 483 00be 2091 0000 		lds r18,cb_tail
 484 00c2 822F      		mov r24,r18
 485 00c4 9927      		clr r25
 486 00c6 87FD      		sbrc r24,7
 487 00c8 9095      		com r25
 488 00ca 0596      		adiw r24,5
 489 00cc 66E0      		ldi r22,lo8(6)
 490 00ce 70E0      		ldi r23,0
 491 00d0 0E94 0000 		call __divmodhi4
 492 00d4 E817      		cp r30,r24
 493 00d6 F907      		cpc r31,r25
 494 00d8 01F4      		brne .L22
 302:../../tmk_core_custom/common/action_util.c ****                     } while (cb_tail != cb_head);
 495               		.loc 1 302 0
 496 00da 4091 0000 		lds r20,cb_head
 497               	.LVL33:
 298:../../tmk_core_custom/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 498               		.loc 1 298 0
 499 00de E6E0      		ldi r30,lo8(6)
 500 00e0 F0E0      		ldi r31,0
 501               	.LVL34:
 502               	.L32:
 503 00e2 822F      		mov r24,r18
 504 00e4 9927      		clr r25
 505 00e6 87FD      		sbrc r24,7
 506 00e8 9095      		com r25
 507 00ea 0596      		adiw r24,5
 508 00ec BF01      		movw r22,r30
 509 00ee 0E94 0000 		call __divmodhi4
 510 00f2 9C01      		movw r18,r24
 299:../../tmk_core_custom/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 511               		.loc 1 299 0
 512 00f4 0596      		adiw r24,5
 513 00f6 BF01      		movw r22,r30
 514 00f8 0E94 0000 		call __divmodhi4
 515 00fc 8C0F      		add r24,r28
 516 00fe 9D1F      		adc r25,r29
 517 0100 DC01      		movw r26,r24
 518 0102 1296      		adiw r26,2
 519 0104 8C91      		ld r24,X
 520 0106 8111      		cpse r24,__zero_reg__
 521 0108 00C0      		rjmp .L37
 302:../../tmk_core_custom/common/action_util.c ****                     } while (cb_tail != cb_head);
 522               		.loc 1 302 0
 523 010a 2413      		cpse r18,r20
 524 010c 00C0      		rjmp .L32
 525               	.L37:
 526 010e 2093 0000 		sts cb_tail,r18
 527 0112 00C0      		rjmp .L22
 528               	.LVL35:
 529               	.L28:
 306:../../tmk_core_custom/common/action_util.c ****             i = RO_INC(i);
 530               		.loc 1 306 0
 531 0114 CF01      		movw r24,r30
 532 0116 0196      		adiw r24,1
 533 0118 B701      		movw r22,r14
 534 011a 0E94 0000 		call __divmodhi4
 535 011e E82F      		mov r30,r24
 536               	.LVL36:
 307:../../tmk_core_custom/common/action_util.c ****         } while (i != cb_tail);
 537               		.loc 1 307 0
 538 0120 8017      		cp r24,r16
 539 0122 9107      		cpc r25,r17
 540 0124 01F0      		breq .+2
 541 0126 00C0      		rjmp .L33
 542               	.LVL37:
 543               	.L22:
 544               	/* epilogue start */
 545               	.LBE21:
 546               	.LBE20:
  98:../../tmk_core_custom/common/action_util.c **** }
 547               		.loc 1 98 0
 548 0128 DF91      		pop r29
 549 012a CF91      		pop r28
 550 012c 1F91      		pop r17
 551 012e 0F91      		pop r16
 552 0130 FF90      		pop r15
 553 0132 EF90      		pop r14
 554 0134 DF90      		pop r13
 555 0136 0895      		ret
 556               		.cfi_endproc
 557               	.LFE102:
 559               		.section	.text.clear_keys,"ax",@progbits
 560               	.global	clear_keys
 562               	clear_keys:
 563               	.LFB103:
 101:../../tmk_core_custom/common/action_util.c **** {
 564               		.loc 1 101 0
 565               		.cfi_startproc
 566               	/* prologue: function */
 567               	/* frame size = 0 */
 568               	/* stack size = 0 */
 569               	.L__stack_usage = 0
 570               	.LVL38:
 101:../../tmk_core_custom/common/action_util.c **** {
 571               		.loc 1 101 0
 572 0000 81E0      		ldi r24,lo8(1)
 573 0002 90E0      		ldi r25,0
 574               	.LVL39:
 575               	.L40:
 576               	.LBB22:
 104:../../tmk_core_custom/common/action_util.c ****         keyboard_report->raw[i] = 0;
 577               		.loc 1 104 0 discriminator 2
 578 0004 E091 0000 		lds r30,keyboard_report
 579 0008 F091 0000 		lds r31,keyboard_report+1
 580 000c E80F      		add r30,r24
 581 000e F91F      		adc r31,r25
 582 0010 1082      		st Z,__zero_reg__
 583               	.LVL40:
 584 0012 0196      		adiw r24,1
 585               	.LVL41:
 103:../../tmk_core_custom/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 586               		.loc 1 103 0 discriminator 2
 587 0014 8031      		cpi r24,16
 588 0016 9105      		cpc r25,__zero_reg__
 589 0018 01F4      		brne .L40
 590               	/* epilogue start */
 591               	.LBE22:
 106:../../tmk_core_custom/common/action_util.c **** }
 592               		.loc 1 106 0
 593 001a 0895      		ret
 594               		.cfi_endproc
 595               	.LFE103:
 597               		.section	.text.get_mods,"ax",@progbits
 598               	.global	get_mods
 600               	get_mods:
 601               	.LFB104:
 110:../../tmk_core_custom/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 602               		.loc 1 110 0
 603               		.cfi_startproc
 604               	/* prologue: function */
 605               	/* frame size = 0 */
 606               	/* stack size = 0 */
 607               	.L__stack_usage = 0
 110:../../tmk_core_custom/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 608               		.loc 1 110 0
 609 0000 8091 0000 		lds r24,real_mods
 610 0004 0895      		ret
 611               		.cfi_endproc
 612               	.LFE104:
 614               		.section	.text.add_mods,"ax",@progbits
 615               	.global	add_mods
 617               	add_mods:
 618               	.LFB105:
 111:../../tmk_core_custom/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 619               		.loc 1 111 0
 620               		.cfi_startproc
 621               	.LVL42:
 622               	/* prologue: function */
 623               	/* frame size = 0 */
 624               	/* stack size = 0 */
 625               	.L__stack_usage = 0
 111:../../tmk_core_custom/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 626               		.loc 1 111 0
 627 0000 9091 0000 		lds r25,real_mods
 628 0004 982B      		or r25,r24
 629 0006 9093 0000 		sts real_mods,r25
 630 000a 0895      		ret
 631               		.cfi_endproc
 632               	.LFE105:
 634               		.section	.text.del_mods,"ax",@progbits
 635               	.global	del_mods
 637               	del_mods:
 638               	.LFB106:
 112:../../tmk_core_custom/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 639               		.loc 1 112 0
 640               		.cfi_startproc
 641               	.LVL43:
 642               	/* prologue: function */
 643               	/* frame size = 0 */
 644               	/* stack size = 0 */
 645               	.L__stack_usage = 0
 112:../../tmk_core_custom/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 646               		.loc 1 112 0
 647 0000 8095      		com r24
 648               	.LVL44:
 649 0002 9091 0000 		lds r25,real_mods
 650 0006 9823      		and r25,r24
 651 0008 9093 0000 		sts real_mods,r25
 652 000c 0895      		ret
 653               		.cfi_endproc
 654               	.LFE106:
 656               		.section	.text.set_mods,"ax",@progbits
 657               	.global	set_mods
 659               	set_mods:
 660               	.LFB107:
 113:../../tmk_core_custom/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 661               		.loc 1 113 0
 662               		.cfi_startproc
 663               	.LVL45:
 664               	/* prologue: function */
 665               	/* frame size = 0 */
 666               	/* stack size = 0 */
 667               	.L__stack_usage = 0
 113:../../tmk_core_custom/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 668               		.loc 1 113 0
 669 0000 8093 0000 		sts real_mods,r24
 670 0004 0895      		ret
 671               		.cfi_endproc
 672               	.LFE107:
 674               		.section	.text.clear_mods,"ax",@progbits
 675               	.global	clear_mods
 677               	clear_mods:
 678               	.LFB108:
 114:../../tmk_core_custom/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 679               		.loc 1 114 0
 680               		.cfi_startproc
 681               	/* prologue: function */
 682               	/* frame size = 0 */
 683               	/* stack size = 0 */
 684               	.L__stack_usage = 0
 114:../../tmk_core_custom/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 685               		.loc 1 114 0
 686 0000 1092 0000 		sts real_mods,__zero_reg__
 687 0004 0895      		ret
 688               		.cfi_endproc
 689               	.LFE108:
 691               		.section	.text.get_weak_mods,"ax",@progbits
 692               	.global	get_weak_mods
 694               	get_weak_mods:
 695               	.LFB109:
 117:../../tmk_core_custom/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 696               		.loc 1 117 0
 697               		.cfi_startproc
 698               	/* prologue: function */
 699               	/* frame size = 0 */
 700               	/* stack size = 0 */
 701               	.L__stack_usage = 0
 117:../../tmk_core_custom/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 702               		.loc 1 117 0
 703 0000 8091 0000 		lds r24,weak_mods
 704 0004 0895      		ret
 705               		.cfi_endproc
 706               	.LFE109:
 708               		.section	.text.add_weak_mods,"ax",@progbits
 709               	.global	add_weak_mods
 711               	add_weak_mods:
 712               	.LFB110:
 118:../../tmk_core_custom/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 713               		.loc 1 118 0
 714               		.cfi_startproc
 715               	.LVL46:
 716               	/* prologue: function */
 717               	/* frame size = 0 */
 718               	/* stack size = 0 */
 719               	.L__stack_usage = 0
 118:../../tmk_core_custom/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 720               		.loc 1 118 0
 721 0000 9091 0000 		lds r25,weak_mods
 722 0004 982B      		or r25,r24
 723 0006 9093 0000 		sts weak_mods,r25
 724 000a 0895      		ret
 725               		.cfi_endproc
 726               	.LFE110:
 728               		.section	.text.del_weak_mods,"ax",@progbits
 729               	.global	del_weak_mods
 731               	del_weak_mods:
 732               	.LFB111:
 119:../../tmk_core_custom/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 733               		.loc 1 119 0
 734               		.cfi_startproc
 735               	.LVL47:
 736               	/* prologue: function */
 737               	/* frame size = 0 */
 738               	/* stack size = 0 */
 739               	.L__stack_usage = 0
 119:../../tmk_core_custom/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 740               		.loc 1 119 0
 741 0000 8095      		com r24
 742               	.LVL48:
 743 0002 9091 0000 		lds r25,weak_mods
 744 0006 9823      		and r25,r24
 745 0008 9093 0000 		sts weak_mods,r25
 746 000c 0895      		ret
 747               		.cfi_endproc
 748               	.LFE111:
 750               		.section	.text.set_weak_mods,"ax",@progbits
 751               	.global	set_weak_mods
 753               	set_weak_mods:
 754               	.LFB112:
 120:../../tmk_core_custom/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 755               		.loc 1 120 0
 756               		.cfi_startproc
 757               	.LVL49:
 758               	/* prologue: function */
 759               	/* frame size = 0 */
 760               	/* stack size = 0 */
 761               	.L__stack_usage = 0
 120:../../tmk_core_custom/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 762               		.loc 1 120 0
 763 0000 8093 0000 		sts weak_mods,r24
 764 0004 0895      		ret
 765               		.cfi_endproc
 766               	.LFE112:
 768               		.section	.text.clear_weak_mods,"ax",@progbits
 769               	.global	clear_weak_mods
 771               	clear_weak_mods:
 772               	.LFB113:
 121:../../tmk_core_custom/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 773               		.loc 1 121 0
 774               		.cfi_startproc
 775               	/* prologue: function */
 776               	/* frame size = 0 */
 777               	/* stack size = 0 */
 778               	.L__stack_usage = 0
 121:../../tmk_core_custom/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 779               		.loc 1 121 0
 780 0000 1092 0000 		sts weak_mods,__zero_reg__
 781 0004 0895      		ret
 782               		.cfi_endproc
 783               	.LFE113:
 785               		.section	.text.set_oneshot_mods,"ax",@progbits
 786               	.global	set_oneshot_mods
 788               	set_oneshot_mods:
 789               	.LFB114:
 126:../../tmk_core_custom/common/action_util.c **** {
 790               		.loc 1 126 0
 791               		.cfi_startproc
 792               	.LVL50:
 793               	/* prologue: function */
 794               	/* frame size = 0 */
 795               	/* stack size = 0 */
 796               	.L__stack_usage = 0
 127:../../tmk_core_custom/common/action_util.c ****     oneshot_mods = mods;
 797               		.loc 1 127 0
 798 0000 8093 0000 		sts oneshot_mods,r24
 799 0004 0895      		ret
 800               		.cfi_endproc
 801               	.LFE114:
 803               		.section	.text.clear_oneshot_mods,"ax",@progbits
 804               	.global	clear_oneshot_mods
 806               	clear_oneshot_mods:
 807               	.LFB115:
 133:../../tmk_core_custom/common/action_util.c **** {
 808               		.loc 1 133 0
 809               		.cfi_startproc
 810               	/* prologue: function */
 811               	/* frame size = 0 */
 812               	/* stack size = 0 */
 813               	.L__stack_usage = 0
 134:../../tmk_core_custom/common/action_util.c ****     oneshot_mods = 0;
 814               		.loc 1 134 0
 815 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 816 0004 0895      		ret
 817               		.cfi_endproc
 818               	.LFE115:
 820               		.section	.text.has_anykey,"ax",@progbits
 821               	.global	has_anykey
 823               	has_anykey:
 824               	.LFB116:
 148:../../tmk_core_custom/common/action_util.c **** {
 825               		.loc 1 148 0
 826               		.cfi_startproc
 827               	/* prologue: function */
 828               	/* frame size = 0 */
 829               	/* stack size = 0 */
 830               	.L__stack_usage = 0
 151:../../tmk_core_custom/common/action_util.c ****     if (!keyboard_nkro) {
 831               		.loc 1 151 0
 832 0000 8091 0000 		lds r24,keyboard_nkro
 833 0004 8111      		cpse r24,__zero_reg__
 834 0006 00C0      		rjmp .L55
 153:../../tmk_core_custom/common/action_util.c ****         return cb_count;
 835               		.loc 1 153 0
 836 0008 8091 0000 		lds r24,cb_count
 837 000c 0895      		ret
 838               	.L55:
 165:../../tmk_core_custom/common/action_util.c **** }
 839               		.loc 1 165 0
 840 000e 0895      		ret
 841               		.cfi_endproc
 842               	.LFE116:
 844               		.section	.text.send_keyboard_report,"ax",@progbits
 845               	.global	send_keyboard_report
 847               	send_keyboard_report:
 848               	.LFB100:
  57:../../tmk_core_custom/common/action_util.c **** void send_keyboard_report(void) {
 849               		.loc 1 57 0
 850               		.cfi_startproc
 851               	/* prologue: function */
 852               	/* frame size = 0 */
 853               	/* stack size = 0 */
 854               	.L__stack_usage = 0
  58:../../tmk_core_custom/common/action_util.c ****     keyboard_report->mods  = real_mods;
 855               		.loc 1 58 0
 856 0000 E091 0000 		lds r30,keyboard_report
 857 0004 F091 0000 		lds r31,keyboard_report+1
 858 0008 8091 0000 		lds r24,real_mods
 859 000c 8083      		st Z,r24
  59:../../tmk_core_custom/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 860               		.loc 1 59 0
 861 000e E091 0000 		lds r30,keyboard_report
 862 0012 F091 0000 		lds r31,keyboard_report+1
 863 0016 8081      		ld r24,Z
 864 0018 9091 0000 		lds r25,weak_mods
 865 001c 892B      		or r24,r25
 866 001e 8083      		st Z,r24
  61:../../tmk_core_custom/common/action_util.c ****     if (oneshot_mods) {
 867               		.loc 1 61 0
 868 0020 9091 0000 		lds r25,oneshot_mods
 869 0024 9923      		tst r25
 870 0026 01F0      		breq .L58
  68:../../tmk_core_custom/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
 871               		.loc 1 68 0
 872 0028 E091 0000 		lds r30,keyboard_report
 873 002c F091 0000 		lds r31,keyboard_report+1
 874 0030 8081      		ld r24,Z
 875 0032 892B      		or r24,r25
 876 0034 8083      		st Z,r24
  69:../../tmk_core_custom/common/action_util.c ****         if (has_anykey()) {
 877               		.loc 1 69 0
 878 0036 0E94 0000 		call has_anykey
 879               	.LVL51:
 880 003a 8111      		cpse r24,__zero_reg__
 881               	.LBB25:
 882               	.LBB26:
 134:../../tmk_core_custom/common/action_util.c ****     oneshot_mods = 0;
 883               		.loc 1 134 0
 884 003c 1092 0000 		sts oneshot_mods,__zero_reg__
 885               	.L58:
 886               	.LBE26:
 887               	.LBE25:
  74:../../tmk_core_custom/common/action_util.c ****     host_keyboard_send(keyboard_report);
 888               		.loc 1 74 0
 889 0040 8091 0000 		lds r24,keyboard_report
 890 0044 9091 0000 		lds r25,keyboard_report+1
 891 0048 0C94 0000 		jmp host_keyboard_send
 892               	.LVL52:
 893               		.cfi_endproc
 894               	.LFE100:
 896               		.section	.text.has_anymod,"ax",@progbits
 897               	.global	has_anymod
 899               	has_anymod:
 900               	.LFB117:
 168:../../tmk_core_custom/common/action_util.c **** {
 901               		.loc 1 168 0
 902               		.cfi_startproc
 903               	/* prologue: function */
 904               	/* frame size = 0 */
 905               	/* stack size = 0 */
 906               	.L__stack_usage = 0
 169:../../tmk_core_custom/common/action_util.c ****     return bitpop(real_mods);
 907               		.loc 1 169 0
 908 0000 8091 0000 		lds r24,real_mods
 909 0004 0C94 0000 		jmp bitpop
 910               	.LVL53:
 911               		.cfi_endproc
 912               	.LFE117:
 914               		.section	.text.get_first_key,"ax",@progbits
 915               	.global	get_first_key
 917               	get_first_key:
 918               	.LFB118:
 173:../../tmk_core_custom/common/action_util.c **** {
 919               		.loc 1 173 0
 920               		.cfi_startproc
 921 0000 CF93      		push r28
 922               	.LCFI25:
 923               		.cfi_def_cfa_offset 3
 924               		.cfi_offset 28, -2
 925 0002 DF93      		push r29
 926               	.LCFI26:
 927               		.cfi_def_cfa_offset 4
 928               		.cfi_offset 29, -3
 929               	/* prologue: function */
 930               	/* frame size = 0 */
 931               	/* stack size = 2 */
 932               	.L__stack_usage = 2
 175:../../tmk_core_custom/common/action_util.c ****     if (keyboard_nkro) {
 933               		.loc 1 175 0
 934 0004 8091 0000 		lds r24,keyboard_nkro
 935 0008 E091 0000 		lds r30,keyboard_report
 936 000c F091 0000 		lds r31,keyboard_report+1
 937 0010 8823      		tst r24
 938 0012 01F0      		breq .L65
 939               	.LBB27:
 177:../../tmk_core_custom/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 940               		.loc 1 177 0
 941 0014 20E0      		ldi r18,0
 942 0016 30E0      		ldi r19,0
 943               	.L66:
 944 0018 C22F      		mov r28,r18
 945               	.LVL54:
 946 001a DF01      		movw r26,r30
 947 001c A20F      		add r26,r18
 948 001e B31F      		adc r27,r19
 177:../../tmk_core_custom/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 949               		.loc 1 177 0 is_stmt 0 discriminator 2
 950 0020 1196      		adiw r26,1
 951 0022 8C91      		ld r24,X
 952 0024 8111      		cpse r24,__zero_reg__
 953 0026 00C0      		rjmp .L67
 954               	.LVL55:
 955 0028 2F5F      		subi r18,-1
 956 002a 3F4F      		sbci r19,-1
 957               	.LVL56:
 177:../../tmk_core_custom/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 958               		.loc 1 177 0 discriminator 1
 959 002c 2F30      		cpi r18,15
 960 002e 3105      		cpc r19,__zero_reg__
 961 0030 01F4      		brne .L66
 962 0032 CFE0      		ldi r28,lo8(15)
 963               	.LVL57:
 964               	.L67:
 179:../../tmk_core_custom/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 965               		.loc 1 179 0 is_stmt 1
 966 0034 D0E0      		ldi r29,0
 967 0036 EC0F      		add r30,r28
 968 0038 FD1F      		adc r31,r29
 969 003a 8181      		ldd r24,Z+1
 970 003c 0E94 0000 		call biton
 971               	.LVL58:
 972 0040 93E0      		ldi r25,3
 973               		1:
 974 0042 CC0F      		lsl r28
 975 0044 DD1F      		rol r29
 976 0046 9A95      		dec r25
 977 0048 01F4      		brne 1b
 978 004a 8C2B      		or r24,r28
 979 004c 00C0      		rjmp .L69
 980               	.L65:
 981               	.LBE27:
 183:../../tmk_core_custom/common/action_util.c ****     uint8_t i = cb_head;
 982               		.loc 1 183 0
 983 004e 4091 0000 		lds r20,cb_head
 984               	.LVL59:
 189:../../tmk_core_custom/common/action_util.c ****     } while (i != cb_tail);
 985               		.loc 1 189 0
 986 0052 2091 0000 		lds r18,cb_tail
 987 0056 3327      		clr r19
 988 0058 27FD      		sbrc r18,7
 989 005a 3095      		com r19
 188:../../tmk_core_custom/common/action_util.c ****         i = RO_INC(i);
 990               		.loc 1 188 0
 991 005c C6E0      		ldi r28,lo8(6)
 992 005e D0E0      		ldi r29,0
 993               	.LVL60:
 994               	.L71:
 185:../../tmk_core_custom/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 995               		.loc 1 185 0
 996 0060 842F      		mov r24,r20
 997 0062 90E0      		ldi r25,0
 998 0064 DF01      		movw r26,r30
 999 0066 A80F      		add r26,r24
 1000 0068 B91F      		adc r27,r25
 1001 006a 1296      		adiw r26,2
 1002 006c 5C91      		ld r21,X
 1003 006e 5111      		cpse r21,__zero_reg__
 1004 0070 00C0      		rjmp .L70
 188:../../tmk_core_custom/common/action_util.c ****         i = RO_INC(i);
 1005               		.loc 1 188 0
 1006 0072 0196      		adiw r24,1
 1007 0074 BE01      		movw r22,r28
 1008 0076 0E94 0000 		call __divmodhi4
 1009 007a 482F      		mov r20,r24
 1010               	.LVL61:
 189:../../tmk_core_custom/common/action_util.c ****     } while (i != cb_tail);
 1011               		.loc 1 189 0
 1012 007c 8217      		cp r24,r18
 1013 007e 9307      		cpc r25,r19
 1014 0080 01F4      		brne .L71
 1015               	.LVL62:
 1016               	.L70:
 190:../../tmk_core_custom/common/action_util.c ****     return keyboard_report->keys[i];
 1017               		.loc 1 190 0
 1018 0082 E40F      		add r30,r20
 1019 0084 F11D      		adc r31,__zero_reg__
 1020 0086 8281      		ldd r24,Z+2
 1021               	.LVL63:
 1022               	.L69:
 1023               	/* epilogue start */
 194:../../tmk_core_custom/common/action_util.c **** }
 1024               		.loc 1 194 0
 1025 0088 DF91      		pop r29
 1026 008a CF91      		pop r28
 1027 008c 0895      		ret
 1028               		.cfi_endproc
 1029               	.LFE118:
 1031               		.section	.progmem.data.__c.4561,"a",@progbits
 1034               	__c.4561:
 1035 0000 6465 6C5F 		.string	"del_key_bit: can't del: %02X\n"
 1035      6B65 795F 
 1035      6269 743A 
 1035      2063 616E 
 1035      2774 2064 
 1036               		.section	.progmem.data.__c.4556,"a",@progbits
 1039               	__c.4556:
 1040 0000 6164 645F 		.string	"add_key_bit: can't add: %02X\n"
 1040      6B65 795F 
 1040      6269 743A 
 1040      2063 616E 
 1040      2774 2061 
 1041               		.section	.bss.oneshot_mods,"aw",@nobits
 1044               	oneshot_mods:
 1045 0000 00        		.zero	1
 1046               	.global	keyboard_report
 1047               		.section	.data.keyboard_report,"aw",@progbits
 1050               	keyboard_report:
 1051 0000 0000      		.word	__compound_literal.0
 1052               		.section	.bss.__compound_literal.0,"aw",@nobits
 1055               	__compound_literal.0:
 1056 0000 0000 0000 		.zero	16
 1056      0000 0000 
 1056      0000 0000 
 1056      0000 0000 
 1057               		.section	.bss.cb_count,"aw",@nobits
 1060               	cb_count:
 1061 0000 00        		.zero	1
 1062               		.section	.bss.cb_tail,"aw",@nobits
 1065               	cb_tail:
 1066 0000 00        		.zero	1
 1067               		.section	.bss.cb_head,"aw",@nobits
 1070               	cb_head:
 1071 0000 00        		.zero	1
 1072               		.section	.bss.weak_mods,"aw",@nobits
 1075               	weak_mods:
 1076 0000 00        		.zero	1
 1077               		.section	.bss.real_mods,"aw",@nobits
 1080               	real_mods:
 1081 0000 00        		.zero	1
 1082               		.text
 1083               	.Letext0:
 1084               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 1085               		.file 3 "../../tmk_core_custom/common/report.h"
 1086               		.file 4 "../../tmk_core_custom/common/debug.h"
 1087               		.file 5 "../../tmk_core_custom/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1088               		.file 6 "../../tmk_core_custom/common/host.h"
 1089               		.file 7 "../../tmk_core_custom/common/avr/xprintf.h"
 1090               		.file 8 "../../tmk_core_custom/common/util.h"
DEFINED SYMBOLS
                            *ABS*:00000000 action_util.c
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:2      *ABS*:0000003e __SP_H__
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:3      *ABS*:0000003d __SP_L__
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:4      *ABS*:0000003f __SREG__
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:6      *ABS*:00000001 __zero_reg__
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:13     .text.add_key:00000000 add_key
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:1050   .data.keyboard_report:00000000 keyboard_report
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:1039   .progmem.data.__c.4556:00000000 __c.4556
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:1070   .bss.cb_head:00000000 cb_head
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:1060   .bss.cb_count:00000000 cb_count
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:1065   .bss.cb_tail:00000000 cb_tail
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:326    .text.del_key:00000000 del_key
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:1034   .progmem.data.__c.4561:00000000 __c.4561
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:562    .text.clear_keys:00000000 clear_keys
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:600    .text.get_mods:00000000 get_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:1080   .bss.real_mods:00000000 real_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:617    .text.add_mods:00000000 add_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:637    .text.del_mods:00000000 del_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:659    .text.set_mods:00000000 set_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:677    .text.clear_mods:00000000 clear_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:694    .text.get_weak_mods:00000000 get_weak_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:1075   .bss.weak_mods:00000000 weak_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:711    .text.add_weak_mods:00000000 add_weak_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:731    .text.del_weak_mods:00000000 del_weak_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:753    .text.set_weak_mods:00000000 set_weak_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:771    .text.clear_weak_mods:00000000 clear_weak_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:788    .text.set_oneshot_mods:00000000 set_oneshot_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:1044   .bss.oneshot_mods:00000000 oneshot_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:806    .text.clear_oneshot_mods:00000000 clear_oneshot_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:823    .text.has_anykey:00000000 has_anykey
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:847    .text.send_keyboard_report:00000000 send_keyboard_report
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:899    .text.has_anymod:00000000 has_anymod
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:917    .text.get_first_key:00000000 get_first_key
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccoO9VxA.s:1055   .bss.__compound_literal.0:00000000 __compound_literal.0

UNDEFINED SYMBOLS
keyboard_nkro
debug_config
__xprintf
__divmodhi4
host_keyboard_send
bitpop
biton
__do_copy_data
__do_clear_bss
