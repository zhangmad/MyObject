   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_power_up,"ax",@progbits
  11               		.weak	matrix_power_up
  13               	matrix_power_up:
  14               	.LFB103:
  15               		.file 1 "../../tmk_core_custom/common/keyboard.h"
   1:../../tmk_core_custom/common/keyboard.h **** /*
   2:../../tmk_core_custom/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core_custom/common/keyboard.h **** 
   4:../../tmk_core_custom/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core_custom/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core_custom/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core_custom/common/keyboard.h **** (at your option) any later version.
   8:../../tmk_core_custom/common/keyboard.h **** 
   9:../../tmk_core_custom/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core_custom/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core_custom/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core_custom/common/keyboard.h **** GNU General Public License for more details.
  13:../../tmk_core_custom/common/keyboard.h **** 
  14:../../tmk_core_custom/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../tmk_core_custom/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core_custom/common/keyboard.h **** */
  17:../../tmk_core_custom/common/keyboard.h **** 
  18:../../tmk_core_custom/common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../tmk_core_custom/common/keyboard.h **** #define KEYBOARD_H
  20:../../tmk_core_custom/common/keyboard.h **** 
  21:../../tmk_core_custom/common/keyboard.h **** #include <stdbool.h>
  22:../../tmk_core_custom/common/keyboard.h **** #include <stdint.h>
  23:../../tmk_core_custom/common/keyboard.h **** 
  24:../../tmk_core_custom/common/keyboard.h **** 
  25:../../tmk_core_custom/common/keyboard.h **** #ifdef __cplusplus
  26:../../tmk_core_custom/common/keyboard.h **** extern "C" {
  27:../../tmk_core_custom/common/keyboard.h **** #endif
  28:../../tmk_core_custom/common/keyboard.h **** 
  29:../../tmk_core_custom/common/keyboard.h **** /* key matrix position */
  30:../../tmk_core_custom/common/keyboard.h **** typedef struct {
  31:../../tmk_core_custom/common/keyboard.h ****     uint8_t col;
  32:../../tmk_core_custom/common/keyboard.h ****     uint8_t row;
  33:../../tmk_core_custom/common/keyboard.h **** } keypos_t;
  34:../../tmk_core_custom/common/keyboard.h **** 
  35:../../tmk_core_custom/common/keyboard.h **** /* key event */
  36:../../tmk_core_custom/common/keyboard.h **** typedef struct {
  37:../../tmk_core_custom/common/keyboard.h ****     keypos_t key;
  38:../../tmk_core_custom/common/keyboard.h ****     bool     pressed;
  39:../../tmk_core_custom/common/keyboard.h ****     uint16_t time;
  40:../../tmk_core_custom/common/keyboard.h **** } keyevent_t;
  41:../../tmk_core_custom/common/keyboard.h **** 
  42:../../tmk_core_custom/common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../tmk_core_custom/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../tmk_core_custom/common/keyboard.h **** 
  45:../../tmk_core_custom/common/keyboard.h **** /* Rules for No Event:
  46:../../tmk_core_custom/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../tmk_core_custom/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../tmk_core_custom/common/keyboard.h ****  */
  49:../../tmk_core_custom/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  50:../../tmk_core_custom/common/keyboard.h **** static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
  51:../../tmk_core_custom/common/keyboard.h **** static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
  52:../../tmk_core_custom/common/keyboard.h **** 
  53:../../tmk_core_custom/common/keyboard.h **** /* Tick event */
  54:../../tmk_core_custom/common/keyboard.h **** #define TICK                    (keyevent_t){           \
  55:../../tmk_core_custom/common/keyboard.h ****     .key = (keypos_t){ .row = 255, .col = 255 },           \
  56:../../tmk_core_custom/common/keyboard.h ****     .pressed = false,                                   \
  57:../../tmk_core_custom/common/keyboard.h ****     .time = (timer_read() | 1)                          \
  58:../../tmk_core_custom/common/keyboard.h **** }
  59:../../tmk_core_custom/common/keyboard.h **** 
  60:../../tmk_core_custom/common/keyboard.h **** 
  61:../../tmk_core_custom/common/keyboard.h **** void keyboard_init(void);
  62:../../tmk_core_custom/common/keyboard.h **** void keyboard_task(void);
  63:../../tmk_core_custom/common/keyboard.h **** void keyboard_set_leds(uint8_t leds);
  64:../../tmk_core_custom/common/keyboard.h **** 
  65:../../tmk_core_custom/common/keyboard.h **** __attribute__ ((weak)) void matrix_power_up(void) {}
  16               		.loc 1 65 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE103:
  26               		.section	.text.matrix_power_down,"ax",@progbits
  27               		.weak	matrix_power_down
  29               	matrix_power_down:
  30               	.LFB104:
  66:../../tmk_core_custom/common/keyboard.h **** __attribute__ ((weak)) void matrix_power_down(void) {}
  31               		.loc 1 66 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
  37 0000 0895      		ret
  38               		.cfi_endproc
  39               	.LFE104:
  41               		.section	.text.register_code,"ax",@progbits
  42               	.global	register_code
  44               	register_code:
  45               	.LFB107:
  46               		.file 2 "../../tmk_core_custom/common/action.c"
   1:../../tmk_core_custom/common/action.c **** /*
   2:../../tmk_core_custom/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core_custom/common/action.c **** 
   4:../../tmk_core_custom/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core_custom/common/action.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core_custom/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core_custom/common/action.c **** (at your option) any later version.
   8:../../tmk_core_custom/common/action.c **** 
   9:../../tmk_core_custom/common/action.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core_custom/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core_custom/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core_custom/common/action.c **** GNU General Public License for more details.
  13:../../tmk_core_custom/common/action.c **** 
  14:../../tmk_core_custom/common/action.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core_custom/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core_custom/common/action.c **** */
  17:../../tmk_core_custom/common/action.c **** #include "host.h"
  18:../../tmk_core_custom/common/action.c **** #include "keycode.h"
  19:../../tmk_core_custom/common/action.c **** #include "keyboard.h"
  20:../../tmk_core_custom/common/action.c **** #include "mousekey.h"
  21:../../tmk_core_custom/common/action.c **** #include "command.h"
  22:../../tmk_core_custom/common/action.c **** #include "led.h"
  23:../../tmk_core_custom/common/action.c **** #include "backlight.h"
  24:../../tmk_core_custom/common/action.c **** #include "action_layer.h"
  25:../../tmk_core_custom/common/action.c **** #include "action_tapping.h"
  26:../../tmk_core_custom/common/action.c **** #include "action_macro.h"
  27:../../tmk_core_custom/common/action.c **** #include "action_util.h"
  28:../../tmk_core_custom/common/action.c **** #include "action.h"
  29:../../tmk_core_custom/common/action.c **** 
  30:../../tmk_core_custom/common/action.c **** #ifdef DEBUG_ACTION
  31:../../tmk_core_custom/common/action.c **** #include "debug.h"
  32:../../tmk_core_custom/common/action.c **** #else
  33:../../tmk_core_custom/common/action.c **** #include "nodebug.h"
  34:../../tmk_core_custom/common/action.c **** #endif
  35:../../tmk_core_custom/common/action.c **** 
  36:../../tmk_core_custom/common/action.c **** 
  37:../../tmk_core_custom/common/action.c **** void action_exec(keyevent_t event)
  38:../../tmk_core_custom/common/action.c **** {
  39:../../tmk_core_custom/common/action.c ****     if (!IS_NOEVENT(event)) {
  40:../../tmk_core_custom/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:../../tmk_core_custom/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  42:../../tmk_core_custom/common/action.c ****     }
  43:../../tmk_core_custom/common/action.c **** 
  44:../../tmk_core_custom/common/action.c ****     keyrecord_t record = { .event = event };
  45:../../tmk_core_custom/common/action.c **** 
  46:../../tmk_core_custom/common/action.c ****     action_keyevent(event);
  47:../../tmk_core_custom/common/action.c **** 
  48:../../tmk_core_custom/common/action.c **** #ifndef NO_ACTION_TAPPING
  49:../../tmk_core_custom/common/action.c ****     action_tapping_process(record);
  50:../../tmk_core_custom/common/action.c **** #else
  51:../../tmk_core_custom/common/action.c ****     process_action(&record);
  52:../../tmk_core_custom/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  53:../../tmk_core_custom/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  54:../../tmk_core_custom/common/action.c ****     }
  55:../../tmk_core_custom/common/action.c **** #endif
  56:../../tmk_core_custom/common/action.c **** }
  57:../../tmk_core_custom/common/action.c **** 
  58:../../tmk_core_custom/common/action.c **** void process_action(keyrecord_t *record)
  59:../../tmk_core_custom/common/action.c **** {
  60:../../tmk_core_custom/common/action.c ****     keyevent_t event = record->event;
  61:../../tmk_core_custom/common/action.c **** #ifndef NO_ACTION_TAPPING
  62:../../tmk_core_custom/common/action.c ****     uint8_t tap_count = record->tap.count;
  63:../../tmk_core_custom/common/action.c **** #endif
  64:../../tmk_core_custom/common/action.c **** 
  65:../../tmk_core_custom/common/action.c ****     if (IS_NOEVENT(event)) { return; }
  66:../../tmk_core_custom/common/action.c **** 
  67:../../tmk_core_custom/common/action.c ****     action_t action = layer_switch_get_action(event.key);
  68:../../tmk_core_custom/common/action.c ****     dprint("ACTION: "); debug_action(action);
  69:../../tmk_core_custom/common/action.c **** #ifndef NO_ACTION_LAYER
  70:../../tmk_core_custom/common/action.c ****     dprint(" layer_state: "); layer_debug();
  71:../../tmk_core_custom/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  72:../../tmk_core_custom/common/action.c **** #endif
  73:../../tmk_core_custom/common/action.c ****     dprintln();
  74:../../tmk_core_custom/common/action.c **** 
  75:../../tmk_core_custom/common/action.c ****     switch (action.kind.id) {
  76:../../tmk_core_custom/common/action.c ****         /* Key and Mods */
  77:../../tmk_core_custom/common/action.c ****         case ACT_LMODS:
  78:../../tmk_core_custom/common/action.c ****         case ACT_RMODS:
  79:../../tmk_core_custom/common/action.c ****             {
  80:../../tmk_core_custom/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
  81:../../tmk_core_custom/common/action.c ****                                                                 action.key.mods<<4;
  82:../../tmk_core_custom/common/action.c ****                 if (event.pressed) {
  83:../../tmk_core_custom/common/action.c ****                     if (mods) {
  84:../../tmk_core_custom/common/action.c ****                         add_weak_mods(mods);
  85:../../tmk_core_custom/common/action.c ****                         send_keyboard_report();
  86:../../tmk_core_custom/common/action.c ****                     }
  87:../../tmk_core_custom/common/action.c ****                     register_code(action.key.code);
  88:../../tmk_core_custom/common/action.c ****                 } else {
  89:../../tmk_core_custom/common/action.c ****                     unregister_code(action.key.code);
  90:../../tmk_core_custom/common/action.c ****                     if (mods) {
  91:../../tmk_core_custom/common/action.c ****                         del_weak_mods(mods);
  92:../../tmk_core_custom/common/action.c ****                         send_keyboard_report();
  93:../../tmk_core_custom/common/action.c ****                     }
  94:../../tmk_core_custom/common/action.c ****                 }
  95:../../tmk_core_custom/common/action.c ****             }
  96:../../tmk_core_custom/common/action.c ****             break;
  97:../../tmk_core_custom/common/action.c **** #ifndef NO_ACTION_TAPPING
  98:../../tmk_core_custom/common/action.c ****         case ACT_LMODS_TAP:
  99:../../tmk_core_custom/common/action.c ****         case ACT_RMODS_TAP:
 100:../../tmk_core_custom/common/action.c ****             {
 101:../../tmk_core_custom/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 102:../../tmk_core_custom/common/action.c ****                                                                     action.key.mods<<4;
 103:../../tmk_core_custom/common/action.c ****                 switch (action.layer_tap.code) {
 104:../../tmk_core_custom/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 105:../../tmk_core_custom/common/action.c ****                     case MODS_ONESHOT:
 106:../../tmk_core_custom/common/action.c ****                         // Oneshot modifier
 107:../../tmk_core_custom/common/action.c ****                         if (event.pressed) {
 108:../../tmk_core_custom/common/action.c ****                             if (tap_count == 0) {
 109:../../tmk_core_custom/common/action.c ****                                 register_mods(mods);
 110:../../tmk_core_custom/common/action.c ****                             }
 111:../../tmk_core_custom/common/action.c ****                             else if (tap_count == 1) {
 112:../../tmk_core_custom/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 113:../../tmk_core_custom/common/action.c ****                                 set_oneshot_mods(mods);
 114:../../tmk_core_custom/common/action.c ****                             }
 115:../../tmk_core_custom/common/action.c ****                             else {
 116:../../tmk_core_custom/common/action.c ****                                 register_mods(mods);
 117:../../tmk_core_custom/common/action.c ****                             }
 118:../../tmk_core_custom/common/action.c ****                         } else {
 119:../../tmk_core_custom/common/action.c ****                             if (tap_count == 0) {
 120:../../tmk_core_custom/common/action.c ****                                 clear_oneshot_mods();
 121:../../tmk_core_custom/common/action.c ****                                 unregister_mods(mods);
 122:../../tmk_core_custom/common/action.c ****                             }
 123:../../tmk_core_custom/common/action.c ****                             else if (tap_count == 1) {
 124:../../tmk_core_custom/common/action.c ****                                 // Retain Oneshot mods
 125:../../tmk_core_custom/common/action.c ****                             }
 126:../../tmk_core_custom/common/action.c ****                             else {
 127:../../tmk_core_custom/common/action.c ****                                 clear_oneshot_mods();
 128:../../tmk_core_custom/common/action.c ****                                 unregister_mods(mods);
 129:../../tmk_core_custom/common/action.c ****                             }
 130:../../tmk_core_custom/common/action.c ****                         }
 131:../../tmk_core_custom/common/action.c ****                         break;
 132:../../tmk_core_custom/common/action.c ****     #endif
 133:../../tmk_core_custom/common/action.c ****                     case MODS_TAP_TOGGLE:
 134:../../tmk_core_custom/common/action.c ****                         if (event.pressed) {
 135:../../tmk_core_custom/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 136:../../tmk_core_custom/common/action.c ****                                 register_mods(mods);
 137:../../tmk_core_custom/common/action.c ****                             }
 138:../../tmk_core_custom/common/action.c ****                         } else {
 139:../../tmk_core_custom/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 140:../../tmk_core_custom/common/action.c ****                                 unregister_mods(mods);
 141:../../tmk_core_custom/common/action.c ****                             }
 142:../../tmk_core_custom/common/action.c ****                         }
 143:../../tmk_core_custom/common/action.c ****                         break;
 144:../../tmk_core_custom/common/action.c ****                     default:
 145:../../tmk_core_custom/common/action.c ****                         if (event.pressed) {
 146:../../tmk_core_custom/common/action.c ****                             if (tap_count > 0) {
 147:../../tmk_core_custom/common/action.c ****                                 if (record->tap.interrupted) {
 148:../../tmk_core_custom/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 149:../../tmk_core_custom/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 150:../../tmk_core_custom/common/action.c ****                                     record->tap.count = 0;
 151:../../tmk_core_custom/common/action.c ****                                     register_mods(mods);
 152:../../tmk_core_custom/common/action.c ****                                 } else {
 153:../../tmk_core_custom/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 154:../../tmk_core_custom/common/action.c ****                                     register_code(action.key.code);
 155:../../tmk_core_custom/common/action.c ****                                 }
 156:../../tmk_core_custom/common/action.c ****                             } else {
 157:../../tmk_core_custom/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 158:../../tmk_core_custom/common/action.c ****                                 register_mods(mods);
 159:../../tmk_core_custom/common/action.c ****                             }
 160:../../tmk_core_custom/common/action.c ****                         } else {
 161:../../tmk_core_custom/common/action.c ****                             if (tap_count > 0) {
 162:../../tmk_core_custom/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 163:../../tmk_core_custom/common/action.c ****                                 unregister_code(action.key.code);
 164:../../tmk_core_custom/common/action.c ****                             } else {
 165:../../tmk_core_custom/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 166:../../tmk_core_custom/common/action.c ****                                 unregister_mods(mods);
 167:../../tmk_core_custom/common/action.c ****                             }
 168:../../tmk_core_custom/common/action.c ****                         }
 169:../../tmk_core_custom/common/action.c ****                         break;
 170:../../tmk_core_custom/common/action.c ****                 }
 171:../../tmk_core_custom/common/action.c ****             }
 172:../../tmk_core_custom/common/action.c ****             break;
 173:../../tmk_core_custom/common/action.c **** #endif
 174:../../tmk_core_custom/common/action.c **** #ifdef EXTRAKEY_ENABLE
 175:../../tmk_core_custom/common/action.c ****         /* other HID usage */
 176:../../tmk_core_custom/common/action.c ****         case ACT_USAGE:
 177:../../tmk_core_custom/common/action.c ****             switch (action.usage.page) {
 178:../../tmk_core_custom/common/action.c ****                 case PAGE_SYSTEM:
 179:../../tmk_core_custom/common/action.c ****                     if (event.pressed) {
 180:../../tmk_core_custom/common/action.c ****                         host_system_send(action.usage.code);
 181:../../tmk_core_custom/common/action.c ****                     } else {
 182:../../tmk_core_custom/common/action.c ****                         host_system_send(0);
 183:../../tmk_core_custom/common/action.c ****                     }
 184:../../tmk_core_custom/common/action.c ****                     break;
 185:../../tmk_core_custom/common/action.c ****                 case PAGE_CONSUMER:
 186:../../tmk_core_custom/common/action.c ****                     if (event.pressed) {
 187:../../tmk_core_custom/common/action.c ****                         host_consumer_send(action.usage.code);
 188:../../tmk_core_custom/common/action.c ****                     } else {
 189:../../tmk_core_custom/common/action.c ****                         host_consumer_send(0);
 190:../../tmk_core_custom/common/action.c ****                     }
 191:../../tmk_core_custom/common/action.c ****                     break;
 192:../../tmk_core_custom/common/action.c ****             }
 193:../../tmk_core_custom/common/action.c ****             break;
 194:../../tmk_core_custom/common/action.c **** #endif
 195:../../tmk_core_custom/common/action.c **** #ifdef MOUSEKEY_ENABLE
 196:../../tmk_core_custom/common/action.c ****         /* Mouse key */
 197:../../tmk_core_custom/common/action.c ****         case ACT_MOUSEKEY:
 198:../../tmk_core_custom/common/action.c ****             if (event.pressed) {
 199:../../tmk_core_custom/common/action.c ****                 mousekey_on(action.key.code);
 200:../../tmk_core_custom/common/action.c ****                 mousekey_send();
 201:../../tmk_core_custom/common/action.c ****             } else {
 202:../../tmk_core_custom/common/action.c ****                 mousekey_off(action.key.code);
 203:../../tmk_core_custom/common/action.c ****                 mousekey_send();
 204:../../tmk_core_custom/common/action.c ****             }
 205:../../tmk_core_custom/common/action.c ****             break;
 206:../../tmk_core_custom/common/action.c **** #endif
 207:../../tmk_core_custom/common/action.c **** #ifndef NO_ACTION_LAYER
 208:../../tmk_core_custom/common/action.c ****         case ACT_LAYER:
 209:../../tmk_core_custom/common/action.c ****             if (action.layer_bitop.on == 0) {
 210:../../tmk_core_custom/common/action.c ****                 /* Default Layer Bitwise Operation */
 211:../../tmk_core_custom/common/action.c ****                 if (!event.pressed) {
 212:../../tmk_core_custom/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 213:../../tmk_core_custom/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 214:../../tmk_core_custom/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 215:../../tmk_core_custom/common/action.c ****                     switch (action.layer_bitop.op) {
 216:../../tmk_core_custom/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 217:../../tmk_core_custom/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 218:../../tmk_core_custom/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 219:../../tmk_core_custom/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 220:../../tmk_core_custom/common/action.c ****                     }
 221:../../tmk_core_custom/common/action.c ****                 }
 222:../../tmk_core_custom/common/action.c ****             } else {
 223:../../tmk_core_custom/common/action.c ****                 /* Layer Bitwise Operation */
 224:../../tmk_core_custom/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 225:../../tmk_core_custom/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 226:../../tmk_core_custom/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 227:../../tmk_core_custom/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 228:../../tmk_core_custom/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 229:../../tmk_core_custom/common/action.c ****                     switch (action.layer_bitop.op) {
 230:../../tmk_core_custom/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 231:../../tmk_core_custom/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 232:../../tmk_core_custom/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 233:../../tmk_core_custom/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 234:../../tmk_core_custom/common/action.c ****                     }
 235:../../tmk_core_custom/common/action.c ****                 }
 236:../../tmk_core_custom/common/action.c ****             }
 237:../../tmk_core_custom/common/action.c ****             break;
 238:../../tmk_core_custom/common/action.c ****     #ifndef NO_ACTION_TAPPING
 239:../../tmk_core_custom/common/action.c ****         case ACT_LAYER_TAP:
 240:../../tmk_core_custom/common/action.c ****         case ACT_LAYER_TAP_EXT:
 241:../../tmk_core_custom/common/action.c ****             switch (action.layer_tap.code) {
 242:../../tmk_core_custom/common/action.c ****                 case 0xe0 ... 0xef:
 243:../../tmk_core_custom/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 244:../../tmk_core_custom/common/action.c ****                     if (event.pressed) {
 245:../../tmk_core_custom/common/action.c ****                         layer_on(action.layer_tap.val);
 246:../../tmk_core_custom/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 247:../../tmk_core_custom/common/action.c ****                     } else {
 248:../../tmk_core_custom/common/action.c ****                         layer_off(action.layer_tap.val);
 249:../../tmk_core_custom/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 250:../../tmk_core_custom/common/action.c ****                     }
 251:../../tmk_core_custom/common/action.c ****                     break;
 252:../../tmk_core_custom/common/action.c ****                 case OP_TAP_TOGGLE:
 253:../../tmk_core_custom/common/action.c ****                     /* tap toggle */
 254:../../tmk_core_custom/common/action.c ****                     if (event.pressed) {
 255:../../tmk_core_custom/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 256:../../tmk_core_custom/common/action.c ****                             layer_invert(action.layer_tap.val);
 257:../../tmk_core_custom/common/action.c ****                         }
 258:../../tmk_core_custom/common/action.c ****                     } else {
 259:../../tmk_core_custom/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 260:../../tmk_core_custom/common/action.c ****                             layer_invert(action.layer_tap.val);
 261:../../tmk_core_custom/common/action.c ****                         }
 262:../../tmk_core_custom/common/action.c ****                     }
 263:../../tmk_core_custom/common/action.c ****                     break;
 264:../../tmk_core_custom/common/action.c ****                 case OP_ON_OFF:
 265:../../tmk_core_custom/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 266:../../tmk_core_custom/common/action.c ****                                     layer_off(action.layer_tap.val);
 267:../../tmk_core_custom/common/action.c ****                     break;
 268:../../tmk_core_custom/common/action.c ****                 case OP_OFF_ON:
 269:../../tmk_core_custom/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 270:../../tmk_core_custom/common/action.c ****                                     layer_on(action.layer_tap.val);
 271:../../tmk_core_custom/common/action.c ****                     break;
 272:../../tmk_core_custom/common/action.c ****                 case OP_SET_CLEAR:
 273:../../tmk_core_custom/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 274:../../tmk_core_custom/common/action.c ****                                     layer_clear();
 275:../../tmk_core_custom/common/action.c ****                     break;
 276:../../tmk_core_custom/common/action.c ****                 default:
 277:../../tmk_core_custom/common/action.c ****                     /* tap key */
 278:../../tmk_core_custom/common/action.c ****                     if (event.pressed) {
 279:../../tmk_core_custom/common/action.c ****                         if (tap_count > 0) {
 280:../../tmk_core_custom/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 281:../../tmk_core_custom/common/action.c ****                             register_code(action.layer_tap.code);
 282:../../tmk_core_custom/common/action.c ****                         } else {
 283:../../tmk_core_custom/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 284:../../tmk_core_custom/common/action.c ****                             layer_on(action.layer_tap.val);
 285:../../tmk_core_custom/common/action.c ****                         }
 286:../../tmk_core_custom/common/action.c ****                     } else {
 287:../../tmk_core_custom/common/action.c ****                         if (tap_count > 0) {
 288:../../tmk_core_custom/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 289:../../tmk_core_custom/common/action.c ****                             unregister_code(action.layer_tap.code);
 290:../../tmk_core_custom/common/action.c ****                         } else {
 291:../../tmk_core_custom/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 292:../../tmk_core_custom/common/action.c ****                             layer_off(action.layer_tap.val);
 293:../../tmk_core_custom/common/action.c ****                         }
 294:../../tmk_core_custom/common/action.c ****                     }
 295:../../tmk_core_custom/common/action.c ****                     break;
 296:../../tmk_core_custom/common/action.c ****             }
 297:../../tmk_core_custom/common/action.c ****             break;
 298:../../tmk_core_custom/common/action.c ****     #endif
 299:../../tmk_core_custom/common/action.c **** #endif
 300:../../tmk_core_custom/common/action.c ****         /* Extentions */
 301:../../tmk_core_custom/common/action.c **** #ifndef NO_ACTION_MACRO
 302:../../tmk_core_custom/common/action.c ****         case ACT_MACRO:
 303:../../tmk_core_custom/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 304:../../tmk_core_custom/common/action.c ****             break;
 305:../../tmk_core_custom/common/action.c **** #endif
 306:../../tmk_core_custom/common/action.c **** #ifdef BACKLIGHT_ENABLE
 307:../../tmk_core_custom/common/action.c ****         case ACT_BACKLIGHT:
 308:../../tmk_core_custom/common/action.c ****             if (!event.pressed) {
 309:../../tmk_core_custom/common/action.c ****                 /* Backwards compatibility */
 310:../../tmk_core_custom/common/action.c ****                 if (action.backlight.level != 0 && action.backlight.opt != BACKLIGHT_LEVEL) {
 311:../../tmk_core_custom/common/action.c ****                     action.backlight.opt = action.backlight.level;
 312:../../tmk_core_custom/common/action.c ****                 }
 313:../../tmk_core_custom/common/action.c ****                 switch (action.backlight.opt) {
 314:../../tmk_core_custom/common/action.c ****                     case BACKLIGHT_INCREASE:
 315:../../tmk_core_custom/common/action.c ****                         backlight_increase();
 316:../../tmk_core_custom/common/action.c ****                         break;
 317:../../tmk_core_custom/common/action.c ****                     case BACKLIGHT_DECREASE:
 318:../../tmk_core_custom/common/action.c ****                         backlight_decrease();
 319:../../tmk_core_custom/common/action.c ****                         break;
 320:../../tmk_core_custom/common/action.c ****                     case BACKLIGHT_TOGGLE:
 321:../../tmk_core_custom/common/action.c ****                         backlight_toggle();
 322:../../tmk_core_custom/common/action.c ****                         break;
 323:../../tmk_core_custom/common/action.c ****                     case BACKLIGHT_STEP:
 324:../../tmk_core_custom/common/action.c ****                         backlight_step();
 325:../../tmk_core_custom/common/action.c ****                         break;
 326:../../tmk_core_custom/common/action.c ****                     case BACKLIGHT_LEVEL:
 327:../../tmk_core_custom/common/action.c ****                         backlight_level(action.backlight.level);
 328:../../tmk_core_custom/common/action.c ****                         break;
 329:../../tmk_core_custom/common/action.c ****                 }
 330:../../tmk_core_custom/common/action.c ****             }
 331:../../tmk_core_custom/common/action.c ****             break;
 332:../../tmk_core_custom/common/action.c **** #endif
 333:../../tmk_core_custom/common/action.c ****         case ACT_COMMAND:
 334:../../tmk_core_custom/common/action.c ****             break;
 335:../../tmk_core_custom/common/action.c **** #ifndef NO_ACTION_FUNCTION
 336:../../tmk_core_custom/common/action.c ****         case ACT_FUNCTION:
 337:../../tmk_core_custom/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 338:../../tmk_core_custom/common/action.c ****             break;
 339:../../tmk_core_custom/common/action.c **** #endif
 340:../../tmk_core_custom/common/action.c ****         default:
 341:../../tmk_core_custom/common/action.c ****             break;
 342:../../tmk_core_custom/common/action.c ****     }
 343:../../tmk_core_custom/common/action.c **** }
 344:../../tmk_core_custom/common/action.c **** 
 345:../../tmk_core_custom/common/action.c **** 
 346:../../tmk_core_custom/common/action.c **** 
 347:../../tmk_core_custom/common/action.c **** 
 348:../../tmk_core_custom/common/action.c **** /*
 349:../../tmk_core_custom/common/action.c ****  * Utilities for actions.
 350:../../tmk_core_custom/common/action.c ****  */
 351:../../tmk_core_custom/common/action.c **** void register_code(uint8_t code)
 352:../../tmk_core_custom/common/action.c **** {
  47               		.loc 2 352 0
  48               		.cfi_startproc
  49               	.LVL0:
  50               		.loc 2 352 0
  51 0000 CF93      		push r28
  52               	.LCFI0:
  53               		.cfi_def_cfa_offset 3
  54               		.cfi_offset 28, -2
  55               	/* prologue: function */
  56               	/* frame size = 0 */
  57               	/* stack size = 1 */
  58               	.L__stack_usage = 1
  59 0002 C82F      		mov r28,r24
 353:../../tmk_core_custom/common/action.c ****     if (code == KC_NO) {
  60               		.loc 2 353 0
  61 0004 8823      		tst r24
  62 0006 01F4      		brne .+2
  63 0008 00C0      		rjmp .L3
 354:../../tmk_core_custom/common/action.c ****         return;
 355:../../tmk_core_custom/common/action.c ****     }
 356:../../tmk_core_custom/common/action.c **** 
 357:../../tmk_core_custom/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 358:../../tmk_core_custom/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
  64               		.loc 2 358 0
  65 000a 8238      		cpi r24,lo8(-126)
  66 000c 01F4      		brne .L6
 359:../../tmk_core_custom/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 360:../../tmk_core_custom/common/action.c ****         // Resync: ignore if caps lock already is on
 361:../../tmk_core_custom/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
  67               		.loc 2 361 0
  68 000e 0E94 0000 		call host_keyboard_leds
  69               	.LVL1:
  70 0012 81FD      		sbrc r24,1
  71 0014 00C0      		rjmp .L3
 362:../../tmk_core_custom/common/action.c **** #endif
 363:../../tmk_core_custom/common/action.c ****         add_key(KC_CAPSLOCK);
  72               		.loc 2 363 0
  73 0016 89E3      		ldi r24,lo8(57)
  74 0018 0E94 0000 		call add_key
  75               	.LVL2:
 364:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
  76               		.loc 2 364 0
  77 001c 0E94 0000 		call send_keyboard_report
  78               	.LVL3:
 365:../../tmk_core_custom/common/action.c ****         del_key(KC_CAPSLOCK);
  79               		.loc 2 365 0
  80 0020 89E3      		ldi r24,lo8(57)
  81 0022 00C0      		rjmp .L36
  82               	.LVL4:
  83               	.L6:
 366:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
 367:../../tmk_core_custom/common/action.c ****     }
 368:../../tmk_core_custom/common/action.c **** 
 369:../../tmk_core_custom/common/action.c ****     else if (KC_LOCKING_NUM == code) {
  84               		.loc 2 369 0
  85 0024 8338      		cpi r24,lo8(-125)
  86 0026 01F4      		brne .L8
 370:../../tmk_core_custom/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 371:../../tmk_core_custom/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
  87               		.loc 2 371 0
  88 0028 0E94 0000 		call host_keyboard_leds
  89               	.LVL5:
  90 002c 80FD      		sbrc r24,0
  91 002e 00C0      		rjmp .L3
 372:../../tmk_core_custom/common/action.c **** #endif
 373:../../tmk_core_custom/common/action.c ****         add_key(KC_NUMLOCK);
  92               		.loc 2 373 0
  93 0030 83E5      		ldi r24,lo8(83)
  94 0032 0E94 0000 		call add_key
  95               	.LVL6:
 374:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
  96               		.loc 2 374 0
  97 0036 0E94 0000 		call send_keyboard_report
  98               	.LVL7:
 375:../../tmk_core_custom/common/action.c ****         del_key(KC_NUMLOCK);
  99               		.loc 2 375 0
 100 003a 83E5      		ldi r24,lo8(83)
 101               	.L36:
 102 003c 0E94 0000 		call del_key
 103               	.LVL8:
 104               	.L37:
 105               	/* epilogue start */
 376:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
 377:../../tmk_core_custom/common/action.c ****     }
 378:../../tmk_core_custom/common/action.c **** 
 379:../../tmk_core_custom/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 380:../../tmk_core_custom/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 381:../../tmk_core_custom/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 382:../../tmk_core_custom/common/action.c **** #endif
 383:../../tmk_core_custom/common/action.c ****         add_key(KC_SCROLLLOCK);
 384:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
 385:../../tmk_core_custom/common/action.c ****         del_key(KC_SCROLLLOCK);
 386:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
 387:../../tmk_core_custom/common/action.c ****     }
 388:../../tmk_core_custom/common/action.c **** #endif
 389:../../tmk_core_custom/common/action.c **** 
 390:../../tmk_core_custom/common/action.c ****     else if IS_KEY(code) {
 391:../../tmk_core_custom/common/action.c ****         // TODO: should push command_proc out of this block?
 392:../../tmk_core_custom/common/action.c ****         if (command_proc(code)) return;
 393:../../tmk_core_custom/common/action.c **** 
 394:../../tmk_core_custom/common/action.c **** #ifndef NO_ACTION_ONESHOT
 395:../../tmk_core_custom/common/action.c **** /* TODO: remove
 396:../../tmk_core_custom/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 397:../../tmk_core_custom/common/action.c ****             uint8_t tmp_mods = get_mods();
 398:../../tmk_core_custom/common/action.c ****             add_mods(oneshot_state.mods);
 399:../../tmk_core_custom/common/action.c **** 
 400:../../tmk_core_custom/common/action.c ****             add_key(code);
 401:../../tmk_core_custom/common/action.c ****             send_keyboard_report();
 402:../../tmk_core_custom/common/action.c **** 
 403:../../tmk_core_custom/common/action.c ****             set_mods(tmp_mods);
 404:../../tmk_core_custom/common/action.c ****             send_keyboard_report();
 405:../../tmk_core_custom/common/action.c ****             oneshot_cancel();
 406:../../tmk_core_custom/common/action.c ****         } else 
 407:../../tmk_core_custom/common/action.c **** */
 408:../../tmk_core_custom/common/action.c **** #endif
 409:../../tmk_core_custom/common/action.c ****         {
 410:../../tmk_core_custom/common/action.c ****             add_key(code);
 411:../../tmk_core_custom/common/action.c ****             send_keyboard_report();
 412:../../tmk_core_custom/common/action.c ****         }
 413:../../tmk_core_custom/common/action.c ****     }
 414:../../tmk_core_custom/common/action.c ****     else if IS_MOD(code) {
 415:../../tmk_core_custom/common/action.c ****         add_mods(MOD_BIT(code));
 416:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
 417:../../tmk_core_custom/common/action.c ****     }
 418:../../tmk_core_custom/common/action.c ****     else if IS_SYSTEM(code) {
 419:../../tmk_core_custom/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 420:../../tmk_core_custom/common/action.c ****     }
 421:../../tmk_core_custom/common/action.c ****     else if IS_CONSUMER(code) {
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 423:../../tmk_core_custom/common/action.c ****     }
 424:../../tmk_core_custom/common/action.c **** }
 106               		.loc 2 424 0
 107 0040 CF91      		pop r28
 376:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
 108               		.loc 2 376 0
 109 0042 0C94 0000 		jmp send_keyboard_report
 110               	.LVL9:
 111               	.L8:
 379:../../tmk_core_custom/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 112               		.loc 2 379 0
 113 0046 8438      		cpi r24,lo8(-124)
 114 0048 01F4      		brne .L9
 381:../../tmk_core_custom/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 115               		.loc 2 381 0
 116 004a 0E94 0000 		call host_keyboard_leds
 117               	.LVL10:
 118 004e 82FD      		sbrc r24,2
 119 0050 00C0      		rjmp .L3
 383:../../tmk_core_custom/common/action.c ****         add_key(KC_SCROLLLOCK);
 120               		.loc 2 383 0
 121 0052 87E4      		ldi r24,lo8(71)
 122 0054 0E94 0000 		call add_key
 123               	.LVL11:
 384:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
 124               		.loc 2 384 0
 125 0058 0E94 0000 		call send_keyboard_report
 126               	.LVL12:
 385:../../tmk_core_custom/common/action.c ****         del_key(KC_SCROLLLOCK);
 127               		.loc 2 385 0
 128 005c 87E4      		ldi r24,lo8(71)
 129 005e 00C0      		rjmp .L36
 130               	.LVL13:
 131               	.L9:
 390:../../tmk_core_custom/common/action.c ****     else if IS_KEY(code) {
 132               		.loc 2 390 0
 133 0060 8CEF      		ldi r24,lo8(-4)
 134               	.LVL14:
 135 0062 8C0F      		add r24,r28
 136 0064 813A      		cpi r24,lo8(-95)
 137 0066 00F4      		brsh .L10
 392:../../tmk_core_custom/common/action.c ****         if (command_proc(code)) return;
 138               		.loc 2 392 0
 139 0068 8C2F      		mov r24,r28
 140 006a 0E94 0000 		call command_proc
 141               	.LVL15:
 142 006e 8111      		cpse r24,__zero_reg__
 143 0070 00C0      		rjmp .L3
 410:../../tmk_core_custom/common/action.c ****             add_key(code);
 144               		.loc 2 410 0
 145 0072 8C2F      		mov r24,r28
 146 0074 0E94 0000 		call add_key
 147               	.LVL16:
 148 0078 00C0      		rjmp .L37
 149               	.L10:
 414:../../tmk_core_custom/common/action.c ****     else if IS_MOD(code) {
 150               		.loc 2 414 0
 151 007a 80E2      		ldi r24,lo8(32)
 152 007c 8C0F      		add r24,r28
 153 007e 8830      		cpi r24,lo8(8)
 154 0080 00F4      		brsh .L11
 415:../../tmk_core_custom/common/action.c ****         add_mods(MOD_BIT(code));
 155               		.loc 2 415 0
 156 0082 C770      		andi r28,lo8(7)
 157               	.LVL17:
 158 0084 81E0      		ldi r24,lo8(1)
 159 0086 00C0      		rjmp 2f
 160               		1:
 161 0088 880F      		lsl r24
 162               		2:
 163 008a CA95      		dec r28
 164 008c 02F4      		brpl 1b
 165 008e 0E94 0000 		call add_mods
 166               	.LVL18:
 167 0092 00C0      		rjmp .L37
 168               	.LVL19:
 169               	.L11:
 418:../../tmk_core_custom/common/action.c ****     else if IS_SYSTEM(code) {
 170               		.loc 2 418 0
 171 0094 8BE5      		ldi r24,lo8(91)
 172 0096 8C0F      		add r24,r28
 173 0098 8330      		cpi r24,lo8(3)
 174 009a 00F4      		brsh .L12
 419:../../tmk_core_custom/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 175               		.loc 2 419 0
 176 009c C53A      		cpi r28,lo8(-91)
 177 009e 01F0      		breq .L15
 419:../../tmk_core_custom/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 178               		.loc 2 419 0 is_stmt 0 discriminator 1
 179 00a0 C63A      		cpi r28,lo8(-90)
 180 00a2 01F4      		brne .L16
 419:../../tmk_core_custom/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 181               		.loc 2 419 0
 182 00a4 82E8      		ldi r24,lo8(-126)
 183 00a6 90E0      		ldi r25,0
 184 00a8 00C0      		rjmp .L13
 185               	.L15:
 186 00aa 81E8      		ldi r24,lo8(-127)
 187 00ac 90E0      		ldi r25,0
 188 00ae 00C0      		rjmp .L13
 189               	.L16:
 190 00b0 83E8      		ldi r24,lo8(-125)
 191 00b2 90E0      		ldi r25,0
 192               	.L13:
 193               	/* epilogue start */
 194               		.loc 2 424 0 is_stmt 1 discriminator 4
 195 00b4 CF91      		pop r28
 196               	.LVL20:
 419:../../tmk_core_custom/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 197               		.loc 2 419 0 discriminator 4
 198 00b6 0C94 0000 		jmp host_system_send
 199               	.LVL21:
 200               	.L12:
 421:../../tmk_core_custom/common/action.c ****     else if IS_CONSUMER(code) {
 201               		.loc 2 421 0
 202 00ba 88E5      		ldi r24,lo8(88)
 203 00bc 8C0F      		add r24,r28
 204 00be 8331      		cpi r24,lo8(19)
 205 00c0 00F0      		brlo .+2
 206 00c2 00C0      		rjmp .L3
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 207               		.loc 2 422 0
 208 00c4 C83A      		cpi r28,lo8(-88)
 209 00c6 01F0      		breq .L17
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 210               		.loc 2 422 0 is_stmt 0 discriminator 1
 211 00c8 C93A      		cpi r28,lo8(-87)
 212 00ca 01F0      		breq .L18
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 213               		.loc 2 422 0 discriminator 3
 214 00cc CA3A      		cpi r28,lo8(-86)
 215 00ce 01F0      		breq .L19
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 216               		.loc 2 422 0 discriminator 5
 217 00d0 CB3A      		cpi r28,lo8(-85)
 218 00d2 01F0      		breq .L20
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 219               		.loc 2 422 0 discriminator 7
 220 00d4 CC3A      		cpi r28,lo8(-84)
 221 00d6 01F0      		breq .L21
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 222               		.loc 2 422 0 discriminator 13
 223 00d8 CD3A      		cpi r28,lo8(-83)
 224 00da 01F0      		breq .L22
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 225               		.loc 2 422 0 discriminator 15
 226 00dc C03B      		cpi r28,lo8(-80)
 227 00de 01F0      		breq .L23
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 228               		.loc 2 422 0 discriminator 17
 229 00e0 CE3A      		cpi r28,lo8(-82)
 230 00e2 01F0      		breq .L24
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 231               		.loc 2 422 0 discriminator 19
 232 00e4 CF3A      		cpi r28,lo8(-81)
 233 00e6 01F0      		breq .L25
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 234               		.loc 2 422 0 discriminator 21
 235 00e8 C13B      		cpi r28,lo8(-79)
 236 00ea 01F0      		breq .L26
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 237               		.loc 2 422 0 discriminator 23
 238 00ec C23B      		cpi r28,lo8(-78)
 239 00ee 01F0      		breq .L27
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 240               		.loc 2 422 0 discriminator 25
 241 00f0 C33B      		cpi r28,lo8(-77)
 242 00f2 01F0      		breq .L28
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 243               		.loc 2 422 0 discriminator 27
 244 00f4 C43B      		cpi r28,lo8(-76)
 245 00f6 01F0      		breq .L29
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 246               		.loc 2 422 0 discriminator 29
 247 00f8 C53B      		cpi r28,lo8(-75)
 248 00fa 01F0      		breq .L30
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 249               		.loc 2 422 0 discriminator 31
 250 00fc C63B      		cpi r28,lo8(-74)
 251 00fe 01F0      		breq .L31
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 252               		.loc 2 422 0 discriminator 33
 253 0100 C73B      		cpi r28,lo8(-73)
 254 0102 01F0      		breq .L32
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 255               		.loc 2 422 0 discriminator 35
 256 0104 C83B      		cpi r28,lo8(-72)
 257 0106 01F0      		breq .L33
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 258               		.loc 2 422 0 discriminator 37
 259 0108 C93B      		cpi r28,lo8(-71)
 260 010a 01F0      		breq .L34
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 261               		.loc 2 422 0 discriminator 39
 262 010c CA3B      		cpi r28,lo8(-70)
 263 010e 01F4      		brne .L35
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 264               		.loc 2 422 0
 265 0110 8AE2      		ldi r24,lo8(42)
 266 0112 92E0      		ldi r25,lo8(2)
 267 0114 00C0      		rjmp .L14
 268               	.L17:
 269 0116 82EE      		ldi r24,lo8(-30)
 270 0118 90E0      		ldi r25,0
 271 011a 00C0      		rjmp .L14
 272               	.L18:
 273 011c 89EE      		ldi r24,lo8(-23)
 274 011e 90E0      		ldi r25,0
 275 0120 00C0      		rjmp .L14
 276               	.L19:
 277 0122 8AEE      		ldi r24,lo8(-22)
 278 0124 90E0      		ldi r25,0
 279 0126 00C0      		rjmp .L14
 280               	.L20:
 281 0128 85EB      		ldi r24,lo8(-75)
 282 012a 90E0      		ldi r25,0
 283 012c 00C0      		rjmp .L14
 284               	.L21:
 285 012e 86EB      		ldi r24,lo8(-74)
 286 0130 90E0      		ldi r25,0
 287 0132 00C0      		rjmp .L14
 288               	.L22:
 289 0134 87EB      		ldi r24,lo8(-73)
 290 0136 90E0      		ldi r25,0
 291 0138 00C0      		rjmp .L14
 292               	.L23:
 293 013a 8CEC      		ldi r24,lo8(-52)
 294 013c 90E0      		ldi r25,0
 295 013e 00C0      		rjmp .L14
 296               	.L24:
 297 0140 8DEC      		ldi r24,lo8(-51)
 298 0142 90E0      		ldi r25,0
 299 0144 00C0      		rjmp .L14
 300               	.L25:
 301 0146 83E8      		ldi r24,lo8(-125)
 302 0148 91E0      		ldi r25,lo8(1)
 303 014a 00C0      		rjmp .L14
 304               	.L26:
 305 014c 8AE8      		ldi r24,lo8(-118)
 306 014e 91E0      		ldi r25,lo8(1)
 307 0150 00C0      		rjmp .L14
 308               	.L27:
 309 0152 82E9      		ldi r24,lo8(-110)
 310 0154 91E0      		ldi r25,lo8(1)
 311 0156 00C0      		rjmp .L14
 312               	.L28:
 313 0158 84E9      		ldi r24,lo8(-108)
 314 015a 91E0      		ldi r25,lo8(1)
 315 015c 00C0      		rjmp .L14
 316               	.L29:
 317 015e 81E2      		ldi r24,lo8(33)
 318 0160 92E0      		ldi r25,lo8(2)
 319 0162 00C0      		rjmp .L14
 320               	.L30:
 321 0164 83E2      		ldi r24,lo8(35)
 322 0166 92E0      		ldi r25,lo8(2)
 323 0168 00C0      		rjmp .L14
 324               	.L31:
 325 016a 84E2      		ldi r24,lo8(36)
 326 016c 92E0      		ldi r25,lo8(2)
 327 016e 00C0      		rjmp .L14
 328               	.L32:
 329 0170 85E2      		ldi r24,lo8(37)
 330 0172 92E0      		ldi r25,lo8(2)
 331 0174 00C0      		rjmp .L14
 332               	.L33:
 333 0176 86E2      		ldi r24,lo8(38)
 334 0178 92E0      		ldi r25,lo8(2)
 335 017a 00C0      		rjmp .L14
 336               	.L34:
 337 017c 87E2      		ldi r24,lo8(39)
 338 017e 92E0      		ldi r25,lo8(2)
 339 0180 00C0      		rjmp .L14
 340               	.L35:
 341 0182 80E0      		ldi r24,0
 342 0184 90E0      		ldi r25,0
 343               	.L14:
 344               	/* epilogue start */
 345               		.loc 2 424 0 is_stmt 1 discriminator 43
 346 0186 CF91      		pop r28
 347               	.LVL22:
 422:../../tmk_core_custom/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 348               		.loc 2 422 0 discriminator 43
 349 0188 0C94 0000 		jmp host_consumer_send
 350               	.LVL23:
 351               	.L3:
 352               	/* epilogue start */
 353               		.loc 2 424 0
 354 018c CF91      		pop r28
 355               	.LVL24:
 356 018e 0895      		ret
 357               		.cfi_endproc
 358               	.LFE107:
 360               		.section	.text.unregister_code,"ax",@progbits
 361               	.global	unregister_code
 363               	unregister_code:
 364               	.LFB108:
 425:../../tmk_core_custom/common/action.c **** 
 426:../../tmk_core_custom/common/action.c **** void unregister_code(uint8_t code)
 427:../../tmk_core_custom/common/action.c **** {
 365               		.loc 2 427 0
 366               		.cfi_startproc
 367               	.LVL25:
 368               	/* prologue: function */
 369               	/* frame size = 0 */
 370               	/* stack size = 0 */
 371               	.L__stack_usage = 0
 428:../../tmk_core_custom/common/action.c ****     if (code == KC_NO) {
 372               		.loc 2 428 0
 373 0000 8823      		tst r24
 374 0002 01F4      		brne .+2
 375 0004 00C0      		rjmp .L39
 429:../../tmk_core_custom/common/action.c ****         return;
 430:../../tmk_core_custom/common/action.c ****     }
 431:../../tmk_core_custom/common/action.c **** 
 432:../../tmk_core_custom/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 433:../../tmk_core_custom/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 376               		.loc 2 433 0
 377 0006 8238      		cpi r24,lo8(-126)
 378 0008 01F4      		brne .L42
 434:../../tmk_core_custom/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 435:../../tmk_core_custom/common/action.c ****         // Resync: ignore if caps lock already is off
 436:../../tmk_core_custom/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 379               		.loc 2 436 0
 380 000a 0E94 0000 		call host_keyboard_leds
 381               	.LVL26:
 382 000e 81FF      		sbrs r24,1
 383 0010 00C0      		rjmp .L39
 437:../../tmk_core_custom/common/action.c **** #endif
 438:../../tmk_core_custom/common/action.c ****         add_key(KC_CAPSLOCK);
 384               		.loc 2 438 0
 385 0012 89E3      		ldi r24,lo8(57)
 386 0014 0E94 0000 		call add_key
 387               	.LVL27:
 439:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
 388               		.loc 2 439 0
 389 0018 0E94 0000 		call send_keyboard_report
 390               	.LVL28:
 440:../../tmk_core_custom/common/action.c ****         del_key(KC_CAPSLOCK);
 391               		.loc 2 440 0
 392 001c 89E3      		ldi r24,lo8(57)
 393 001e 00C0      		rjmp .L58
 394               	.LVL29:
 395               	.L42:
 441:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
 442:../../tmk_core_custom/common/action.c ****     }
 443:../../tmk_core_custom/common/action.c **** 
 444:../../tmk_core_custom/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 396               		.loc 2 444 0
 397 0020 8338      		cpi r24,lo8(-125)
 398 0022 01F4      		brne .L44
 445:../../tmk_core_custom/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 446:../../tmk_core_custom/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 399               		.loc 2 446 0
 400 0024 0E94 0000 		call host_keyboard_leds
 401               	.LVL30:
 402 0028 80FF      		sbrs r24,0
 403 002a 00C0      		rjmp .L39
 447:../../tmk_core_custom/common/action.c **** #endif
 448:../../tmk_core_custom/common/action.c ****         add_key(KC_NUMLOCK);
 404               		.loc 2 448 0
 405 002c 83E5      		ldi r24,lo8(83)
 406 002e 0E94 0000 		call add_key
 407               	.LVL31:
 449:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
 408               		.loc 2 449 0
 409 0032 0E94 0000 		call send_keyboard_report
 410               	.LVL32:
 450:../../tmk_core_custom/common/action.c ****         del_key(KC_NUMLOCK);
 411               		.loc 2 450 0
 412 0036 83E5      		ldi r24,lo8(83)
 413               	.L58:
 414 0038 0E94 0000 		call del_key
 415               	.LVL33:
 416               	.L59:
 451:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
 417               		.loc 2 451 0
 418 003c 0C94 0000 		jmp send_keyboard_report
 419               	.LVL34:
 420               	.L44:
 452:../../tmk_core_custom/common/action.c ****     }
 453:../../tmk_core_custom/common/action.c **** 
 454:../../tmk_core_custom/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 421               		.loc 2 454 0
 422 0040 8438      		cpi r24,lo8(-124)
 423 0042 01F4      		brne .L45
 455:../../tmk_core_custom/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 456:../../tmk_core_custom/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 424               		.loc 2 456 0
 425 0044 0E94 0000 		call host_keyboard_leds
 426               	.LVL35:
 427 0048 82FF      		sbrs r24,2
 428 004a 00C0      		rjmp .L39
 457:../../tmk_core_custom/common/action.c **** #endif
 458:../../tmk_core_custom/common/action.c ****         add_key(KC_SCROLLLOCK);
 429               		.loc 2 458 0
 430 004c 87E4      		ldi r24,lo8(71)
 431 004e 0E94 0000 		call add_key
 432               	.LVL36:
 459:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
 433               		.loc 2 459 0
 434 0052 0E94 0000 		call send_keyboard_report
 435               	.LVL37:
 460:../../tmk_core_custom/common/action.c ****         del_key(KC_SCROLLLOCK);
 436               		.loc 2 460 0
 437 0056 87E4      		ldi r24,lo8(71)
 438 0058 00C0      		rjmp .L58
 439               	.LVL38:
 440               	.L45:
 461:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
 462:../../tmk_core_custom/common/action.c ****     }
 463:../../tmk_core_custom/common/action.c **** #endif
 464:../../tmk_core_custom/common/action.c **** 
 465:../../tmk_core_custom/common/action.c ****     else if IS_KEY(code) {
 441               		.loc 2 465 0
 442 005a 9CEF      		ldi r25,lo8(-4)
 443 005c 980F      		add r25,r24
 444 005e 913A      		cpi r25,lo8(-95)
 445 0060 00F0      		brlo .L58
 466:../../tmk_core_custom/common/action.c ****         del_key(code);
 467:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
 468:../../tmk_core_custom/common/action.c ****     }
 469:../../tmk_core_custom/common/action.c ****     else if IS_MOD(code) {
 446               		.loc 2 469 0
 447 0062 90E2      		ldi r25,lo8(32)
 448 0064 980F      		add r25,r24
 449 0066 9830      		cpi r25,lo8(8)
 450 0068 00F4      		brsh .L47
 470:../../tmk_core_custom/common/action.c ****         del_mods(MOD_BIT(code));
 451               		.loc 2 470 0
 452 006a 8770      		andi r24,lo8(7)
 453               	.LVL39:
 454 006c 91E0      		ldi r25,lo8(1)
 455 006e 00C0      		rjmp 2f
 456               		1:
 457 0070 990F      		lsl r25
 458               		2:
 459 0072 8A95      		dec r24
 460 0074 02F4      		brpl 1b
 461 0076 892F      		mov r24,r25
 462 0078 0E94 0000 		call del_mods
 463               	.LVL40:
 464 007c 00C0      		rjmp .L59
 465               	.LVL41:
 466               	.L47:
 471:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
 472:../../tmk_core_custom/common/action.c ****     }
 473:../../tmk_core_custom/common/action.c ****     else if IS_SYSTEM(code) {
 467               		.loc 2 473 0
 468 007e 9BE5      		ldi r25,lo8(91)
 469 0080 980F      		add r25,r24
 470 0082 9330      		cpi r25,lo8(3)
 471 0084 00F4      		brsh .L48
 474:../../tmk_core_custom/common/action.c ****         host_system_send(0);
 472               		.loc 2 474 0
 473 0086 80E0      		ldi r24,0
 474 0088 90E0      		ldi r25,0
 475               	.LVL42:
 476 008a 0C94 0000 		jmp host_system_send
 477               	.LVL43:
 478               	.L48:
 475:../../tmk_core_custom/common/action.c ****     }
 476:../../tmk_core_custom/common/action.c ****     else if IS_CONSUMER(code) {
 479               		.loc 2 476 0
 480 008e 885A      		subi r24,lo8(-(88))
 481               	.LVL44:
 482 0090 8331      		cpi r24,lo8(19)
 483 0092 00F4      		brsh .L39
 477:../../tmk_core_custom/common/action.c ****         host_consumer_send(0);
 484               		.loc 2 477 0
 485 0094 80E0      		ldi r24,0
 486 0096 90E0      		ldi r25,0
 487               	.LVL45:
 488 0098 0C94 0000 		jmp host_consumer_send
 489               	.LVL46:
 490               	.L39:
 491 009c 0895      		ret
 492               		.cfi_endproc
 493               	.LFE108:
 495               		.section	.text.register_mods,"ax",@progbits
 496               	.global	register_mods
 498               	register_mods:
 499               	.LFB109:
 478:../../tmk_core_custom/common/action.c ****     }
 479:../../tmk_core_custom/common/action.c **** }
 480:../../tmk_core_custom/common/action.c **** 
 481:../../tmk_core_custom/common/action.c **** void register_mods(uint8_t mods)
 482:../../tmk_core_custom/common/action.c **** {
 500               		.loc 2 482 0
 501               		.cfi_startproc
 502               	.LVL47:
 503               	/* prologue: function */
 504               	/* frame size = 0 */
 505               	/* stack size = 0 */
 506               	.L__stack_usage = 0
 483:../../tmk_core_custom/common/action.c ****     if (mods) {
 507               		.loc 2 483 0
 508 0000 8823      		tst r24
 509 0002 01F0      		breq .L60
 484:../../tmk_core_custom/common/action.c ****         add_mods(mods);
 510               		.loc 2 484 0
 511 0004 0E94 0000 		call add_mods
 512               	.LVL48:
 485:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
 513               		.loc 2 485 0
 514 0008 0C94 0000 		jmp send_keyboard_report
 515               	.LVL49:
 516               	.L60:
 517 000c 0895      		ret
 518               		.cfi_endproc
 519               	.LFE109:
 521               		.section	.text.unregister_mods,"ax",@progbits
 522               	.global	unregister_mods
 524               	unregister_mods:
 525               	.LFB110:
 486:../../tmk_core_custom/common/action.c ****     }
 487:../../tmk_core_custom/common/action.c **** }
 488:../../tmk_core_custom/common/action.c **** 
 489:../../tmk_core_custom/common/action.c **** void unregister_mods(uint8_t mods)
 490:../../tmk_core_custom/common/action.c **** {
 526               		.loc 2 490 0
 527               		.cfi_startproc
 528               	.LVL50:
 529               	/* prologue: function */
 530               	/* frame size = 0 */
 531               	/* stack size = 0 */
 532               	.L__stack_usage = 0
 491:../../tmk_core_custom/common/action.c ****     if (mods) {
 533               		.loc 2 491 0
 534 0000 8823      		tst r24
 535 0002 01F0      		breq .L62
 492:../../tmk_core_custom/common/action.c ****         del_mods(mods);
 536               		.loc 2 492 0
 537 0004 0E94 0000 		call del_mods
 538               	.LVL51:
 493:../../tmk_core_custom/common/action.c ****         send_keyboard_report();
 539               		.loc 2 493 0
 540 0008 0C94 0000 		jmp send_keyboard_report
 541               	.LVL52:
 542               	.L62:
 543 000c 0895      		ret
 544               		.cfi_endproc
 545               	.LFE110:
 547               		.section	.text.process_action,"ax",@progbits
 548               	.global	process_action
 550               	process_action:
 551               	.LFB106:
  59:../../tmk_core_custom/common/action.c **** {
 552               		.loc 2 59 0
 553               		.cfi_startproc
 554               	.LVL53:
 555 0000 CF92      		push r12
 556               	.LCFI1:
 557               		.cfi_def_cfa_offset 3
 558               		.cfi_offset 12, -2
 559 0002 DF92      		push r13
 560               	.LCFI2:
 561               		.cfi_def_cfa_offset 4
 562               		.cfi_offset 13, -3
 563 0004 EF92      		push r14
 564               	.LCFI3:
 565               		.cfi_def_cfa_offset 5
 566               		.cfi_offset 14, -4
 567 0006 FF92      		push r15
 568               	.LCFI4:
 569               		.cfi_def_cfa_offset 6
 570               		.cfi_offset 15, -5
 571 0008 0F93      		push r16
 572               	.LCFI5:
 573               		.cfi_def_cfa_offset 7
 574               		.cfi_offset 16, -6
 575 000a 1F93      		push r17
 576               	.LCFI6:
 577               		.cfi_def_cfa_offset 8
 578               		.cfi_offset 17, -7
 579 000c CF93      		push r28
 580               	.LCFI7:
 581               		.cfi_def_cfa_offset 9
 582               		.cfi_offset 28, -8
 583 000e DF93      		push r29
 584               	.LCFI8:
 585               		.cfi_def_cfa_offset 10
 586               		.cfi_offset 29, -9
 587 0010 CDB7      		in r28,__SP_L__
 588 0012 DEB7      		in r29,__SP_H__
 589               	.LCFI9:
 590               		.cfi_def_cfa_register 28
 591 0014 2897      		sbiw r28,8
 592               	.LCFI10:
 593               		.cfi_def_cfa_offset 18
 594 0016 0FB6      		in __tmp_reg__,__SREG__
 595 0018 F894      		cli
 596 001a DEBF      		out __SP_H__,r29
 597 001c 0FBE      		out __SREG__,__tmp_reg__
 598 001e CDBF      		out __SP_L__,r28
 599               	/* prologue: function */
 600               	/* frame size = 8 */
 601               	/* stack size = 16 */
 602               	.L__stack_usage = 16
 603 0020 8C01      		movw r16,r24
  60:../../tmk_core_custom/common/action.c ****     keyevent_t event = record->event;
 604               		.loc 2 60 0
 605 0022 85E0      		ldi r24,lo8(5)
 606               	.LVL54:
 607 0024 F801      		movw r30,r16
 608 0026 DE01      		movw r26,r28
 609 0028 1196      		adiw r26,1
 610               		0:
 611 002a 0190      		ld r0,Z+
 612 002c 0D92      		st X+,r0
 613 002e 8A95      		dec r24
 614 0030 01F4      		brne 0b
 615 0032 F801      		movw r30,r16
 616 0034 4081      		ld r20,Z
 617               	.LVL55:
 618 0036 3181      		ldd r19,Z+1
 619               	.LVL56:
 620 0038 F280      		ldd r15,Z+2
 621               	.LVL57:
  62:../../tmk_core_custom/common/action.c ****     uint8_t tap_count = record->tap.count;
 622               		.loc 2 62 0
 623 003a 2581      		ldd r18,Z+5
 624 003c 2295      		swap r18
 625 003e 2F70      		andi r18,lo8(15)
 626               	.LVL58:
 627               	.LBB8:
 628               	.LBB9:
  49:../../tmk_core_custom/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 629               		.loc 1 49 0
 630 0040 8381      		ldd r24,Z+3
 631 0042 9481      		ldd r25,Z+4
 632 0044 892B      		or r24,r25
 633 0046 01F0      		breq .L139
 634 0048 3F3F      		cpi r19,lo8(-1)
 635 004a 01F4      		brne .L140
 636 004c 81E0      		ldi r24,lo8(1)
 637 004e 4F3F      		cpi r20,lo8(-1)
 638 0050 01F4      		brne .L140
 639 0052 00C0      		rjmp .L65
 640               	.LVL59:
 641               	.L139:
 642 0054 81E0      		ldi r24,lo8(1)
 643               	.LVL60:
 644 0056 00C0      		rjmp .L65
 645               	.L140:
 646 0058 80E0      		ldi r24,0
 647               	.L65:
 648               	.LBE9:
 649               	.LBE8:
  65:../../tmk_core_custom/common/action.c ****     if (IS_NOEVENT(event)) { return; }
 650               		.loc 2 65 0
 651 005a 80FD      		sbrc r24,0
 652 005c 00C0      		rjmp .L64
  67:../../tmk_core_custom/common/action.c ****     action_t action = layer_switch_get_action(event.key);
 653               		.loc 2 67 0
 654 005e 4983      		std Y+1,r20
 655 0060 3A83      		std Y+2,r19
 656 0062 8981      		ldd r24,Y+1
 657 0064 9A81      		ldd r25,Y+2
 658 0066 2F83      		std Y+7,r18
 659               	.LVL61:
 660 0068 0E94 0000 		call layer_switch_get_action
 661               	.LVL62:
  70:../../tmk_core_custom/common/action.c ****     dprint(" layer_state: "); layer_debug();
 662               		.loc 2 70 0
 663 006c 9E83      		std Y+6,r25
 664 006e 8887      		std Y+8,r24
 665 0070 0E94 0000 		call layer_debug
 666               	.LVL63:
  71:../../tmk_core_custom/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 667               		.loc 2 71 0
 668 0074 0E94 0000 		call default_layer_debug
 669               	.LVL64:
  75:../../tmk_core_custom/common/action.c ****     switch (action.kind.id) {
 670               		.loc 2 75 0
 671 0078 4E81      		ldd r20,Y+6
 672 007a E42F      		mov r30,r20
 673               	.LVL65:
 674 007c E295      		swap r30
 675 007e EF70      		andi r30,lo8(15)
 676 0080 F0E0      		ldi r31,0
 677 0082 E050      		subi r30,lo8(-(gs(.L70)))
 678 0084 F040      		sbci r31,hi8(-(gs(.L70)))
 679 0086 2F81      		ldd r18,Y+7
 680 0088 6885      		ldd r22,Y+8
 681 008a 0C94 0000 		jmp __tablejump2__
 682               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 683               		.p2align	1
 684               	.L70:
 685 0000 0000      		.word gs(.L69)
 686 0002 0000      		.word gs(.L69)
 687 0004 0000      		.word gs(.L71)
 688 0006 0000      		.word gs(.L71)
 689 0008 0000      		.word gs(.L72)
 690 000a 0000      		.word gs(.L73)
 691 000c 0000      		.word gs(.L64)
 692 000e 0000      		.word gs(.L64)
 693 0010 0000      		.word gs(.L74)
 694 0012 0000      		.word gs(.L64)
 695 0014 0000      		.word gs(.L75)
 696 0016 0000      		.word gs(.L75)
 697 0018 0000      		.word gs(.L76)
 698 001a 0000      		.word gs(.L77)
 699 001c 0000      		.word gs(.L64)
 700 001e 0000      		.word gs(.L78)
 701               		.section	.text.process_action
 702               	.L69:
 703               	.LBB10:
  80:../../tmk_core_custom/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 704               		.loc 2 80 0
 705 008e 842F      		mov r24,r20
 706 0090 807F      		andi r24,lo8(-16)
 707 0092 142F      		mov r17,r20
 708 0094 1F70      		andi r17,lo8(15)
 709 0096 8823      		tst r24
 710 0098 01F0      		breq .L80
  80:../../tmk_core_custom/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 711               		.loc 2 80 0 is_stmt 0 discriminator 2
 712 009a 1295      		swap r17
 713 009c 107F      		andi r17,lo8(-16)
 714               	.L80:
 715               	.LVL66:
  82:../../tmk_core_custom/common/action.c ****                 if (event.pressed) {
 716               		.loc 2 82 0 is_stmt 1 discriminator 3
 717 009e FF20      		tst r15
 718 00a0 01F0      		breq .L81
  83:../../tmk_core_custom/common/action.c ****                     if (mods) {
 719               		.loc 2 83 0
 720 00a2 1123      		tst r17
 721 00a4 01F4      		brne .+2
 722 00a6 00C0      		rjmp .L176
  84:../../tmk_core_custom/common/action.c ****                         add_weak_mods(mods);
 723               		.loc 2 84 0
 724 00a8 812F      		mov r24,r17
 725 00aa 6887      		std Y+8,r22
 726 00ac 0E94 0000 		call add_weak_mods
 727               	.LVL67:
  85:../../tmk_core_custom/common/action.c ****                         send_keyboard_report();
 728               		.loc 2 85 0
 729 00b0 0E94 0000 		call send_keyboard_report
 730               	.LVL68:
 731 00b4 6885      		ldd r22,Y+8
 732 00b6 00C0      		rjmp .L176
 733               	.L81:
 734               	.LVL69:
  89:../../tmk_core_custom/common/action.c ****                     unregister_code(action.key.code);
 735               		.loc 2 89 0
 736 00b8 862F      		mov r24,r22
 737 00ba 0E94 0000 		call unregister_code
 738               	.LVL70:
  90:../../tmk_core_custom/common/action.c ****                     if (mods) {
 739               		.loc 2 90 0
 740 00be 1123      		tst r17
 741 00c0 01F4      		brne .+2
 742 00c2 00C0      		rjmp .L64
  91:../../tmk_core_custom/common/action.c ****                         del_weak_mods(mods);
 743               		.loc 2 91 0
 744 00c4 812F      		mov r24,r17
 745 00c6 0E94 0000 		call del_weak_mods
 746               	.LVL71:
 747               	/* epilogue start */
 748               	.LBE10:
 343:../../tmk_core_custom/common/action.c **** }
 749               		.loc 2 343 0
 750 00ca 2896      		adiw r28,8
 751 00cc 0FB6      		in __tmp_reg__,__SREG__
 752 00ce F894      		cli
 753 00d0 DEBF      		out __SP_H__,r29
 754 00d2 0FBE      		out __SREG__,__tmp_reg__
 755 00d4 CDBF      		out __SP_L__,r28
 756 00d6 DF91      		pop r29
 757 00d8 CF91      		pop r28
 758 00da 1F91      		pop r17
 759               	.LVL72:
 760 00dc 0F91      		pop r16
 761               	.LVL73:
 762 00de FF90      		pop r15
 763               	.LVL74:
 764 00e0 EF90      		pop r14
 765 00e2 DF90      		pop r13
 766 00e4 CF90      		pop r12
 767               	.LBB11:
  92:../../tmk_core_custom/common/action.c ****                         send_keyboard_report();
 768               		.loc 2 92 0
 769 00e6 0C94 0000 		jmp send_keyboard_report
 770               	.LVL75:
 771               	.L71:
 772               	.LBE11:
 773               	.LBB12:
 101:../../tmk_core_custom/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 774               		.loc 2 101 0
 775 00ea 342F      		mov r19,r20
 776 00ec 307F      		andi r19,lo8(-16)
 777 00ee 842F      		mov r24,r20
 778 00f0 8F70      		andi r24,lo8(15)
 779 00f2 3032      		cpi r19,lo8(32)
 780 00f4 01F0      		breq .L85
 101:../../tmk_core_custom/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 781               		.loc 2 101 0 is_stmt 0 discriminator 2
 782 00f6 8295      		swap r24
 783 00f8 807F      		andi r24,lo8(-16)
 784               	.L85:
 785               	.LVL76:
 103:../../tmk_core_custom/common/action.c ****                 switch (action.layer_tap.code) {
 786               		.loc 2 103 0 is_stmt 1 discriminator 3
 787 00fa 6623      		tst r22
 788               	.LVL77:
 789 00fc 01F0      		breq .L87
 790 00fe 6130      		cpi r22,lo8(1)
 791 0100 01F0      		breq .L88
 792 0102 00C0      		rjmp .L184
 793               	.L87:
 107:../../tmk_core_custom/common/action.c ****                         if (event.pressed) {
 794               		.loc 2 107 0
 795 0104 FF20      		tst r15
 796 0106 01F0      		breq .L89
 108:../../tmk_core_custom/common/action.c ****                             if (tap_count == 0) {
 797               		.loc 2 108 0
 798 0108 2223      		tst r18
 799 010a 01F0      		breq .L175
 111:../../tmk_core_custom/common/action.c ****                             else if (tap_count == 1) {
 800               		.loc 2 111 0
 801 010c 2130      		cpi r18,lo8(1)
 802 010e 01F4      		brne .L175
 803               	/* epilogue start */
 804               	.LBE12:
 343:../../tmk_core_custom/common/action.c **** }
 805               		.loc 2 343 0
 806 0110 2896      		adiw r28,8
 807 0112 0FB6      		in __tmp_reg__,__SREG__
 808 0114 F894      		cli
 809 0116 DEBF      		out __SP_H__,r29
 810 0118 0FBE      		out __SREG__,__tmp_reg__
 811 011a CDBF      		out __SP_L__,r28
 812 011c DF91      		pop r29
 813 011e CF91      		pop r28
 814 0120 1F91      		pop r17
 815 0122 0F91      		pop r16
 816               	.LVL78:
 817 0124 FF90      		pop r15
 818               	.LVL79:
 819 0126 EF90      		pop r14
 820 0128 DF90      		pop r13
 821 012a CF90      		pop r12
 822               	.LBB13:
 113:../../tmk_core_custom/common/action.c ****                                 set_oneshot_mods(mods);
 823               		.loc 2 113 0
 824 012c 0C94 0000 		jmp set_oneshot_mods
 825               	.LVL80:
 826               	.L89:
 119:../../tmk_core_custom/common/action.c ****                             if (tap_count == 0) {
 827               		.loc 2 119 0
 828 0130 2223      		tst r18
 829 0132 01F0      		breq .L173
 123:../../tmk_core_custom/common/action.c ****                             else if (tap_count == 1) {
 830               		.loc 2 123 0
 831 0134 2130      		cpi r18,lo8(1)
 832 0136 01F4      		brne .+2
 833 0138 00C0      		rjmp .L64
 834               	.L173:
 127:../../tmk_core_custom/common/action.c ****                                 clear_oneshot_mods();
 835               		.loc 2 127 0
 836 013a 8E83      		std Y+6,r24
 837 013c 0E94 0000 		call clear_oneshot_mods
 838               	.LVL81:
 128:../../tmk_core_custom/common/action.c ****                                 unregister_mods(mods);
 839               		.loc 2 128 0
 840 0140 8E81      		ldd r24,Y+6
 841 0142 00C0      		rjmp .L178
 842               	.LVL82:
 843               	.L88:
 134:../../tmk_core_custom/common/action.c ****                         if (event.pressed) {
 844               		.loc 2 134 0
 845 0144 FF20      		tst r15
 846 0146 01F0      		breq .L94
 135:../../tmk_core_custom/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 847               		.loc 2 135 0
 848 0148 2630      		cpi r18,lo8(6)
 849 014a 00F0      		brlo .+2
 850 014c 00C0      		rjmp .L64
 851 014e 00C0      		rjmp .L175
 852               	.L94:
 139:../../tmk_core_custom/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 853               		.loc 2 139 0
 854 0150 2530      		cpi r18,lo8(5)
 855 0152 00F0      		brlo .+2
 856 0154 00C0      		rjmp .L64
 857 0156 00C0      		rjmp .L178
 858               	.L184:
 145:../../tmk_core_custom/common/action.c ****                         if (event.pressed) {
 859               		.loc 2 145 0
 860 0158 FF20      		tst r15
 861 015a 01F0      		breq .L95
 146:../../tmk_core_custom/common/action.c ****                             if (tap_count > 0) {
 862               		.loc 2 146 0
 863 015c 2223      		tst r18
 864 015e 01F0      		breq .L175
 147:../../tmk_core_custom/common/action.c ****                                 if (record->tap.interrupted) {
 865               		.loc 2 147 0
 866 0160 F801      		movw r30,r16
 867 0162 9581      		ldd r25,Z+5
 868 0164 90FF      		sbrs r25,0
 869 0166 00C0      		rjmp .L176
 150:../../tmk_core_custom/common/action.c ****                                     record->tap.count = 0;
 870               		.loc 2 150 0
 871 0168 9F70      		andi r25,lo8(15)
 872 016a 9583      		std Z+5,r25
 873               	.LVL83:
 874               	.L175:
 875               	/* epilogue start */
 876               	.LBE13:
 343:../../tmk_core_custom/common/action.c **** }
 877               		.loc 2 343 0
 878 016c 2896      		adiw r28,8
 879 016e 0FB6      		in __tmp_reg__,__SREG__
 880 0170 F894      		cli
 881 0172 DEBF      		out __SP_H__,r29
 882 0174 0FBE      		out __SREG__,__tmp_reg__
 883 0176 CDBF      		out __SP_L__,r28
 884 0178 DF91      		pop r29
 885 017a CF91      		pop r28
 886 017c 1F91      		pop r17
 887 017e 0F91      		pop r16
 888               	.LVL84:
 889 0180 FF90      		pop r15
 890               	.LVL85:
 891 0182 EF90      		pop r14
 892 0184 DF90      		pop r13
 893 0186 CF90      		pop r12
 894               	.LBB14:
 151:../../tmk_core_custom/common/action.c ****                                     register_mods(mods);
 895               		.loc 2 151 0
 896 0188 0C94 0000 		jmp register_mods
 897               	.LVL86:
 898               	.L95:
 161:../../tmk_core_custom/common/action.c ****                             if (tap_count > 0) {
 899               		.loc 2 161 0
 900 018c 2223      		tst r18
 901 018e 01F4      		brne .+2
 902 0190 00C0      		rjmp .L178
 903 0192 00C0      		rjmp .L177
 904               	.LVL87:
 905               	.L72:
 906               	.LBE14:
 177:../../tmk_core_custom/common/action.c ****             switch (action.usage.page) {
 907               		.loc 2 177 0
 908 0194 242F      		mov r18,r20
 909 0196 2695      		lsr r18
 910 0198 2695      		lsr r18
 911 019a 2370      		andi r18,lo8(3)
 912 019c 30E0      		ldi r19,0
 913 019e 2115      		cp r18,__zero_reg__
 914 01a0 3105      		cpc r19,__zero_reg__
 915 01a2 01F0      		breq .L99
 916 01a4 2130      		cpi r18,1
 917 01a6 3105      		cpc r19,__zero_reg__
 918 01a8 01F0      		breq .L100
 919 01aa 00C0      		rjmp .L64
 920               	.L99:
 179:../../tmk_core_custom/common/action.c ****                     if (event.pressed) {
 921               		.loc 2 179 0
 922 01ac FF20      		tst r15
 923 01ae 01F0      		breq .L101
 924               	.LVL88:
 180:../../tmk_core_custom/common/action.c ****                         host_system_send(action.usage.code);
 925               		.loc 2 180 0
 926 01b0 862F      		mov r24,r22
 927 01b2 942F      		mov r25,r20
 928 01b4 9370      		andi r25,lo8(3)
 929 01b6 00C0      		rjmp .L179
 930               	.LVL89:
 931               	.L101:
 182:../../tmk_core_custom/common/action.c ****                         host_system_send(0);
 932               		.loc 2 182 0
 933 01b8 80E0      		ldi r24,0
 934 01ba 90E0      		ldi r25,0
 935               	.LVL90:
 936               	.L179:
 937               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 938               		.loc 2 343 0
 939 01bc 2896      		adiw r28,8
 940 01be 0FB6      		in __tmp_reg__,__SREG__
 941 01c0 F894      		cli
 942 01c2 DEBF      		out __SP_H__,r29
 943 01c4 0FBE      		out __SREG__,__tmp_reg__
 944 01c6 CDBF      		out __SP_L__,r28
 945 01c8 DF91      		pop r29
 946 01ca CF91      		pop r28
 947 01cc 1F91      		pop r17
 948 01ce 0F91      		pop r16
 949               	.LVL91:
 950 01d0 FF90      		pop r15
 951               	.LVL92:
 952 01d2 EF90      		pop r14
 953 01d4 DF90      		pop r13
 954 01d6 CF90      		pop r12
 182:../../tmk_core_custom/common/action.c ****                         host_system_send(0);
 955               		.loc 2 182 0
 956 01d8 0C94 0000 		jmp host_system_send
 957               	.LVL93:
 958               	.L100:
 186:../../tmk_core_custom/common/action.c ****                     if (event.pressed) {
 959               		.loc 2 186 0
 960 01dc FF20      		tst r15
 961 01de 01F0      		breq .L102
 962               	.LVL94:
 187:../../tmk_core_custom/common/action.c ****                         host_consumer_send(action.usage.code);
 963               		.loc 2 187 0
 964 01e0 862F      		mov r24,r22
 965 01e2 942F      		mov r25,r20
 966 01e4 9370      		andi r25,lo8(3)
 967 01e6 00C0      		rjmp .L180
 968               	.LVL95:
 969               	.L102:
 189:../../tmk_core_custom/common/action.c ****                         host_consumer_send(0);
 970               		.loc 2 189 0
 971 01e8 80E0      		ldi r24,0
 972 01ea 90E0      		ldi r25,0
 973               	.LVL96:
 974               	.L180:
 975               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 976               		.loc 2 343 0
 977 01ec 2896      		adiw r28,8
 978 01ee 0FB6      		in __tmp_reg__,__SREG__
 979 01f0 F894      		cli
 980 01f2 DEBF      		out __SP_H__,r29
 981 01f4 0FBE      		out __SREG__,__tmp_reg__
 982 01f6 CDBF      		out __SP_L__,r28
 983 01f8 DF91      		pop r29
 984 01fa CF91      		pop r28
 985 01fc 1F91      		pop r17
 986 01fe 0F91      		pop r16
 987               	.LVL97:
 988 0200 FF90      		pop r15
 989               	.LVL98:
 990 0202 EF90      		pop r14
 991 0204 DF90      		pop r13
 992 0206 CF90      		pop r12
 189:../../tmk_core_custom/common/action.c ****                         host_consumer_send(0);
 993               		.loc 2 189 0
 994 0208 0C94 0000 		jmp host_consumer_send
 995               	.LVL99:
 996               	.L73:
 199:../../tmk_core_custom/common/action.c ****                 mousekey_on(action.key.code);
 997               		.loc 2 199 0
 998 020c 862F      		mov r24,r22
 198:../../tmk_core_custom/common/action.c ****             if (event.pressed) {
 999               		.loc 2 198 0
 1000 020e FF20      		tst r15
 1001 0210 01F0      		breq .L103
 199:../../tmk_core_custom/common/action.c ****                 mousekey_on(action.key.code);
 1002               		.loc 2 199 0
 1003 0212 0E94 0000 		call mousekey_on
 1004               	.LVL100:
 1005 0216 00C0      		rjmp .L181
 1006               	.LVL101:
 1007               	.L103:
 202:../../tmk_core_custom/common/action.c ****                 mousekey_off(action.key.code);
 1008               		.loc 2 202 0
 1009 0218 0E94 0000 		call mousekey_off
 1010               	.LVL102:
 1011               	.L181:
 1012               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 1013               		.loc 2 343 0
 1014 021c 2896      		adiw r28,8
 1015 021e 0FB6      		in __tmp_reg__,__SREG__
 1016 0220 F894      		cli
 1017 0222 DEBF      		out __SP_H__,r29
 1018 0224 0FBE      		out __SREG__,__tmp_reg__
 1019 0226 CDBF      		out __SP_L__,r28
 1020 0228 DF91      		pop r29
 1021 022a CF91      		pop r28
 1022 022c 1F91      		pop r17
 1023 022e 0F91      		pop r16
 1024               	.LVL103:
 1025 0230 FF90      		pop r15
 1026               	.LVL104:
 1027 0232 EF90      		pop r14
 1028 0234 DF90      		pop r13
 1029 0236 CF90      		pop r12
 203:../../tmk_core_custom/common/action.c ****                 mousekey_send();
 1030               		.loc 2 203 0
 1031 0238 0C94 0000 		jmp mousekey_send
 1032               	.LVL105:
 1033               	.L74:
 209:../../tmk_core_custom/common/action.c ****             if (action.layer_bitop.on == 0) {
 1034               		.loc 2 209 0
 1035 023c 842F      		mov r24,r20
 1036 023e 8370      		andi r24,lo8(3)
 1037 0240 01F0      		breq .+2
 1038 0242 00C0      		rjmp .L104
 211:../../tmk_core_custom/common/action.c ****                 if (!event.pressed) {
 1039               		.loc 2 211 0
 1040 0244 F110      		cpse r15,__zero_reg__
 1041 0246 00C0      		rjmp .L64
 1042               	.LVL106:
 1043               	.LBB15:
 212:../../tmk_core_custom/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1044               		.loc 2 212 0
 1045 0248 262F      		mov r18,r22
 1046 024a 2295      		swap r18
 1047 024c 2695      		lsr r18
 1048 024e 2770      		andi r18,lo8(7)
 1049 0250 220F      		lsl r18
 1050 0252 220F      		lsl r18
 213:../../tmk_core_custom/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1051               		.loc 2 213 0
 1052 0254 862F      		mov r24,r22
 1053 0256 8F70      		andi r24,lo8(15)
 1054 0258 C82E      		mov r12,r24
 1055 025a D12C      		mov r13,__zero_reg__
 1056 025c E12C      		mov r14,__zero_reg__
 1057 025e F12C      		mov r15,__zero_reg__
 1058 0260 022E      		mov r0,r18
 1059 0262 00C0      		rjmp 2f
 1060               		1:
 1061 0264 CC0C      		lsl r12
 1062 0266 DD1C      		rol r13
 1063 0268 EE1C      		rol r14
 1064 026a FF1C      		rol r15
 1065               		2:
 1066 026c 0A94      		dec r0
 1067 026e 02F4      		brpl 1b
 1068               	.LVL107:
 214:../../tmk_core_custom/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1069               		.loc 2 214 0
 1070 0270 64FF      		sbrs r22,4
 1071 0272 00C0      		rjmp .L141
 214:../../tmk_core_custom/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1072               		.loc 2 214 0 is_stmt 0 discriminator 1
 1073 0274 6FE0      		ldi r22,lo8(15)
 1074 0276 70E0      		ldi r23,0
 1075 0278 80E0      		ldi r24,0
 1076 027a 90E0      		ldi r25,0
 1077               	.LVL108:
 1078 027c 00C0      		rjmp 2f
 1079               		1:
 1080 027e 660F      		lsl r22
 1081 0280 771F      		rol r23
 1082 0282 881F      		rol r24
 1083 0284 991F      		rol r25
 1084               		2:
 1085 0286 2A95      		dec r18
 1086 0288 02F4      		brpl 1b
 1087 028a 6095      		com r22
 1088 028c 7095      		com r23
 1089 028e 8095      		com r24
 1090 0290 9095      		com r25
 1091 0292 00C0      		rjmp .L105
 1092               	.LVL109:
 1093               	.L141:
 214:../../tmk_core_custom/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1094               		.loc 2 214 0
 1095 0294 60E0      		ldi r22,0
 1096 0296 70E0      		ldi r23,0
 1097 0298 CB01      		movw r24,r22
 1098               	.LVL110:
 1099               	.L105:
 215:../../tmk_core_custom/common/action.c ****                     switch (action.layer_bitop.op) {
 1100               		.loc 2 215 0 is_stmt 1 discriminator 3
 1101 029a 242F      		mov r18,r20
 1102 029c 2695      		lsr r18
 1103 029e 2695      		lsr r18
 1104 02a0 2370      		andi r18,lo8(3)
 1105 02a2 422F      		mov r20,r18
 1106               	.LVL111:
 1107 02a4 50E0      		ldi r21,0
 1108 02a6 4230      		cpi r20,2
 1109 02a8 5105      		cpc r21,__zero_reg__
 1110 02aa 01F0      		breq .L107
 1111 02ac 4330      		cpi r20,3
 1112 02ae 5105      		cpc r21,__zero_reg__
 1113 02b0 01F0      		breq .L108
 1114 02b2 6C29      		or r22,r12
 1115 02b4 7D29      		or r23,r13
 1116 02b6 8E29      		or r24,r14
 1117 02b8 9F29      		or r25,r15
 1118               	.LVL112:
 1119 02ba 4130      		cpi r20,1
 1120 02bc 5105      		cpc r21,__zero_reg__
 1121 02be 01F0      		breq .L182
 1122               	/* epilogue start */
 1123               	.LBE15:
 343:../../tmk_core_custom/common/action.c **** }
 1124               		.loc 2 343 0 discriminator 3
 1125 02c0 2896      		adiw r28,8
 1126               	.LVL113:
 1127 02c2 0FB6      		in __tmp_reg__,__SREG__
 1128 02c4 F894      		cli
 1129 02c6 DEBF      		out __SP_H__,r29
 1130 02c8 0FBE      		out __SREG__,__tmp_reg__
 1131 02ca CDBF      		out __SP_L__,r28
 1132 02cc DF91      		pop r29
 1133 02ce CF91      		pop r28
 1134               	.LVL114:
 1135 02d0 1F91      		pop r17
 1136 02d2 0F91      		pop r16
 1137               	.LVL115:
 1138 02d4 FF90      		pop r15
 1139               	.LVL116:
 1140 02d6 EF90      		pop r14
 1141 02d8 DF90      		pop r13
 1142 02da CF90      		pop r12
 1143               	.LVL117:
 1144               	.LBB16:
 216:../../tmk_core_custom/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1145               		.loc 2 216 0 discriminator 3
 1146 02dc 0C94 0000 		jmp default_layer_and
 1147               	.LVL118:
 1148               	.L107:
 218:../../tmk_core_custom/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 1149               		.loc 2 218 0
 1150 02e0 6C29      		or r22,r12
 1151 02e2 7D29      		or r23,r13
 1152 02e4 8E29      		or r24,r14
 1153 02e6 9F29      		or r25,r15
 1154               	.LVL119:
 1155               	/* epilogue start */
 1156               	.LBE16:
 343:../../tmk_core_custom/common/action.c **** }
 1157               		.loc 2 343 0
 1158 02e8 2896      		adiw r28,8
 1159               	.LVL120:
 1160 02ea 0FB6      		in __tmp_reg__,__SREG__
 1161 02ec F894      		cli
 1162 02ee DEBF      		out __SP_H__,r29
 1163 02f0 0FBE      		out __SREG__,__tmp_reg__
 1164 02f2 CDBF      		out __SP_L__,r28
 1165 02f4 DF91      		pop r29
 1166 02f6 CF91      		pop r28
 1167               	.LVL121:
 1168 02f8 1F91      		pop r17
 1169 02fa 0F91      		pop r16
 1170               	.LVL122:
 1171 02fc FF90      		pop r15
 1172               	.LVL123:
 1173 02fe EF90      		pop r14
 1174 0300 DF90      		pop r13
 1175 0302 CF90      		pop r12
 1176               	.LVL124:
 1177               	.LBB17:
 218:../../tmk_core_custom/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 1178               		.loc 2 218 0
 1179 0304 0C94 0000 		jmp default_layer_xor
 1180               	.LVL125:
 1181               	.L108:
 219:../../tmk_core_custom/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1182               		.loc 2 219 0
 1183 0308 0E94 0000 		call default_layer_and
 1184               	.LVL126:
 1185 030c C701      		movw r24,r14
 1186 030e B601      		movw r22,r12
 1187               	.L182:
 1188               	/* epilogue start */
 1189               	.LBE17:
 343:../../tmk_core_custom/common/action.c **** }
 1190               		.loc 2 343 0
 1191 0310 2896      		adiw r28,8
 1192 0312 0FB6      		in __tmp_reg__,__SREG__
 1193 0314 F894      		cli
 1194 0316 DEBF      		out __SP_H__,r29
 1195 0318 0FBE      		out __SREG__,__tmp_reg__
 1196 031a CDBF      		out __SP_L__,r28
 1197 031c DF91      		pop r29
 1198 031e CF91      		pop r28
 1199 0320 1F91      		pop r17
 1200 0322 0F91      		pop r16
 1201               	.LVL127:
 1202 0324 FF90      		pop r15
 1203               	.LVL128:
 1204 0326 EF90      		pop r14
 1205 0328 DF90      		pop r13
 1206 032a CF90      		pop r12
 1207               	.LVL129:
 1208               	.LBB18:
 219:../../tmk_core_custom/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1209               		.loc 2 219 0
 1210 032c 0C94 0000 		jmp default_layer_or
 1211               	.LVL130:
 1212               	.L104:
 1213               	.LBE18:
 224:../../tmk_core_custom/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1214               		.loc 2 224 0
 1215 0330 FF20      		tst r15
 1216 0332 01F0      		breq .L110
 224:../../tmk_core_custom/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1217               		.loc 2 224 0 is_stmt 0 discriminator 1
 1218 0334 842F      		mov r24,r20
 1219 0336 8170      		andi r24,lo8(1)
 1220 0338 00C0      		rjmp .L111
 1221               	.L110:
 224:../../tmk_core_custom/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1222               		.loc 2 224 0 discriminator 2
 1223 033a 8695      		lsr r24
 1224               	.L111:
 224:../../tmk_core_custom/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1225               		.loc 2 224 0 discriminator 3
 1226 033c 8823      		tst r24
 1227 033e 01F4      		brne .+2
 1228 0340 00C0      		rjmp .L64
 1229               	.LVL131:
 1230               	.LBB19:
 226:../../tmk_core_custom/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1231               		.loc 2 226 0 is_stmt 1
 1232 0342 262F      		mov r18,r22
 1233 0344 2295      		swap r18
 1234 0346 2695      		lsr r18
 1235 0348 2770      		andi r18,lo8(7)
 1236 034a 220F      		lsl r18
 1237 034c 220F      		lsl r18
 227:../../tmk_core_custom/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1238               		.loc 2 227 0
 1239 034e 862F      		mov r24,r22
 1240 0350 8F70      		andi r24,lo8(15)
 1241 0352 C82E      		mov r12,r24
 1242 0354 D12C      		mov r13,__zero_reg__
 1243 0356 E12C      		mov r14,__zero_reg__
 1244 0358 F12C      		mov r15,__zero_reg__
 1245 035a 022E      		mov r0,r18
 1246 035c 00C0      		rjmp 2f
 1247               		1:
 1248 035e CC0C      		lsl r12
 1249 0360 DD1C      		rol r13
 1250 0362 EE1C      		rol r14
 1251 0364 FF1C      		rol r15
 1252               		2:
 1253 0366 0A94      		dec r0
 1254 0368 02F4      		brpl 1b
 1255               	.LVL132:
 228:../../tmk_core_custom/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1256               		.loc 2 228 0
 1257 036a 64FF      		sbrs r22,4
 1258 036c 00C0      		rjmp .L142
 228:../../tmk_core_custom/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1259               		.loc 2 228 0 is_stmt 0 discriminator 1
 1260 036e 6FE0      		ldi r22,lo8(15)
 1261 0370 70E0      		ldi r23,0
 1262 0372 80E0      		ldi r24,0
 1263 0374 90E0      		ldi r25,0
 1264               	.LVL133:
 1265 0376 00C0      		rjmp 2f
 1266               		1:
 1267 0378 660F      		lsl r22
 1268 037a 771F      		rol r23
 1269 037c 881F      		rol r24
 1270 037e 991F      		rol r25
 1271               		2:
 1272 0380 2A95      		dec r18
 1273 0382 02F4      		brpl 1b
 1274 0384 6095      		com r22
 1275 0386 7095      		com r23
 1276 0388 8095      		com r24
 1277 038a 9095      		com r25
 1278 038c 00C0      		rjmp .L112
 1279               	.LVL134:
 1280               	.L142:
 228:../../tmk_core_custom/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1281               		.loc 2 228 0
 1282 038e 60E0      		ldi r22,0
 1283 0390 70E0      		ldi r23,0
 1284 0392 CB01      		movw r24,r22
 1285               	.LVL135:
 1286               	.L112:
 229:../../tmk_core_custom/common/action.c ****                     switch (action.layer_bitop.op) {
 1287               		.loc 2 229 0 is_stmt 1 discriminator 3
 1288 0394 242F      		mov r18,r20
 1289 0396 2695      		lsr r18
 1290 0398 2695      		lsr r18
 1291 039a 2370      		andi r18,lo8(3)
 1292 039c 422F      		mov r20,r18
 1293               	.LVL136:
 1294 039e 50E0      		ldi r21,0
 1295 03a0 4230      		cpi r20,2
 1296 03a2 5105      		cpc r21,__zero_reg__
 1297 03a4 01F0      		breq .L114
 1298 03a6 4330      		cpi r20,3
 1299 03a8 5105      		cpc r21,__zero_reg__
 1300 03aa 01F0      		breq .L115
 1301 03ac 6C29      		or r22,r12
 1302 03ae 7D29      		or r23,r13
 1303 03b0 8E29      		or r24,r14
 1304 03b2 9F29      		or r25,r15
 1305               	.LVL137:
 1306 03b4 4130      		cpi r20,1
 1307 03b6 5105      		cpc r21,__zero_reg__
 1308 03b8 01F0      		breq .L183
 1309               	/* epilogue start */
 1310               	.LBE19:
 343:../../tmk_core_custom/common/action.c **** }
 1311               		.loc 2 343 0 discriminator 3
 1312 03ba 2896      		adiw r28,8
 1313               	.LVL138:
 1314 03bc 0FB6      		in __tmp_reg__,__SREG__
 1315 03be F894      		cli
 1316 03c0 DEBF      		out __SP_H__,r29
 1317 03c2 0FBE      		out __SREG__,__tmp_reg__
 1318 03c4 CDBF      		out __SP_L__,r28
 1319 03c6 DF91      		pop r29
 1320 03c8 CF91      		pop r28
 1321               	.LVL139:
 1322 03ca 1F91      		pop r17
 1323 03cc 0F91      		pop r16
 1324               	.LVL140:
 1325 03ce FF90      		pop r15
 1326               	.LVL141:
 1327 03d0 EF90      		pop r14
 1328 03d2 DF90      		pop r13
 1329 03d4 CF90      		pop r12
 1330               	.LVL142:
 1331               	.LBB20:
 230:../../tmk_core_custom/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1332               		.loc 2 230 0 discriminator 3
 1333 03d6 0C94 0000 		jmp layer_and
 1334               	.LVL143:
 1335               	.L114:
 232:../../tmk_core_custom/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1336               		.loc 2 232 0
 1337 03da 6C29      		or r22,r12
 1338 03dc 7D29      		or r23,r13
 1339 03de 8E29      		or r24,r14
 1340 03e0 9F29      		or r25,r15
 1341               	.LVL144:
 1342               	/* epilogue start */
 1343               	.LBE20:
 343:../../tmk_core_custom/common/action.c **** }
 1344               		.loc 2 343 0
 1345 03e2 2896      		adiw r28,8
 1346               	.LVL145:
 1347 03e4 0FB6      		in __tmp_reg__,__SREG__
 1348 03e6 F894      		cli
 1349 03e8 DEBF      		out __SP_H__,r29
 1350 03ea 0FBE      		out __SREG__,__tmp_reg__
 1351 03ec CDBF      		out __SP_L__,r28
 1352 03ee DF91      		pop r29
 1353 03f0 CF91      		pop r28
 1354               	.LVL146:
 1355 03f2 1F91      		pop r17
 1356 03f4 0F91      		pop r16
 1357               	.LVL147:
 1358 03f6 FF90      		pop r15
 1359               	.LVL148:
 1360 03f8 EF90      		pop r14
 1361 03fa DF90      		pop r13
 1362 03fc CF90      		pop r12
 1363               	.LVL149:
 1364               	.LBB21:
 232:../../tmk_core_custom/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1365               		.loc 2 232 0
 1366 03fe 0C94 0000 		jmp layer_xor
 1367               	.LVL150:
 1368               	.L115:
 233:../../tmk_core_custom/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1369               		.loc 2 233 0
 1370 0402 0E94 0000 		call layer_and
 1371               	.LVL151:
 1372 0406 C701      		movw r24,r14
 1373 0408 B601      		movw r22,r12
 1374               	.L183:
 1375               	/* epilogue start */
 1376               	.LBE21:
 343:../../tmk_core_custom/common/action.c **** }
 1377               		.loc 2 343 0
 1378 040a 2896      		adiw r28,8
 1379 040c 0FB6      		in __tmp_reg__,__SREG__
 1380 040e F894      		cli
 1381 0410 DEBF      		out __SP_H__,r29
 1382 0412 0FBE      		out __SREG__,__tmp_reg__
 1383 0414 CDBF      		out __SP_L__,r28
 1384 0416 DF91      		pop r29
 1385 0418 CF91      		pop r28
 1386 041a 1F91      		pop r17
 1387 041c 0F91      		pop r16
 1388               	.LVL152:
 1389 041e FF90      		pop r15
 1390               	.LVL153:
 1391 0420 EF90      		pop r14
 1392 0422 DF90      		pop r13
 1393 0424 CF90      		pop r12
 1394               	.LVL154:
 1395               	.LBB22:
 233:../../tmk_core_custom/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1396               		.loc 2 233 0
 1397 0426 0C94 0000 		jmp layer_or
 1398               	.LVL155:
 1399               	.L75:
 1400               	.LBE22:
 241:../../tmk_core_custom/common/action.c ****             switch (action.layer_tap.code) {
 1401               		.loc 2 241 0
 1402 042a 603F      		cpi r22,lo8(-16)
 1403 042c 01F0      		breq .L118
 1404               	.LVL156:
 1405 042e 00F4      		brsh .L119
 1406 0430 603E      		cpi r22,lo8(-32)
 1407 0432 00F4      		brsh .L171
 1408 0434 00C0      		rjmp .L117
 1409               	.L119:
 1410 0436 623F      		cpi r22,lo8(-14)
 1411 0438 01F4      		brne .+2
 1412 043a 00C0      		rjmp .L121
 1413 043c 00F0      		brlo .L122
 1414 043e 633F      		cpi r22,lo8(-13)
 1415 0440 01F4      		brne .+2
 1416 0442 00C0      		rjmp .L123
 1417 0444 00C0      		rjmp .L117
 1418               	.L171:
 1419 0446 162F      		mov r17,r22
 1420 0448 1F70      		andi r17,lo8(15)
 1421 044a 842F      		mov r24,r20
 1422 044c 8F71      		andi r24,lo8(31)
 244:../../tmk_core_custom/common/action.c ****                     if (event.pressed) {
 1423               		.loc 2 244 0
 1424 044e FF20      		tst r15
 1425 0450 01F0      		breq .L124
 245:../../tmk_core_custom/common/action.c ****                         layer_on(action.layer_tap.val);
 1426               		.loc 2 245 0
 1427 0452 0E94 0000 		call layer_on
 1428               	.LVL157:
 246:../../tmk_core_custom/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1429               		.loc 2 246 0
 1430 0456 812F      		mov r24,r17
 1431 0458 00C0      		rjmp .L175
 1432               	.LVL158:
 1433               	.L124:
 248:../../tmk_core_custom/common/action.c ****                         layer_off(action.layer_tap.val);
 1434               		.loc 2 248 0
 1435 045a 0E94 0000 		call layer_off
 1436               	.LVL159:
 249:../../tmk_core_custom/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1437               		.loc 2 249 0
 1438 045e 812F      		mov r24,r17
 1439               	.LVL160:
 1440               	.L178:
 1441               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 1442               		.loc 2 343 0
 1443 0460 2896      		adiw r28,8
 1444 0462 0FB6      		in __tmp_reg__,__SREG__
 1445 0464 F894      		cli
 1446 0466 DEBF      		out __SP_H__,r29
 1447 0468 0FBE      		out __SREG__,__tmp_reg__
 1448 046a CDBF      		out __SP_L__,r28
 1449 046c DF91      		pop r29
 1450 046e CF91      		pop r28
 1451 0470 1F91      		pop r17
 1452 0472 0F91      		pop r16
 1453               	.LVL161:
 1454 0474 FF90      		pop r15
 1455               	.LVL162:
 1456 0476 EF90      		pop r14
 1457 0478 DF90      		pop r13
 1458 047a CF90      		pop r12
 249:../../tmk_core_custom/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1459               		.loc 2 249 0
 1460 047c 0C94 0000 		jmp unregister_mods
 1461               	.LVL163:
 1462               	.L118:
 254:../../tmk_core_custom/common/action.c ****                     if (event.pressed) {
 1463               		.loc 2 254 0
 1464 0480 FF20      		tst r15
 1465 0482 01F0      		breq .L125
 255:../../tmk_core_custom/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1466               		.loc 2 255 0
 1467 0484 2530      		cpi r18,lo8(5)
 1468 0486 00F0      		brlo .+2
 1469 0488 00C0      		rjmp .L64
 1470               	.L126:
 256:../../tmk_core_custom/common/action.c ****                             layer_invert(action.layer_tap.val);
 1471               		.loc 2 256 0
 1472 048a 842F      		mov r24,r20
 1473 048c 8F71      		andi r24,lo8(31)
 1474               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 1475               		.loc 2 343 0
 1476 048e 2896      		adiw r28,8
 1477 0490 0FB6      		in __tmp_reg__,__SREG__
 1478 0492 F894      		cli
 1479 0494 DEBF      		out __SP_H__,r29
 1480 0496 0FBE      		out __SREG__,__tmp_reg__
 1481 0498 CDBF      		out __SP_L__,r28
 1482 049a DF91      		pop r29
 1483 049c CF91      		pop r28
 1484 049e 1F91      		pop r17
 1485 04a0 0F91      		pop r16
 1486               	.LVL164:
 1487 04a2 FF90      		pop r15
 1488               	.LVL165:
 1489 04a4 EF90      		pop r14
 1490 04a6 DF90      		pop r13
 1491 04a8 CF90      		pop r12
 256:../../tmk_core_custom/common/action.c ****                             layer_invert(action.layer_tap.val);
 1492               		.loc 2 256 0
 1493 04aa 0C94 0000 		jmp layer_invert
 1494               	.LVL166:
 1495               	.L125:
 259:../../tmk_core_custom/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1496               		.loc 2 259 0
 1497 04ae 2630      		cpi r18,lo8(6)
 1498 04b0 00F0      		brlo .+2
 1499 04b2 00C0      		rjmp .L64
 1500 04b4 00C0      		rjmp .L126
 1501               	.L122:
 265:../../tmk_core_custom/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1502               		.loc 2 265 0
 1503 04b6 FF20      		tst r15
 1504 04b8 01F0      		breq .L127
 1505               	.L128:
 265:../../tmk_core_custom/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1506               		.loc 2 265 0 is_stmt 0 discriminator 1
 1507 04ba 842F      		mov r24,r20
 1508 04bc 8F71      		andi r24,lo8(31)
 1509               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 1510               		.loc 2 343 0 is_stmt 1 discriminator 1
 1511 04be 2896      		adiw r28,8
 1512 04c0 0FB6      		in __tmp_reg__,__SREG__
 1513 04c2 F894      		cli
 1514 04c4 DEBF      		out __SP_H__,r29
 1515 04c6 0FBE      		out __SREG__,__tmp_reg__
 1516 04c8 CDBF      		out __SP_L__,r28
 1517 04ca DF91      		pop r29
 1518 04cc CF91      		pop r28
 1519 04ce 1F91      		pop r17
 1520 04d0 0F91      		pop r16
 1521               	.LVL167:
 1522 04d2 FF90      		pop r15
 1523               	.LVL168:
 1524 04d4 EF90      		pop r14
 1525 04d6 DF90      		pop r13
 1526 04d8 CF90      		pop r12
 265:../../tmk_core_custom/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1527               		.loc 2 265 0 discriminator 1
 1528 04da 0C94 0000 		jmp layer_on
 1529               	.LVL169:
 1530               	.L121:
 269:../../tmk_core_custom/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 1531               		.loc 2 269 0
 1532 04de FF20      		tst r15
 1533 04e0 01F0      		breq .L128
 1534               	.L127:
 266:../../tmk_core_custom/common/action.c ****                                     layer_off(action.layer_tap.val);
 1535               		.loc 2 266 0
 1536 04e2 842F      		mov r24,r20
 1537 04e4 8F71      		andi r24,lo8(31)
 1538               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 1539               		.loc 2 343 0
 1540 04e6 2896      		adiw r28,8
 1541 04e8 0FB6      		in __tmp_reg__,__SREG__
 1542 04ea F894      		cli
 1543 04ec DEBF      		out __SP_H__,r29
 1544 04ee 0FBE      		out __SREG__,__tmp_reg__
 1545 04f0 CDBF      		out __SP_L__,r28
 1546 04f2 DF91      		pop r29
 1547 04f4 CF91      		pop r28
 1548 04f6 1F91      		pop r17
 1549 04f8 0F91      		pop r16
 1550               	.LVL170:
 1551 04fa FF90      		pop r15
 1552               	.LVL171:
 1553 04fc EF90      		pop r14
 1554 04fe DF90      		pop r13
 1555 0500 CF90      		pop r12
 266:../../tmk_core_custom/common/action.c ****                                     layer_off(action.layer_tap.val);
 1556               		.loc 2 266 0
 1557 0502 0C94 0000 		jmp layer_off
 1558               	.LVL172:
 1559               	.L123:
 273:../../tmk_core_custom/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1560               		.loc 2 273 0
 1561 0506 FF20      		tst r15
 1562 0508 01F0      		breq .L129
 273:../../tmk_core_custom/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1563               		.loc 2 273 0 is_stmt 0 discriminator 1
 1564 050a 842F      		mov r24,r20
 1565 050c 8F71      		andi r24,lo8(31)
 1566               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 1567               		.loc 2 343 0 is_stmt 1 discriminator 1
 1568 050e 2896      		adiw r28,8
 1569 0510 0FB6      		in __tmp_reg__,__SREG__
 1570 0512 F894      		cli
 1571 0514 DEBF      		out __SP_H__,r29
 1572 0516 0FBE      		out __SREG__,__tmp_reg__
 1573 0518 CDBF      		out __SP_L__,r28
 1574 051a DF91      		pop r29
 1575 051c CF91      		pop r28
 1576 051e 1F91      		pop r17
 1577 0520 0F91      		pop r16
 1578               	.LVL173:
 1579 0522 FF90      		pop r15
 1580               	.LVL174:
 1581 0524 EF90      		pop r14
 1582 0526 DF90      		pop r13
 1583 0528 CF90      		pop r12
 273:../../tmk_core_custom/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1584               		.loc 2 273 0 discriminator 1
 1585 052a 0C94 0000 		jmp layer_move
 1586               	.LVL175:
 1587               	.L129:
 1588               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 1589               		.loc 2 343 0
 1590 052e 2896      		adiw r28,8
 1591 0530 0FB6      		in __tmp_reg__,__SREG__
 1592 0532 F894      		cli
 1593 0534 DEBF      		out __SP_H__,r29
 1594 0536 0FBE      		out __SREG__,__tmp_reg__
 1595 0538 CDBF      		out __SP_L__,r28
 1596 053a DF91      		pop r29
 1597 053c CF91      		pop r28
 1598 053e 1F91      		pop r17
 1599 0540 0F91      		pop r16
 1600               	.LVL176:
 1601 0542 FF90      		pop r15
 1602               	.LVL177:
 1603 0544 EF90      		pop r14
 1604 0546 DF90      		pop r13
 1605 0548 CF90      		pop r12
 274:../../tmk_core_custom/common/action.c ****                                     layer_clear();
 1606               		.loc 2 274 0
 1607 054a 0C94 0000 		jmp layer_clear
 1608               	.LVL178:
 1609               	.L117:
 278:../../tmk_core_custom/common/action.c ****                     if (event.pressed) {
 1610               		.loc 2 278 0
 1611 054e FF20      		tst r15
 1612 0550 01F0      		breq .L130
 279:../../tmk_core_custom/common/action.c ****                         if (tap_count > 0) {
 1613               		.loc 2 279 0
 1614 0552 2223      		tst r18
 1615 0554 01F4      		brne .+2
 1616 0556 00C0      		rjmp .L128
 1617               	.L176:
 281:../../tmk_core_custom/common/action.c ****                             register_code(action.layer_tap.code);
 1618               		.loc 2 281 0
 1619 0558 862F      		mov r24,r22
 1620               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 1621               		.loc 2 343 0
 1622 055a 2896      		adiw r28,8
 1623 055c 0FB6      		in __tmp_reg__,__SREG__
 1624 055e F894      		cli
 1625 0560 DEBF      		out __SP_H__,r29
 1626 0562 0FBE      		out __SREG__,__tmp_reg__
 1627 0564 CDBF      		out __SP_L__,r28
 1628 0566 DF91      		pop r29
 1629 0568 CF91      		pop r28
 1630 056a 1F91      		pop r17
 1631 056c 0F91      		pop r16
 1632               	.LVL179:
 1633 056e FF90      		pop r15
 1634               	.LVL180:
 1635 0570 EF90      		pop r14
 1636 0572 DF90      		pop r13
 1637 0574 CF90      		pop r12
 281:../../tmk_core_custom/common/action.c ****                             register_code(action.layer_tap.code);
 1638               		.loc 2 281 0
 1639 0576 0C94 0000 		jmp register_code
 1640               	.LVL181:
 1641               	.L130:
 287:../../tmk_core_custom/common/action.c ****                         if (tap_count > 0) {
 1642               		.loc 2 287 0
 1643 057a 2223      		tst r18
 1644 057c 01F4      		brne .+2
 1645 057e 00C0      		rjmp .L127
 1646               	.L177:
 289:../../tmk_core_custom/common/action.c ****                             unregister_code(action.layer_tap.code);
 1647               		.loc 2 289 0
 1648 0580 862F      		mov r24,r22
 1649               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 1650               		.loc 2 343 0
 1651 0582 2896      		adiw r28,8
 1652 0584 0FB6      		in __tmp_reg__,__SREG__
 1653 0586 F894      		cli
 1654 0588 DEBF      		out __SP_H__,r29
 1655 058a 0FBE      		out __SREG__,__tmp_reg__
 1656 058c CDBF      		out __SP_L__,r28
 1657 058e DF91      		pop r29
 1658 0590 CF91      		pop r28
 1659 0592 1F91      		pop r17
 1660 0594 0F91      		pop r16
 1661               	.LVL182:
 1662 0596 FF90      		pop r15
 1663               	.LVL183:
 1664 0598 EF90      		pop r14
 1665 059a DF90      		pop r13
 1666 059c CF90      		pop r12
 289:../../tmk_core_custom/common/action.c ****                             unregister_code(action.layer_tap.code);
 1667               		.loc 2 289 0
 1668 059e 0C94 0000 		jmp unregister_code
 1669               	.LVL184:
 1670               	.L76:
 303:../../tmk_core_custom/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 1671               		.loc 2 303 0
 1672 05a2 4F70      		andi r20,lo8(15)
 1673 05a4 C801      		movw r24,r16
 1674 05a6 0E94 0000 		call action_get_macro
 1675               	.LVL185:
 1676               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 1677               		.loc 2 343 0
 1678 05aa 2896      		adiw r28,8
 1679 05ac 0FB6      		in __tmp_reg__,__SREG__
 1680 05ae F894      		cli
 1681 05b0 DEBF      		out __SP_H__,r29
 1682 05b2 0FBE      		out __SREG__,__tmp_reg__
 1683 05b4 CDBF      		out __SP_L__,r28
 1684 05b6 DF91      		pop r29
 1685 05b8 CF91      		pop r28
 1686 05ba 1F91      		pop r17
 1687 05bc 0F91      		pop r16
 1688               	.LVL186:
 1689 05be FF90      		pop r15
 1690               	.LVL187:
 1691 05c0 EF90      		pop r14
 1692 05c2 DF90      		pop r13
 1693 05c4 CF90      		pop r12
 303:../../tmk_core_custom/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 1694               		.loc 2 303 0
 1695 05c6 0C94 0000 		jmp action_macro_play
 1696               	.LVL188:
 1697               	.L77:
 308:../../tmk_core_custom/common/action.c ****             if (!event.pressed) {
 1698               		.loc 2 308 0
 1699 05ca F110      		cpse r15,__zero_reg__
 1700 05cc 00C0      		rjmp .L64
 310:../../tmk_core_custom/common/action.c ****                 if (action.backlight.level != 0 && action.backlight.opt != BACKLIGHT_LEVEL) {
 1701               		.loc 2 310 0
 1702 05ce 6623      		tst r22
 1703               	.LVL189:
 1704 05d0 01F0      		breq .L131
 310:../../tmk_core_custom/common/action.c ****                 if (action.backlight.level != 0 && action.backlight.opt != BACKLIGHT_LEVEL) {
 1705               		.loc 2 310 0 is_stmt 0 discriminator 1
 1706 05d2 842F      		mov r24,r20
 1707 05d4 8F70      		andi r24,lo8(15)
 1708 05d6 8430      		cpi r24,lo8(4)
 1709 05d8 01F0      		breq .L131
 311:../../tmk_core_custom/common/action.c ****                     action.backlight.opt = action.backlight.level;
 1710               		.loc 2 311 0 is_stmt 1
 1711 05da 407F      		andi r20,lo8(-16)
 1712               	.LVL190:
 1713 05dc 862F      		mov r24,r22
 1714 05de 8F70      		andi r24,lo8(15)
 1715 05e0 482B      		or r20,r24
 1716               	.LVL191:
 1717               	.L131:
 313:../../tmk_core_custom/common/action.c ****                 switch (action.backlight.opt) {
 1718               		.loc 2 313 0
 1719 05e2 942F      		mov r25,r20
 1720 05e4 9F70      		andi r25,lo8(15)
 1721 05e6 492F      		mov r20,r25
 1722               	.LVL192:
 1723 05e8 50E0      		ldi r21,0
 1724 05ea 4230      		cpi r20,2
 1725 05ec 5105      		cpc r21,__zero_reg__
 1726 05ee 01F4      		brne .+2
 1727 05f0 00C0      		rjmp .L132
 1728 05f2 04F4      		brge .L133
 1729 05f4 4115      		cp r20,__zero_reg__
 1730 05f6 5105      		cpc r21,__zero_reg__
 1731 05f8 01F0      		breq .L134
 1732 05fa 4130      		cpi r20,1
 1733 05fc 5105      		cpc r21,__zero_reg__
 1734 05fe 01F0      		breq .+2
 1735 0600 00C0      		rjmp .L64
 1736               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 1737               		.loc 2 343 0
 1738 0602 2896      		adiw r28,8
 1739 0604 0FB6      		in __tmp_reg__,__SREG__
 1740 0606 F894      		cli
 1741 0608 DEBF      		out __SP_H__,r29
 1742 060a 0FBE      		out __SREG__,__tmp_reg__
 1743 060c CDBF      		out __SP_L__,r28
 1744 060e DF91      		pop r29
 1745 0610 CF91      		pop r28
 1746 0612 1F91      		pop r17
 1747 0614 0F91      		pop r16
 1748               	.LVL193:
 1749 0616 FF90      		pop r15
 1750               	.LVL194:
 1751 0618 EF90      		pop r14
 1752 061a DF90      		pop r13
 1753 061c CF90      		pop r12
 318:../../tmk_core_custom/common/action.c ****                         backlight_decrease();
 1754               		.loc 2 318 0
 1755 061e 0C94 0000 		jmp backlight_decrease
 1756               	.LVL195:
 1757               	.L133:
 313:../../tmk_core_custom/common/action.c ****                 switch (action.backlight.opt) {
 1758               		.loc 2 313 0
 1759 0622 4330      		cpi r20,3
 1760 0624 5105      		cpc r21,__zero_reg__
 1761 0626 01F0      		breq .L136
 1762 0628 4430      		cpi r20,4
 1763 062a 5105      		cpc r21,__zero_reg__
 1764 062c 01F0      		breq .+2
 1765 062e 00C0      		rjmp .L64
 327:../../tmk_core_custom/common/action.c ****                         backlight_level(action.backlight.level);
 1766               		.loc 2 327 0
 1767 0630 862F      		mov r24,r22
 1768               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 1769               		.loc 2 343 0
 1770 0632 2896      		adiw r28,8
 1771 0634 0FB6      		in __tmp_reg__,__SREG__
 1772 0636 F894      		cli
 1773 0638 DEBF      		out __SP_H__,r29
 1774 063a 0FBE      		out __SREG__,__tmp_reg__
 1775 063c CDBF      		out __SP_L__,r28
 1776 063e DF91      		pop r29
 1777 0640 CF91      		pop r28
 1778 0642 1F91      		pop r17
 1779 0644 0F91      		pop r16
 1780               	.LVL196:
 1781 0646 FF90      		pop r15
 1782               	.LVL197:
 1783 0648 EF90      		pop r14
 1784 064a DF90      		pop r13
 1785 064c CF90      		pop r12
 327:../../tmk_core_custom/common/action.c ****                         backlight_level(action.backlight.level);
 1786               		.loc 2 327 0
 1787 064e 0C94 0000 		jmp backlight_level
 1788               	.LVL198:
 1789               	.L134:
 1790               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 1791               		.loc 2 343 0
 1792 0652 2896      		adiw r28,8
 1793 0654 0FB6      		in __tmp_reg__,__SREG__
 1794 0656 F894      		cli
 1795 0658 DEBF      		out __SP_H__,r29
 1796 065a 0FBE      		out __SREG__,__tmp_reg__
 1797 065c CDBF      		out __SP_L__,r28
 1798 065e DF91      		pop r29
 1799 0660 CF91      		pop r28
 1800 0662 1F91      		pop r17
 1801 0664 0F91      		pop r16
 1802               	.LVL199:
 1803 0666 FF90      		pop r15
 1804               	.LVL200:
 1805 0668 EF90      		pop r14
 1806 066a DF90      		pop r13
 1807 066c CF90      		pop r12
 315:../../tmk_core_custom/common/action.c ****                         backlight_increase();
 1808               		.loc 2 315 0
 1809 066e 0C94 0000 		jmp backlight_increase
 1810               	.LVL201:
 1811               	.L132:
 1812               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 1813               		.loc 2 343 0
 1814 0672 2896      		adiw r28,8
 1815 0674 0FB6      		in __tmp_reg__,__SREG__
 1816 0676 F894      		cli
 1817 0678 DEBF      		out __SP_H__,r29
 1818 067a 0FBE      		out __SREG__,__tmp_reg__
 1819 067c CDBF      		out __SP_L__,r28
 1820 067e DF91      		pop r29
 1821 0680 CF91      		pop r28
 1822 0682 1F91      		pop r17
 1823 0684 0F91      		pop r16
 1824               	.LVL202:
 1825 0686 FF90      		pop r15
 1826               	.LVL203:
 1827 0688 EF90      		pop r14
 1828 068a DF90      		pop r13
 1829 068c CF90      		pop r12
 321:../../tmk_core_custom/common/action.c ****                         backlight_toggle();
 1830               		.loc 2 321 0
 1831 068e 0C94 0000 		jmp backlight_toggle
 1832               	.LVL204:
 1833               	.L136:
 1834               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 1835               		.loc 2 343 0
 1836 0692 2896      		adiw r28,8
 1837 0694 0FB6      		in __tmp_reg__,__SREG__
 1838 0696 F894      		cli
 1839 0698 DEBF      		out __SP_H__,r29
 1840 069a 0FBE      		out __SREG__,__tmp_reg__
 1841 069c CDBF      		out __SP_L__,r28
 1842 069e DF91      		pop r29
 1843 06a0 CF91      		pop r28
 1844 06a2 1F91      		pop r17
 1845 06a4 0F91      		pop r16
 1846               	.LVL205:
 1847 06a6 FF90      		pop r15
 1848               	.LVL206:
 1849 06a8 EF90      		pop r14
 1850 06aa DF90      		pop r13
 1851 06ac CF90      		pop r12
 324:../../tmk_core_custom/common/action.c ****                         backlight_step();
 1852               		.loc 2 324 0
 1853 06ae 0C94 0000 		jmp backlight_step
 1854               	.LVL207:
 1855               	.L78:
 337:../../tmk_core_custom/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 1856               		.loc 2 337 0
 1857 06b2 4F70      		andi r20,lo8(15)
 1858 06b4 C801      		movw r24,r16
 1859               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 1860               		.loc 2 343 0
 1861 06b6 2896      		adiw r28,8
 1862 06b8 0FB6      		in __tmp_reg__,__SREG__
 1863 06ba F894      		cli
 1864 06bc DEBF      		out __SP_H__,r29
 1865 06be 0FBE      		out __SREG__,__tmp_reg__
 1866 06c0 CDBF      		out __SP_L__,r28
 1867 06c2 DF91      		pop r29
 1868 06c4 CF91      		pop r28
 1869 06c6 1F91      		pop r17
 1870 06c8 0F91      		pop r16
 1871               	.LVL208:
 1872 06ca FF90      		pop r15
 1873               	.LVL209:
 1874 06cc EF90      		pop r14
 1875 06ce DF90      		pop r13
 1876 06d0 CF90      		pop r12
 337:../../tmk_core_custom/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 1877               		.loc 2 337 0
 1878 06d2 0C94 0000 		jmp action_function
 1879               	.LVL210:
 1880               	.L64:
 1881               	/* epilogue start */
 343:../../tmk_core_custom/common/action.c **** }
 1882               		.loc 2 343 0
 1883 06d6 2896      		adiw r28,8
 1884 06d8 0FB6      		in __tmp_reg__,__SREG__
 1885 06da F894      		cli
 1886 06dc DEBF      		out __SP_H__,r29
 1887 06de 0FBE      		out __SREG__,__tmp_reg__
 1888 06e0 CDBF      		out __SP_L__,r28
 1889 06e2 DF91      		pop r29
 1890 06e4 CF91      		pop r28
 1891 06e6 1F91      		pop r17
 1892 06e8 0F91      		pop r16
 1893               	.LVL211:
 1894 06ea FF90      		pop r15
 1895               	.LVL212:
 1896 06ec EF90      		pop r14
 1897 06ee DF90      		pop r13
 1898 06f0 CF90      		pop r12
 1899 06f2 0895      		ret
 1900               		.cfi_endproc
 1901               	.LFE106:
 1903               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1904               	.global	clear_keyboard_but_mods
 1906               	clear_keyboard_but_mods:
 1907               	.LFB112:
 494:../../tmk_core_custom/common/action.c ****     }
 495:../../tmk_core_custom/common/action.c **** }
 496:../../tmk_core_custom/common/action.c **** 
 497:../../tmk_core_custom/common/action.c **** void clear_keyboard(void)
 498:../../tmk_core_custom/common/action.c **** {
 499:../../tmk_core_custom/common/action.c ****     clear_mods();
 500:../../tmk_core_custom/common/action.c ****     clear_keyboard_but_mods();
 501:../../tmk_core_custom/common/action.c **** }
 502:../../tmk_core_custom/common/action.c **** 
 503:../../tmk_core_custom/common/action.c **** void clear_keyboard_but_mods(void)
 504:../../tmk_core_custom/common/action.c **** {
 1908               		.loc 2 504 0
 1909               		.cfi_startproc
 1910               	/* prologue: function */
 1911               	/* frame size = 0 */
 1912               	/* stack size = 0 */
 1913               	.L__stack_usage = 0
 505:../../tmk_core_custom/common/action.c ****     clear_weak_mods();
 1914               		.loc 2 505 0
 1915 0000 0E94 0000 		call clear_weak_mods
 1916               	.LVL213:
 506:../../tmk_core_custom/common/action.c ****     clear_keys();
 1917               		.loc 2 506 0
 1918 0004 0E94 0000 		call clear_keys
 1919               	.LVL214:
 507:../../tmk_core_custom/common/action.c ****     send_keyboard_report();
 1920               		.loc 2 507 0
 1921 0008 0E94 0000 		call send_keyboard_report
 1922               	.LVL215:
 508:../../tmk_core_custom/common/action.c **** #ifdef MOUSEKEY_ENABLE
 509:../../tmk_core_custom/common/action.c ****     mousekey_clear();
 1923               		.loc 2 509 0
 1924 000c 0E94 0000 		call mousekey_clear
 1925               	.LVL216:
 510:../../tmk_core_custom/common/action.c ****     mousekey_send();
 1926               		.loc 2 510 0
 1927 0010 0E94 0000 		call mousekey_send
 1928               	.LVL217:
 511:../../tmk_core_custom/common/action.c **** #endif
 512:../../tmk_core_custom/common/action.c **** #ifdef EXTRAKEY_ENABLE
 513:../../tmk_core_custom/common/action.c ****     host_system_send(0);
 1929               		.loc 2 513 0
 1930 0014 80E0      		ldi r24,0
 1931 0016 90E0      		ldi r25,0
 1932 0018 0E94 0000 		call host_system_send
 1933               	.LVL218:
 514:../../tmk_core_custom/common/action.c ****     host_consumer_send(0);
 1934               		.loc 2 514 0
 1935 001c 80E0      		ldi r24,0
 1936 001e 90E0      		ldi r25,0
 1937 0020 0C94 0000 		jmp host_consumer_send
 1938               	.LVL219:
 1939               		.cfi_endproc
 1940               	.LFE112:
 1942               		.section	.text.clear_keyboard,"ax",@progbits
 1943               	.global	clear_keyboard
 1945               	clear_keyboard:
 1946               	.LFB111:
 498:../../tmk_core_custom/common/action.c **** {
 1947               		.loc 2 498 0
 1948               		.cfi_startproc
 1949               	/* prologue: function */
 1950               	/* frame size = 0 */
 1951               	/* stack size = 0 */
 1952               	.L__stack_usage = 0
 499:../../tmk_core_custom/common/action.c ****     clear_mods();
 1953               		.loc 2 499 0
 1954 0000 0E94 0000 		call clear_mods
 1955               	.LVL220:
 500:../../tmk_core_custom/common/action.c ****     clear_keyboard_but_mods();
 1956               		.loc 2 500 0
 1957 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1958               	.LVL221:
 1959               		.cfi_endproc
 1960               	.LFE111:
 1962               		.section	.text.is_tap_key,"ax",@progbits
 1963               	.global	is_tap_key
 1965               	is_tap_key:
 1966               	.LFB113:
 515:../../tmk_core_custom/common/action.c **** #endif
 516:../../tmk_core_custom/common/action.c **** }
 517:../../tmk_core_custom/common/action.c **** 
 518:../../tmk_core_custom/common/action.c **** bool is_tap_key(keypos_t key)
 519:../../tmk_core_custom/common/action.c **** {
 1967               		.loc 2 519 0
 1968               		.cfi_startproc
 1969               	.LVL222:
 1970               	/* prologue: function */
 1971               	/* frame size = 0 */
 1972               	/* stack size = 0 */
 1973               	.L__stack_usage = 0
 520:../../tmk_core_custom/common/action.c ****     action_t action = layer_switch_get_action(key);
 1974               		.loc 2 520 0
 1975 0000 0E94 0000 		call layer_switch_get_action
 1976               	.LVL223:
 521:../../tmk_core_custom/common/action.c **** 
 522:../../tmk_core_custom/common/action.c ****     switch (action.kind.id) {
 1977               		.loc 2 522 0
 1978 0004 292F      		mov r18,r25
 1979 0006 2295      		swap r18
 1980 0008 2F70      		andi r18,lo8(15)
 1981 000a 30E0      		ldi r19,0
 1982 000c 2C30      		cpi r18,12
 1983 000e 3105      		cpc r19,__zero_reg__
 1984 0010 04F4      		brge .L189
 1985 0012 2A30      		cpi r18,10
 1986 0014 3105      		cpc r19,__zero_reg__
 1987 0016 04F4      		brge .L190
 1988 0018 2250      		subi r18,2
 1989 001a 3109      		sbc r19,__zero_reg__
 1990 001c 2230      		cpi r18,2
 1991 001e 3105      		cpc r19,__zero_reg__
 1992 0020 00F4      		brsh .L204
 1993 0022 00C0      		rjmp .L190
 1994               	.L189:
 1995 0024 2C30      		cpi r18,12
 1996 0026 3105      		cpc r19,__zero_reg__
 1997 0028 01F0      		breq .L191
 1998 002a 2F30      		cpi r18,15
 1999 002c 3105      		cpc r19,__zero_reg__
 2000 002e 01F0      		breq .L191
 2001 0030 00C0      		rjmp .L204
 2002               	.L190:
 523:../../tmk_core_custom/common/action.c ****         case ACT_LMODS_TAP:
 524:../../tmk_core_custom/common/action.c ****         case ACT_RMODS_TAP:
 525:../../tmk_core_custom/common/action.c ****         case ACT_LAYER_TAP:
 526:../../tmk_core_custom/common/action.c ****         case ACT_LAYER_TAP_EXT:
 527:../../tmk_core_custom/common/action.c ****             switch (action.layer_tap.code) {
 2003               		.loc 2 527 0
 2004 0032 803E      		cpi r24,lo8(-32)
 2005               	.LVL224:
 2006 0034 00F0      		brlo .L192
 2007 0036 803F      		cpi r24,lo8(-16)
 2008 0038 01F4      		brne .L204
 2009               	.L192:
 528:../../tmk_core_custom/common/action.c ****                 case 0x00 ... 0xdf:
 529:../../tmk_core_custom/common/action.c ****                 case OP_TAP_TOGGLE:
 530:../../tmk_core_custom/common/action.c ****                     return true;
 2010               		.loc 2 530 0
 2011 003a 81E0      		ldi r24,lo8(1)
 2012               	.LVL225:
 2013 003c 0895      		ret
 2014               	.L191:
 531:../../tmk_core_custom/common/action.c ****             }
 532:../../tmk_core_custom/common/action.c ****             return false;
 533:../../tmk_core_custom/common/action.c ****         case ACT_MACRO:
 534:../../tmk_core_custom/common/action.c ****         case ACT_FUNCTION:
 535:../../tmk_core_custom/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 2015               		.loc 2 535 0
 2016 003e 93FB      		bst r25,3
 2017 0040 8827      		clr r24
 2018 0042 80F9      		bld r24,0
 2019 0044 0895      		ret
 2020               	.LVL226:
 2021               	.L204:
 532:../../tmk_core_custom/common/action.c ****             return false;
 2022               		.loc 2 532 0
 2023 0046 80E0      		ldi r24,0
 2024               	.LVL227:
 536:../../tmk_core_custom/common/action.c ****             return false;
 537:../../tmk_core_custom/common/action.c ****     }
 538:../../tmk_core_custom/common/action.c ****     return false;
 539:../../tmk_core_custom/common/action.c **** }
 2025               		.loc 2 539 0
 2026 0048 0895      		ret
 2027               		.cfi_endproc
 2028               	.LFE113:
 2030               		.section	.text.debug_event,"ax",@progbits
 2031               	.global	debug_event
 2033               	debug_event:
 2034               	.LFB114:
 540:../../tmk_core_custom/common/action.c **** 
 541:../../tmk_core_custom/common/action.c **** 
 542:../../tmk_core_custom/common/action.c **** /*
 543:../../tmk_core_custom/common/action.c ****  * debug print
 544:../../tmk_core_custom/common/action.c ****  */
 545:../../tmk_core_custom/common/action.c **** void debug_event(keyevent_t event)
 546:../../tmk_core_custom/common/action.c **** {
 2035               		.loc 2 546 0
 2036               		.cfi_startproc
 2037 0000 CF93      		push r28
 2038               	.LCFI11:
 2039               		.cfi_def_cfa_offset 3
 2040               		.cfi_offset 28, -2
 2041 0002 DF93      		push r29
 2042               	.LCFI12:
 2043               		.cfi_def_cfa_offset 4
 2044               		.cfi_offset 29, -3
 2045 0004 00D0      		rcall .
 2046 0006 00D0      		rcall .
 2047 0008 1F92      		push __zero_reg__
 2048               	.LCFI13:
 2049               		.cfi_def_cfa_offset 9
 2050 000a CDB7      		in r28,__SP_L__
 2051 000c DEB7      		in r29,__SP_H__
 2052               	.LCFI14:
 2053               		.cfi_def_cfa_register 28
 2054               	/* prologue: function */
 2055               	/* frame size = 5 */
 2056               	/* stack size = 7 */
 2057               	.L__stack_usage = 7
 2058               	/* epilogue start */
 547:../../tmk_core_custom/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 548:../../tmk_core_custom/common/action.c **** }
 2059               		.loc 2 548 0
 2060 000e 0F90      		pop __tmp_reg__
 2061 0010 0F90      		pop __tmp_reg__
 2062 0012 0F90      		pop __tmp_reg__
 2063 0014 0F90      		pop __tmp_reg__
 2064 0016 0F90      		pop __tmp_reg__
 2065 0018 DF91      		pop r29
 2066 001a CF91      		pop r28
 2067 001c 0895      		ret
 2068               		.cfi_endproc
 2069               	.LFE114:
 2071               		.section	.text.debug_record,"ax",@progbits
 2072               	.global	debug_record
 2074               	debug_record:
 2075               	.LFB115:
 549:../../tmk_core_custom/common/action.c **** 
 550:../../tmk_core_custom/common/action.c **** void debug_record(keyrecord_t record)
 551:../../tmk_core_custom/common/action.c **** {
 2076               		.loc 2 551 0
 2077               		.cfi_startproc
 2078 0000 CF93      		push r28
 2079               	.LCFI15:
 2080               		.cfi_def_cfa_offset 3
 2081               		.cfi_offset 28, -2
 2082 0002 DF93      		push r29
 2083               	.LCFI16:
 2084               		.cfi_def_cfa_offset 4
 2085               		.cfi_offset 29, -3
 2086 0004 00D0      		rcall .
 2087 0006 00D0      		rcall .
 2088 0008 00D0      		rcall .
 2089               	.LCFI17:
 2090               		.cfi_def_cfa_offset 10
 2091 000a CDB7      		in r28,__SP_L__
 2092 000c DEB7      		in r29,__SP_H__
 2093               	.LCFI18:
 2094               		.cfi_def_cfa_register 28
 2095               	/* prologue: function */
 2096               	/* frame size = 6 */
 2097               	/* stack size = 8 */
 2098               	.L__stack_usage = 8
 2099               	/* epilogue start */
 552:../../tmk_core_custom/common/action.c ****     debug_event(record.event);
 553:../../tmk_core_custom/common/action.c **** #ifndef NO_ACTION_TAPPING
 554:../../tmk_core_custom/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 555:../../tmk_core_custom/common/action.c **** #endif
 556:../../tmk_core_custom/common/action.c **** }
 2100               		.loc 2 556 0
 2101 000e 2696      		adiw r28,6
 2102 0010 0FB6      		in __tmp_reg__,__SREG__
 2103 0012 F894      		cli
 2104 0014 DEBF      		out __SP_H__,r29
 2105 0016 0FBE      		out __SREG__,__tmp_reg__
 2106 0018 CDBF      		out __SP_L__,r28
 2107 001a DF91      		pop r29
 2108 001c CF91      		pop r28
 2109 001e 0895      		ret
 2110               		.cfi_endproc
 2111               	.LFE115:
 2113               		.section	.text.debug_action,"ax",@progbits
 2114               	.global	debug_action
 2116               	debug_action:
 2117               	.LFB116:
 557:../../tmk_core_custom/common/action.c **** 
 558:../../tmk_core_custom/common/action.c **** void debug_action(action_t action)
 559:../../tmk_core_custom/common/action.c **** {
 2118               		.loc 2 559 0
 2119               		.cfi_startproc
 2120               	.LVL228:
 2121               	/* prologue: function */
 2122               	/* frame size = 0 */
 2123               	/* stack size = 0 */
 2124               	.L__stack_usage = 0
 2125 0000 0895      		ret
 2126               		.cfi_endproc
 2127               	.LFE116:
 2129               		.section	.text.action_keyevent,"ax",@progbits
 2130               		.weak	action_keyevent
 2132               	action_keyevent:
 2133               	.LFB117:
 560:../../tmk_core_custom/common/action.c ****     switch (action.kind.id) {
 561:../../tmk_core_custom/common/action.c ****         case ACT_LMODS:             dprint("ACT_LMODS");             break;
 562:../../tmk_core_custom/common/action.c ****         case ACT_RMODS:             dprint("ACT_RMODS");             break;
 563:../../tmk_core_custom/common/action.c ****         case ACT_LMODS_TAP:         dprint("ACT_LMODS_TAP");         break;
 564:../../tmk_core_custom/common/action.c ****         case ACT_RMODS_TAP:         dprint("ACT_RMODS_TAP");         break;
 565:../../tmk_core_custom/common/action.c ****         case ACT_USAGE:             dprint("ACT_USAGE");             break;
 566:../../tmk_core_custom/common/action.c ****         case ACT_MOUSEKEY:          dprint("ACT_MOUSEKEY");          break;
 567:../../tmk_core_custom/common/action.c ****         case ACT_LAYER:             dprint("ACT_LAYER");             break;
 568:../../tmk_core_custom/common/action.c ****         case ACT_LAYER_TAP:         dprint("ACT_LAYER_TAP");         break;
 569:../../tmk_core_custom/common/action.c ****         case ACT_LAYER_TAP_EXT:     dprint("ACT_LAYER_TAP_EXT");     break;
 570:../../tmk_core_custom/common/action.c ****         case ACT_MACRO:             dprint("ACT_MACRO");             break;
 571:../../tmk_core_custom/common/action.c ****         case ACT_COMMAND:           dprint("ACT_COMMAND");           break;
 572:../../tmk_core_custom/common/action.c ****         case ACT_FUNCTION:          dprint("ACT_FUNCTION");          break;
 573:../../tmk_core_custom/common/action.c ****         default:                    dprint("UNKNOWN");               break;
 574:../../tmk_core_custom/common/action.c ****     }
 575:../../tmk_core_custom/common/action.c ****     dprintf("[%X:%02X]", action.kind.param>>8, action.kind.param&0xff);
 576:../../tmk_core_custom/common/action.c **** }
 577:../../tmk_core_custom/common/action.c **** 
 578:../../tmk_core_custom/common/action.c **** __attribute__ ((weak))
 579:../../tmk_core_custom/common/action.c **** void action_keyevent(keyevent_t event)
 580:../../tmk_core_custom/common/action.c **** {
 2134               		.loc 2 580 0
 2135               		.cfi_startproc
 2136               		.loc 2 580 0
 2137 0000 CF93      		push r28
 2138               	.LCFI19:
 2139               		.cfi_def_cfa_offset 3
 2140               		.cfi_offset 28, -2
 2141 0002 DF93      		push r29
 2142               	.LCFI20:
 2143               		.cfi_def_cfa_offset 4
 2144               		.cfi_offset 29, -3
 2145 0004 00D0      		rcall .
 2146 0006 00D0      		rcall .
 2147 0008 1F92      		push __zero_reg__
 2148               	.LCFI21:
 2149               		.cfi_def_cfa_offset 9
 2150 000a CDB7      		in r28,__SP_L__
 2151 000c DEB7      		in r29,__SP_H__
 2152               	.LCFI22:
 2153               		.cfi_def_cfa_register 28
 2154               	/* prologue: function */
 2155               	/* frame size = 5 */
 2156               	/* stack size = 7 */
 2157               	.L__stack_usage = 7
 2158               	/* epilogue start */
 581:../../tmk_core_custom/common/action.c **** }
 2159               		.loc 2 581 0
 2160 000e 0F90      		pop __tmp_reg__
 2161 0010 0F90      		pop __tmp_reg__
 2162 0012 0F90      		pop __tmp_reg__
 2163 0014 0F90      		pop __tmp_reg__
 2164 0016 0F90      		pop __tmp_reg__
 2165 0018 DF91      		pop r29
 2166 001a CF91      		pop r28
 2167 001c 0895      		ret
 2168               		.cfi_endproc
 2169               	.LFE117:
 2171               		.section	.text.action_exec,"ax",@progbits
 2172               	.global	action_exec
 2174               	action_exec:
 2175               	.LFB105:
  38:../../tmk_core_custom/common/action.c **** {
 2176               		.loc 2 38 0
 2177               		.cfi_startproc
 2178 0000 CF93      		push r28
 2179               	.LCFI23:
 2180               		.cfi_def_cfa_offset 3
 2181               		.cfi_offset 28, -2
 2182 0002 DF93      		push r29
 2183               	.LCFI24:
 2184               		.cfi_def_cfa_offset 4
 2185               		.cfi_offset 29, -3
 2186 0004 CDB7      		in r28,__SP_L__
 2187 0006 DEB7      		in r29,__SP_H__
 2188               	.LCFI25:
 2189               		.cfi_def_cfa_register 28
 2190 0008 2B97      		sbiw r28,11
 2191               	.LCFI26:
 2192               		.cfi_def_cfa_offset 15
 2193 000a 0FB6      		in __tmp_reg__,__SREG__
 2194 000c F894      		cli
 2195 000e DEBF      		out __SP_H__,r29
 2196 0010 0FBE      		out __SREG__,__tmp_reg__
 2197 0012 CDBF      		out __SP_L__,r28
 2198               	/* prologue: function */
 2199               	/* frame size = 11 */
 2200               	/* stack size = 13 */
 2201               	.L__stack_usage = 13
 2202 0014 4F83      		std Y+7,r20
 2203 0016 5887      		std Y+8,r21
 2204 0018 6987      		std Y+9,r22
 2205 001a 7A87      		std Y+10,r23
 2206 001c 8B87      		std Y+11,r24
 2207               	.LVL229:
  44:../../tmk_core_custom/common/action.c ****     keyrecord_t record = { .event = event };
 2208               		.loc 2 44 0
 2209 001e DE01      		movw r26,r28
 2210 0020 1196      		adiw r26,1
 2211 0022 86E0      		ldi r24,lo8(6)
 2212 0024 FD01      		movw r30,r26
 2213               		0:
 2214 0026 1192      		st Z+,__zero_reg__
 2215 0028 8A95      		dec r24
 2216 002a 01F4      		brne 0b
 2217 002c 85E0      		ldi r24,lo8(5)
 2218 002e FE01      		movw r30,r28
 2219 0030 3796      		adiw r30,7
 2220               		0:
 2221 0032 0190      		ld r0,Z+
 2222 0034 0D92      		st X+,r0
 2223 0036 8A95      		dec r24
 2224 0038 01F4      		brne 0b
  46:../../tmk_core_custom/common/action.c ****     action_keyevent(event);
 2225               		.loc 2 46 0
 2226 003a 4F81      		ldd r20,Y+7
 2227               	.LVL230:
 2228 003c 5885      		ldd r21,Y+8
 2229               	.LVL231:
 2230 003e 6985      		ldd r22,Y+9
 2231 0040 7A85      		ldd r23,Y+10
 2232 0042 8B85      		ldd r24,Y+11
 2233 0044 0E94 0000 		call action_keyevent
 2234               	.LVL232:
  49:../../tmk_core_custom/common/action.c ****     action_tapping_process(record);
 2235               		.loc 2 49 0
 2236 0048 4981      		ldd r20,Y+1
 2237 004a 5A81      		ldd r21,Y+2
 2238 004c 6B81      		ldd r22,Y+3
 2239 004e 7C81      		ldd r23,Y+4
 2240 0050 8D81      		ldd r24,Y+5
 2241 0052 9E81      		ldd r25,Y+6
 2242 0054 0E94 0000 		call action_tapping_process
 2243               	.LVL233:
 2244               	/* epilogue start */
  56:../../tmk_core_custom/common/action.c **** }
 2245               		.loc 2 56 0
 2246 0058 2B96      		adiw r28,11
 2247 005a 0FB6      		in __tmp_reg__,__SREG__
 2248 005c F894      		cli
 2249 005e DEBF      		out __SP_H__,r29
 2250 0060 0FBE      		out __SREG__,__tmp_reg__
 2251 0062 CDBF      		out __SP_L__,r28
 2252 0064 DF91      		pop r29
 2253 0066 CF91      		pop r28
 2254 0068 0895      		ret
 2255               		.cfi_endproc
 2256               	.LFE105:
 2258               		.text
 2259               	.Letext0:
 2260               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 2261               		.file 4 "../../tmk_core_custom/common/keycode.h"
 2262               		.file 5 "../../tmk_core_custom/common/action_code.h"
 2263               		.file 6 "../../tmk_core_custom/common/action_macro.h"
 2264               		.file 7 "../../tmk_core_custom/common/action.h"
 2265               		.file 8 "../../tmk_core_custom/common/action_util.h"
 2266               		.file 9 "../../tmk_core_custom/common/host.h"
 2267               		.file 10 "../../tmk_core_custom/common/action_layer.h"
 2268               		.file 11 "../../tmk_core_custom/common/command.h"
 2269               		.file 12 "../../tmk_core_custom/common/mousekey.h"
 2270               		.file 13 "../../tmk_core_custom/common/backlight.h"
 2271               		.file 14 "../../tmk_core_custom/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 2272               		.file 15 "../../tmk_core_custom/common/action_tapping.h"
DEFINED SYMBOLS
                            *ABS*:00000000 action.c
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:2      *ABS*:0000003e __SP_H__
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:3      *ABS*:0000003d __SP_L__
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:4      *ABS*:0000003f __SREG__
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:6      *ABS*:00000001 __zero_reg__
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:13     .text.matrix_power_up:00000000 matrix_power_up
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:29     .text.matrix_power_down:00000000 matrix_power_down
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:44     .text.register_code:00000000 register_code
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:363    .text.unregister_code:00000000 unregister_code
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:498    .text.register_mods:00000000 register_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:524    .text.unregister_mods:00000000 unregister_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:550    .text.process_action:00000000 process_action
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:1906   .text.clear_keyboard_but_mods:00000000 clear_keyboard_but_mods
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:1945   .text.clear_keyboard:00000000 clear_keyboard
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:1965   .text.is_tap_key:00000000 is_tap_key
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:2033   .text.debug_event:00000000 debug_event
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:2074   .text.debug_record:00000000 debug_record
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:2116   .text.debug_action:00000000 debug_action
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:2132   .text.action_keyevent:00000000 action_keyevent
/var/folders/21/2h6z05gn50s9p53ctp4w8vd00000gn/T//ccecZAAV.s:2174   .text.action_exec:00000000 action_exec

UNDEFINED SYMBOLS
host_keyboard_leds
add_key
send_keyboard_report
del_key
command_proc
add_mods
host_system_send
host_consumer_send
del_mods
layer_switch_get_action
layer_debug
default_layer_debug
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
mousekey_on
mousekey_off
mousekey_send
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_on
layer_off
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
backlight_decrease
backlight_level
backlight_increase
backlight_toggle
backlight_step
action_function
clear_weak_mods
clear_keys
mousekey_clear
clear_mods
action_tapping_process
