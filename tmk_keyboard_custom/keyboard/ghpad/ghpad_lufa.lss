
ghpad_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  000068be  00006952  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000068be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d7  00800138  00800138  0000698a  2**0
                  ALLOC
  3 .noinit       00000004  0080020f  0080020f  0000698a  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  0000698c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000a7  00000000  00000000  00007244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000072eb  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000dd8  00000000  00000000  00007300  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001303b  00000000  00000000  000080d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004a3c  00000000  00000000  0001b113  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000068b0  00000000  00000000  0001fb4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000240c  00000000  00000000  00026400  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00005156  00000000  00000000  0002880c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000a0f5  00000000  00000000  0002d962  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ed8  00000000  00000000  00037a57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
       0:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__ctors_end>
       4:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
       8:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
       c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      10:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      14:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      18:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      1c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      20:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      24:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      28:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__vector_10>
      2c:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__vector_11>
      30:	0c 94 f9 21 	jmp	0x43f2	; 0x43f2 <__vector_12>
      34:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
      38:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      3c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      40:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      44:	0c 94 bb 2e 	jmp	0x5d76	; 0x5d76 <__vector_17>
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
      48:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      4c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      50:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
      54:	0c 94 60 22 	jmp	0x44c0	; 0x44c0 <__vector_21>
      58:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      5c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      60:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      64:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      68:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      70:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      74:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      78:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      7c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
	HID_MinMax_t          UsageMinMax        = {0, 0};
      80:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      84:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      88:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo   = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize      = 0;
      8c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath = NULL;
      90:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      94:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable     = &StateTable[0];
      98:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      a0:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      a4:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a8:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__bad_interrupt>
      ac:	a0 11       	cpse	r26, r0
      ae:	c2 11       	cpse	r28, r2
      b0:	ad 12       	cpse	r10, r29
      b2:	c2 11       	cpse	r28, r2
      b4:	ad 12       	cpse	r10, r29
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b6:	04 12       	cpse	r0, r20
      b8:	27 12       	cpse	r2, r23
      ba:	ad 12       	cpse	r10, r29
      bc:	7c 12       	cpse	r7, r28
      be:	8f 12       	cpse	r8, r31
      c0:	9c 15       	cp	r25, r12
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c2:	9c 15       	cp	r25, r12
      c4:	ca 15       	cp	r28, r10
      c6:	ca 15       	cp	r28, r10
      c8:	1f 16       	cp	r1, r31
      ca:	5b 16       	cp	r5, r27
      cc:	c0 18       	sub	r12, r0
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      ce:	c0 18       	sub	r12, r0
      d0:	73 16       	cp	r7, r19
      d2:	c0 18       	sub	r12, r0
      d4:	6a 17       	cp	r22, r26
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	6a 17       	cp	r22, r26
      d8:	26 18       	sub	r2, r6
      da:	3a 18       	sub	r3, r10
      dc:	c0 18       	sub	r12, r0
      de:	ae 18       	sub	r10, r14
		uint32_t ReportItemData;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e0:	70 2b       	or	r23, r16
      e2:	98 2b       	or	r25, r24
      e4:	99 29       	or	r25, r9
      e6:	81 2c       	mov	r8, r1
      e8:	81 2c       	mov	r8, r1
      ea:	25 2b       	or	r18, r21
      ec:	81 2c       	mov	r8, r1
      ee:	81 2c       	mov	r8, r1
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData;

		ReportData++;
      f0:	c4 2b       	or	r28, r20
      f2:	81 2c       	mov	r8, r1
      f4:	d7 2b       	or	r29, r23
		ReportSize--;
      f6:	4c 2c       	mov	r4, r12
      f8:	81 2c       	mov	r8, r1
				ReportSize     -= 1;
				ReportData     += 1;
				break;

			default:
				ReportItemData  = 0;
      fa:	81 2c       	mov	r8, r1
      fc:	81 2c       	mov	r8, r1
      fe:	81 2c       	mov	r8, r1
     100:	21 2c       	mov	r2, r1
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     102:	08 2c       	mov	r0, r8
     104:	81 2c       	mov	r8, r1
     106:	f1 2b       	or	r31, r17
     108:	81 2c       	mov	r8, r1
     10a:	b1 2b       	or	r27, r17
     10c:	81 2c       	mov	r8, r1
     10e:	81 2c       	mov	r8, r1
     110:	7b 2c       	mov	r7, r11
     112:	7b 2c       	mov	r7, r11
     114:	7b 2c       	mov	r7, r11
     116:	7b 2c       	mov	r7, r11
     118:	7b 2c       	mov	r7, r11
     11a:	7b 2c       	mov	r7, r11
     11c:	7b 2c       	mov	r7, r11
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     11e:	7b 2c       	mov	r7, r11
     120:	7b 2c       	mov	r7, r11
     122:	79 2c       	mov	r7, r9
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     124:	81 2c       	mov	r8, r1
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     126:	79 2c       	mov	r7, r9
     128:	81 2c       	mov	r8, r1
     12a:	81 2c       	mov	r8, r1
     12c:	81 2c       	mov	r8, r1
     12e:	81 2c       	mov	r8, r1
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     130:	81 2c       	mov	r8, r1
     132:	81 2c       	mov	r8, r1
     134:	81 2c       	mov	r8, r1
     136:	81 2c       	mov	r8, r1
     138:	81 2c       	mov	r8, r1
     13a:	81 2c       	mov	r8, r1
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     13c:	81 2c       	mov	r8, r1
     13e:	79 2c       	mov	r7, r9
				ReportData     += 4;
     140:	81 2c       	mov	r8, r1
     142:	81 2c       	mov	r8, r1
     144:	25 2b       	or	r18, r21
				break;
     146:	06 2b       	or	r16, r22

			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     148:	7d 2c       	mov	r7, r13
     14a:	7d 2c       	mov	r7, r13
     14c:	7d 2c       	mov	r7, r13
     14e:	7d 2c       	mov	r7, r13
     150:	7d 2c       	mov	r7, r13
     152:	7d 2c       	mov	r7, r13
     154:	7d 2c       	mov	r7, r13
     156:	7d 2c       	mov	r7, r13
     158:	7d 2c       	mov	r7, r13
				ReportSize     -= 2;
     15a:	7d 2c       	mov	r7, r13
     15c:	7d 2c       	mov	r7, r13
				ReportData     += 2;
     15e:	7d 2c       	mov	r7, r13
     160:	5e 2c       	mov	r5, r14
     162:	81 2c       	mov	r8, r1
				break;
     164:	84 2b       	or	r24, r20

00000166 <__trampolines_end>:

			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     166:	00 d2       	rcall	.+1024   	; 0x568 <__c.5163+0x3>
     168:	00 d1       	rcall	.+512    	; 0x36a <MouseReport+0x12>
     16a:	00 d0       	rcall	.+0      	; 0x16c <keymaps>

0000016c <keymaps>:
     16c:	29 c0 c1 2a 53 c2 c3 57 5f 60 61 56 5c 5d 5e 55     )..*S..W_`aV\]^U
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     17c:	59 5a 5b 54 2e 62 63 58                             YZ[T.bcX

00000184 <__c.1889>:
     184:	0a 00                                               ..

00000186 <__c.1887>:
     186:	25 30 31 36 62 00                                   %016b.

0000018c <__c.1885>:
     18c:	3a 20 00                                            : .

0000018f <__c.1883>:
     18f:	25 30 32 58 00                                      %02X.

00000194 <__c.1880>:
     194:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A

			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1a4:	42 43 44 45 46 0a 00                                BCDEF..

000001ab <__c.1858>:
     1ab:	0a 00                                               ..

000001ad <__c.1856>:
				break;
     1ad:	25 30 32 58 00                                      %02X.

000001b2 <__c.1854>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b2:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

000001bc <backlight_table>:
     1bc:	00 10 80 ff                                         ....

000001c0 <ledmaps>:
     1c0:	00 23 00 20 00 20 00 20 00 20                       .#. . . . 

000001ca <__c.4763>:
     1ca:	5b 73 5d 00                                         [s].

000001ce <__c.4761>:
				UsageMinMax.Minimum = ReportItemData;
				break;

			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1ce:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1de:	00                                                  .

000001df <__c.4759>:
     1df:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     1ef:	00                                                  .

000001f0 <__c.4667>:
     1f0:	5b 57 5d 00                                         [W].

000001f4 <__c.4663>:
     1f4:	5b 53 5d 00                                         [S].

000001f8 <__c.4659>:
     1f8:	5b 52 5d 00                                         [R].

000001fc <__c.4654>:
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;

			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     1fc:	5b 44 5d 00                                         [D].

00000200 <__c.4649>:
			default:
				ReportItemData  = 0;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     200:	5b 43 5d 00                                         [C].

00000204 <ProductString>:
     204:	0c 03 47 00 48 00 50 00 61 00 64 00 00 00           ..G.H.P.a.d...

00000212 <ManufacturerString>:
     212:	12 03 67 00 65 00 65 00 6b 00 68 00 61 00 63 00     ..g.e.e.k.h.a.c.
     222:	6b 00 00 00                                         k...

00000226 <LanguageString>:
     226:	04 03 09 04                                         ....

0000022a <ConfigurationDescriptor>:
     22a:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     23a:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     24a:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     25a:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
     26a:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....

			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     27a:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
				break;

			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     28a:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
				break;

			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     29a:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
				break;

			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2aa:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

000002b7 <DeviceDescriptor>:
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;

			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2b7:	12 01 10 01 00 00 00 08 ed fe 10 10 02 00 01 02     ................
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;

			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2c7:	00 01                                               ..

000002c9 <NKROReport>:
     2c9:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				break;

			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     2d9:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2e9:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     2f9:	25 01 95 78 75 01 81 02 c0                          %..xu....

00000302 <ConsoleReport>:
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     302:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     312:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

00000322 <ExtrakeyReport>:
     322:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     332:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     342:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     352:	10 95 01 81 00 c0                                   ......

00000358 <MouseReport>:
     358:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
					}
				}

				ParserData->UsingReportIDs = true;
     368:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     378:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
				break;

			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     388:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     398:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000003a5 <KeyboardReport>:
     3a5:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;

			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b5:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3c5:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3d5:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

000003e4 <__c.4417>:
     3e4:	0a 00                                               ..

000003e6 <__c.4412>:
     3e6:	25 30 32 58 20 00                                   %02X .

000003ec <__c.4409>:
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3ec:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     3fc:	20 00                                                .

000003fe <__c.4864>:
     3fe:	0a 00                                               ..

00000400 <__c.4862>:
				}

				CurrCollectionPath->Type       = ReportItemData;
     400:	25 30 32 58 00                                      %02X.

00000405 <__c.4860>:
     405:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     415:	3a 20 00                                            : .

00000418 <__c.4561>:

				if (UsageListSize)
     418:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     428:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000436 <__c.4556>:
     436:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can

					for (uint8_t i = 1; i < UsageListSize; i++)
					  UsageList[i - 1] = UsageList[i];
     446:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

00000454 <__c.4727>:

					UsageListSize--;
     454:	64 6f 6e 65 2e 0a 00                                done...

0000045b <__c.4721>:
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     45b:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46b:	2e 2e 2e 20 00                                      ... .

00000470 <__c.4489>:
     470:	29 0a 00                                            )..

00000473 <__c.4487>:
     473:	25 75 00                                            %u.

00000476 <__c.4485>:
     476:	2f 00                                               /.

00000478 <__c.4483>:
     478:	25 75 00                                            %u.

0000047b <__c.4481>:
     47b:	5d 28 00                                            ](.

0000047e <__c.4479>:
     47e:	25 64 00                                            %d.

00000481 <__c.4477>:
     481:	20 00                                                .

00000483 <__c.4475>:
				}

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     483:	25 64 00                                            %d.

00000486 <__c.4473>:
     486:	20 00                                                .

00000488 <__c.4471>:
     488:	25 64 00                                            %d.

0000048b <__c.4469>:
     48b:	20 00                                                .

0000048d <__c.4467>:
     48d:	25 64 00                                            %d.

00000490 <__c.4465>:
     490:	7c 00                                               |.

00000492 <__c.4463>:
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     492:	25 30 32 58 00                                      %02X.

00000497 <__c.4461>:
     497:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4a7:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     4b7:	20 5b 00                                             [.

000004ba <__c.5221>:
     4ba:	0a 00                                               ..

000004bc <__c.5219>:
     4bc:	25 75 00                                            %u.

000004bf <__c.5217>:
     4bf:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4cf:	5f 6d 61 78 20 3d 20 00                             _max = .

000004d7 <__c.5214>:
     4d7:	0a 00                                               ..

000004d9 <__c.5212>:
     4d9:	25 75 00                                            %u.

000004dc <__c.5210>:
				break;

			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4dc:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4ec:	65 64 20 3d 20 00                                   ed = .

000004f2 <__c.5207>:
     4f2:	0a 00                                               ..

000004f4 <__c.5205>:
     4f4:	25 75 00                                            %u.

000004f7 <__c.5203>:
     4f7:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
					NewReportItem.CollectionPath = CurrCollectionPath;
     507:	20 00                                                .

00000509 <__c.5200>:
     509:	0a 00                                               ..

0000050b <__c.5198>:
     50b:	25 75 00                                            %u.

0000050e <__c.5196>:
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     50e:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 00     mk_max_speed = .

0000051e <__c.5193>:

					if (UsageListSize)
     51e:	0a 00                                               ..

00000520 <__c.5191>:
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     520:	25 75 00                                            %u.

00000523 <__c.5189>:
     523:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 00        mk_interval = .

00000532 <__c.5185>:
     532:	0a 00                                               ..

00000534 <__c.5183>:
     534:	25 75 00                                            %u.

00000537 <__c.5181>:

						for (uint8_t i = 1; i < UsageListSize; i++)
     537:	6d 6b 5f 64 65 6c 61 79 20 3d 20 00                 mk_delay = .

00000543 <__c.5174>:
						  UsageList[i - 1] = UsageList[i];
     543:	0a 00                                               ..

00000545 <__c.5172>:
     545:	25 75 00                                            %u.

00000548 <__c.5170>:
     548:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to

						UsageListSize--;
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     558:	5f 6d 61 78 20 3d 20 00                             _max = .

00000560 <__c.5167>:
     560:	0a 00                                               ..

00000562 <__c.5165>:
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     562:	25 75 00                                            %u.

00000565 <__c.5163>:
     565:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     575:	65 64 20 3d 20 00                                   ed = .

0000057b <__c.5160>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     57b:	0a 00                                               ..

0000057d <__c.5158>:
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     57d:	25 75 00                                            %u.

00000580 <__c.5156>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     580:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     590:	20 00                                                .

00000592 <__c.5153>:
     592:	0a 00                                               ..

00000594 <__c.5151>:
     594:	25 75 00                                            %u.

00000597 <__c.5149>:
     597:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 00     mk_max_speed = .

000005a7 <__c.5146>:

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a7:	0a 00                                               ..

000005a9 <__c.5144>:
     5a9:	25 75 00                                            %u.

000005ac <__c.5142>:
     5ac:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 00        mk_interval = .

000005bb <__c.5138>:

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bb:	0a 00                                               ..

000005bd <__c.5136>:
     5bd:	25 75 00                                            %u.

000005c0 <__c.5134>:
     5c0:	6d 6b 5f 64 65 6c 61 79 20 3d 20 00                 mk_delay = .

000005cc <__c.5127>:
     5cc:	0a 00                                               ..

000005ce <__c.5125>:
     5ce:	25 75 00                                            %u.

000005d1 <__c.5123>:
     5d1:	36 3a 20 6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65     6: mk_wheel_time
     5e1:	5f 74 6f 5f 6d 61 78 3a 20 00                       _to_max: .

000005eb <__c.5121>:
     5eb:	0a 00                                               ..

000005ed <__c.5119>:

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5ed:	25 75 00                                            %u.

000005f0 <__c.5117>:
     5f0:	35 3a 20 6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f     5: mk_wheel_max_
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     600:	73 70 65 65 64 3a 20 00                             speed: .

00000608 <__c.5115>:
     608:	0a 00                                               ..

0000060a <__c.5113>:
     60a:	25 75 00                                            %u.

0000060d <__c.5111>:
     60d:	34 3a 20 6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61     4: mk_time_to_ma
     61d:	78 3a 20 00                                         x: .

00000621 <__c.5109>:
     621:	0a 00                                               ..

00000623 <__c.5107>:
     623:	25 75 00                                            %u.

00000626 <__c.5105>:
     626:	33 3a 20 6d 6b 5f 6d 61 78 5f 73 70 65 65 64 3a     3: mk_max_speed:
     636:	20 00                                                .

00000638 <__c.5103>:
     638:	0a 00                                               ..

0000063a <__c.5101>:
     63a:	25 75 00                                            %u.

0000063d <__c.5099>:
     63d:	32 3a 20 6d 6b 5f 69 6e 74 65 72 76 61 6c 28 6d     2: mk_interval(m
     64d:	73 29 3a 20 00                                      s): .

00000652 <__c.5097>:
     652:	0a 00                                               ..

00000654 <__c.5095>:
     654:	25 75 00                                            %u.

00000657 <__c.5093>:
     657:	31 3a 20 6d 6b 5f 64 65 6c 61 79 28 2a 31 30 6d     1: mk_delay(*10m
     667:	73 29 3a 20 00                                      s): .

0000066c <__c.5091>:
     66c:	0a 0a 2d 2d 2d 2d 2d 20 4d 6f 75 73 65 6b 65 79     ..----- Mousekey
     67c:	20 50 61 72 61 6d 65 74 65 72 73 20 2d 2d 2d 2d      Parameters ----

			default:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     68c:	2d 0a 00                                            -..

0000068f <__c.5311>:
     68f:	3e 20 00                                            > .

00000692 <__c.5309>:
     692:	25 75 00                                            %u.

00000695 <__c.5307>:
     695:	4d 00                                               M.

00000697 <__c.5305>:
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     697:	3f 00                                               ?.

00000699 <__c.5302>:
     699:	73 65 74 20 64 65 66 61 75 6c 74 20 76 61 6c 75     set default valu
			UsageListSize       = 0;
     6a9:	65 73 2e 0a 00                                      es...

000006ae <__c.5295>:
		}
	}

	if (!(ParserData->TotalReportItems))
     6ae:	0a 00                                               ..

000006b0 <__c.5293>:
     6b0:	25 75 00                                            %u.

000006b3 <__c.5291>:
	  return HID_PARSE_NoUnfilteredReportItems;
     6b3:	73 65 6c 65 63 74 65 64 20 70 61 72 61 6d 65 74     selected paramet
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6c3:	65 72 3a 20 00                                      er: .

000006c8 <__c.5278>:

				break;

			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6c8:	43 3e 20 00                                         C> .

000006cc <__c.5276>:
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6cc:	0a 51 75 69 74 20 4d 6f 75 73 65 6b 65 79 20 43     .Quit Mousekey C
}
     6dc:	6f 6e 73 6f 6c 65 0a 00                             onsole..

000006e4 <__c.5266>:
     6e4:	53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77 69     See http://en.wi
     6f4:	6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b 69     kipedia.org/wiki
     704:	2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00              /Mouse_keys..

00000711 <__c.5264>:
     711:	0a 00                                               ..

00000713 <__c.5262>:
     713:	25 75 00                                            %u.

00000716 <__c.5260>:
     716:	2c 20 77 68 65 65 6c 3d 00                          , wheel=.

0000071f <__c.5258>:
     71f:	25 75 00                                            %u.

00000722 <__c.5256>:
     722:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     732:	73 6f 72 3d 00                                      sor=.

00000737 <__c.5254>:
     737:	0a 73 70 65 65 64 20 3d 20 64 65 6c 74 61 20 2a     .speed = delta *
     747:	20 6d 61 78 5f 73 70 65 65 64 20 2a 20 28 72 65      max_speed * (re
     757:	70 65 61 74 20 2f 20 74 69 6d 65 5f 74 6f 5f 6d     peat / time_to_m
     767:	61 78 29 0a 00                                      ax)..

0000076c <__c.5252>:
     76c:	70 67 64 6f 77 6e 3a 09 64 65 63 72 65 61 73 65     pgdown:.decrease
     77c:	20 70 61 72 61 6d 65 74 65 72 73 28 2d 31 30 29      parameters(-10)
     78c:	0a 00                                               ..

0000078e <__c.5250>:
     78e:	70 67 75 70 3a 09 69 6e 63 72 65 61 73 65 20 70     pgup:.increase p
     79e:	61 72 61 6d 65 74 65 72 73 28 2b 31 30 29 0a 00     arameters(+10)..

000007ae <__c.5248>:
     7ae:	64 6f 77 6e 3a 09 64 65 63 72 65 61 73 65 20 70     down:.decrease p
     7be:	61 72 61 6d 65 74 65 72 73 28 2d 31 29 0a 00        arameters(-1)..

000007cd <__c.5246>:
     7cd:	75 70 3a 09 69 6e 63 72 65 61 73 65 20 70 61 72     up:.increase par
     7dd:	61 6d 65 74 65 72 73 28 2b 31 29 0a 00              ameters(+1)..

000007ea <__c.5244>:
     7ea:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 20 76     d:.set default v
     7fa:	61 6c 75 65 73 0a 00                                alues..

00000801 <__c.5242>:
     801:	70 3a 09 70 72 69 6e 74 20 70 61 72 61 6d 65 74     p:.print paramet
     811:	65 72 73 0a 00                                      ers..

00000816 <__c.5240>:
     816:	36 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 77 68 65     6:.select mk_whe
     826:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 00     el_time_to_max..

00000836 <__c.5238>:
     836:	35 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 77 68 65     5:.select mk_whe
     846:	65 6c 5f 6d 61 78 5f 73 70 65 65 64 0a 00           el_max_speed..

00000854 <__c.5236>:
     854:	34 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 74 69 6d     4:.select mk_tim
     864:	65 5f 74 6f 5f 6d 61 78 0a 00                       e_to_max..

0000086e <__c.5234>:
     86e:	33 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 6d 61 78     3:.select mk_max
     87e:	5f 73 70 65 65 64 0a 00                             _speed..

00000886 <__c.5232>:
     886:	32 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 69 6e 74     2:.select mk_int
     896:	65 72 76 61 6c 28 6d 73 29 0a 00                    erval(ms)..

000008a1 <__c.5230>:
     8a1:	31 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 64 65 6c     1:.select mk_del
     8b1:	61 79 28 2a 31 30 6d 73 29 0a 00                    ay(*10ms)..

000008bc <__c.5228>:
     8bc:	45 53 43 2f 71 3a 09 71 75 69 74 0a 00              ESC/q:.quit..

000008c9 <__c.5226>:
     8c9:	0a 0a 2d 2d 2d 2d 2d 20 4d 6f 75 73 65 6b 65 79     ..----- Mousekey
     8d9:	20 50 61 72 61 6d 65 74 65 72 73 20 48 65 6c 70      Parameters Help
     8e9:	20 2d 2d 2d 2d 2d 0a 00                              -----..

000008f1 <__c.5083>:
     8f1:	3f 00                                               ?.

000008f3 <__c.5080>:
     8f3:	4d 30 3e 00                                         M0>.

000008f7 <__c.5078>:
     8f7:	0a 45 6e 74 65 72 20 4d 6f 75 73 65 6b 65 79 20     .Enter Mousekey 
     907:	43 6f 6e 73 6f 6c 65 0a 00                          Console..

00000910 <__c.5075>:
     910:	0a 51 75 69 74 20 43 6f 6e 73 6f 6c 65 20 4d 6f     .Quit Console Mo
     920:	64 65 0a 00                                         de..

00000924 <__c.5085>:
     924:	43 3e 20 00                                         C> .

00000928 <__c.5337>:
     928:	0a 00                                               ..

0000092a <__c.5335>:
     92a:	25 75 00                                            %u.

0000092d <__c.5333>:
     92d:	20 74 6f 20 00                                       to .

00000932 <__c.5331>:
     932:	25 75 00                                            %u.

00000935 <__c.5329>:
     935:	73 77 69 74 63 68 5f 64 65 66 61 75 6c 74 5f 6c     switch_default_l
     945:	61 79 65 72 3a 20 00                                ayer: .

0000094c <__c.5065>:
     94c:	6d 3a 09 6d 6f 75 73 65 6b 65 79 0a 00              m:.mousekey..

00000959 <__c.5063>:
     959:	45 53 43 2f 71 3a 09 71 75 69 74 0a 00              ESC/q:.quit..

00000966 <__c.5061>:
     966:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6e 73 6f 6c 65 20     ..----- Console 
     976:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

00000982 <__c.4858>:
     982:	50 61 75 73 3a 09 6a 75 6d 70 20 74 6f 20 62 6f     Paus:.jump to bo
     992:	6f 74 6c 6f 61 64 65 72 0a 00                       otloader..

0000099c <__c.4856>:
     99c:	43 61 70 73 3a 09 4c 6f 63 6b 20 4b 65 79 62 6f     Caps:.Lock Keybo
     9ac:	61 72 64 28 43 68 69 6c 64 20 50 72 6f 6f 66 29     ard(Child Proof)
     9bc:	0a 00                                               ..

000009be <__c.4854>:
     9be:	50 53 63 72 3a 09 70 6f 77 65 72 20 64 6f 77 6e     PScr:.power down
     9ce:	2f 72 65 6d 6f 74 65 20 77 61 6b 65 2d 75 70 0a     /remote wake-up.
     9de:	00                                                  .

000009df <__c.4852>:
     9df:	34 2f 46 34 3a 09 73 77 69 74 63 68 20 74 6f 20     4/F4:.switch to 
     9ef:	4c 61 79 65 72 34 20 0a 00                          Layer4 ..

000009f8 <__c.4850>:
     9f8:	33 2f 46 33 3a 09 73 77 69 74 63 68 20 74 6f 20     3/F3:.switch to 
     a08:	4c 61 79 65 72 33 20 0a 00                          Layer3 ..

00000a11 <__c.4848>:
     a11:	32 2f 46 32 3a 09 73 77 69 74 63 68 20 74 6f 20     2/F2:.switch to 
     a21:	4c 61 79 65 72 32 20 0a 00                          Layer2 ..

00000a2a <__c.4846>:
     a2a:	31 2f 46 31 3a 09 73 77 69 74 63 68 20 74 6f 20     1/F1:.switch to 
     a3a:	4c 61 79 65 72 31 20 0a 00                          Layer1 ..

00000a43 <__c.4844>:
     a43:	30 2f 46 31 30 3a 09 73 77 69 74 63 68 20 74 6f     0/F10:.switch to
     a53:	20 4c 61 79 65 72 30 20 0a 00                        Layer0 ..

00000a5d <__c.4842>:
     a5d:	6e 3a 09 74 6f 67 67 6c 65 20 4e 4b 52 4f 0a 00     n:.toggle NKRO..

00000a6d <__c.4840>:
     a6d:	65 3a 09 70 72 69 6e 74 20 65 65 70 72 6f 6d 20     e:.print eeprom 
     a7d:	63 6f 6e 66 69 67 0a 00                             config..

00000a85 <__c.4838>:
     a85:	73 3a 09 70 72 69 6e 74 20 73 74 61 74 75 73 0a     s:.print status.
     a95:	00                                                  .

00000a96 <__c.4836>:
     a96:	74 3a 09 70 72 69 6e 74 20 74 69 6d 65 72 20 63     t:.print timer c
     aa6:	6f 75 6e 74 0a 00                                   ount..

00000aac <__c.4834>:
     aac:	76 3a 09 70 72 69 6e 74 20 64 65 76 69 63 65 20     v:.print device 
     abc:	76 65 72 73 69 6f 6e 20 26 20 69 6e 66 6f 0a 00     version & info..

00000acc <__c.4832>:
     acc:	6d 3a 09 74 6f 67 67 6c 65 20 6d 6f 75 73 65 20     m:.toggle mouse 
     adc:	64 65 62 75 67 0a 00                                debug..

00000ae3 <__c.4830>:
     ae3:	6b 3a 09 74 6f 67 67 6c 65 20 6b 65 79 62 6f 61     k:.toggle keyboa
     af3:	72 64 20 64 65 62 75 67 0a 00                       rd debug..

00000afd <__c.4828>:
     afd:	78 3a 09 74 6f 67 67 6c 65 20 6d 61 74 72 69 78     x:.toggle matrix
     b0d:	20 64 65 62 75 67 0a 00                              debug..

00000b15 <__c.4826>:
     b15:	64 3a 09 74 6f 67 67 6c 65 20 64 65 62 75 67 20     d:.toggle debug 
     b25:	65 6e 61 62 6c 65 0a 00                             enable..

00000b2d <__c.4824>:
     b2d:	63 3a 09 65 6e 74 65 72 20 63 6f 6e 73 6f 6c 65     c:.enter console
     b3d:	20 6d 6f 64 65 0a 00                                 mode..

00000b44 <__c.4822>:
     b44:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6d 6d 61 6e 64 20     ..----- Command 
     b54:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

00000b60 <__c.4972>:
     b60:	0a 00                                               ..

00000b62 <__c.4970>:
     b62:	25 75 00                                            %u.

00000b65 <__c.4968>:
     b65:	2e 6c 65 76 65 6c 3a 20 00                          .level: .

00000b6e <__c.4966>:
     b6e:	0a 00                                               ..

00000b70 <__c.4964>:
     b70:	25 75 00                                            %u.

00000b73 <__c.4962>:
     b73:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000b7d <__c.4960>:
     b7d:	0a 00                                               ..

00000b7f <__c.4958>:
     b7f:	25 30 32 58 00                                      %02X.

00000b84 <__c.4956>:
     b84:	62 61 63 6b 6c 69 67 68 74 5f 63 6f 6e 66 69 67     backlight_config
     b94:	2e 72 61 77 3a 20 00                                .raw: .

00000b9b <__c.4953>:
     b9b:	0a 00                                               ..

00000b9d <__c.4951>:
     b9d:	25 75 00                                            %u.

00000ba0 <__c.4949>:
     ba0:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000ba8 <__c.4947>:
     ba8:	0a 00                                               ..

00000baa <__c.4945>:
     baa:	25 75 00                                            %u.

00000bad <__c.4943>:
     bad:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     bbd:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000bc9 <__c.4941>:
     bc9:	0a 00                                               ..

00000bcb <__c.4939>:
     bcb:	25 75 00                                            %u.

00000bce <__c.4937>:
     bce:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     bde:	20 00                                                .

00000be0 <__c.4935>:
     be0:	0a 00                                               ..

00000be2 <__c.4933>:
     be2:	25 75 00                                            %u.

00000be5 <__c.4931>:
     be5:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000bef <__c.4929>:
     bef:	0a 00                                               ..

00000bf1 <__c.4927>:
     bf1:	25 75 00                                            %u.

00000bf4 <__c.4925>:
     bf4:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     c04:	20 00                                                .

00000c06 <__c.4923>:
     c06:	0a 00                                               ..

00000c08 <__c.4921>:
     c08:	25 75 00                                            %u.

00000c0b <__c.4919>:
     c0b:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     c1b:	20 00                                                .

00000c1d <__c.4917>:
     c1d:	0a 00                                               ..

00000c1f <__c.4915>:
     c1f:	25 75 00                                            %u.

00000c22 <__c.4913>:
     c22:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     c32:	74 72 6f 6c 3a 20 00                                trol: .

00000c39 <__c.4911>:
     c39:	0a 00                                               ..

00000c3b <__c.4909>:
     c3b:	25 75 00                                            %u.

00000c3e <__c.4907>:
     c3e:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     c4e:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000c57 <__c.4905>:
     c57:	0a 00                                               ..

00000c59 <__c.4903>:
     c59:	25 30 32 58 00                                      %02X.

00000c5e <__c.4901>:
     c5e:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     c6e:	77 3a 20 00                                         w: .

00000c72 <__c.4898>:
     c72:	0a 00                                               ..

00000c74 <__c.4896>:
     c74:	25 75 00                                            %u.

00000c77 <__c.4894>:
     c77:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000c80 <__c.4892>:
     c80:	0a 00                                               ..

00000c82 <__c.4890>:
     c82:	25 75 00                                            %u.

00000c85 <__c.4888>:
     c85:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000c91 <__c.4886>:
     c91:	0a 00                                               ..

00000c93 <__c.4884>:
     c93:	25 75 00                                            %u.

00000c96 <__c.4882>:
     c96:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000ca0 <__c.4880>:
     ca0:	0a 00                                               ..

00000ca2 <__c.4878>:
     ca2:	25 75 00                                            %u.

00000ca5 <__c.4876>:
     ca5:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000caf <__c.4874>:
     caf:	0a 00                                               ..

00000cb1 <__c.4872>:
     cb1:	25 30 32 58 00                                      %02X.

00000cb6 <__c.4870>:
     cb6:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     cc6:	3a 20 00                                            : .

00000cc9 <__c.4867>:
     cc9:	0a 00                                               ..

00000ccb <__c.4865>:
     ccb:	25 75 00                                            %u.

00000cce <__c.4863>:
     cce:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000cde <__c.5056>:
     cde:	3f 00                                               ?.

00000ce0 <__c.5047>:
     ce0:	4e 4b 52 4f 3a 20 64 69 73 61 62 6c 65 64 0a 00     NKRO: disabled..

00000cf0 <__c.5045>:
     cf0:	4e 4b 52 4f 3a 20 65 6e 61 62 6c 65 64 0a 00        NKRO: enabled..

00000cff <__c.5042>:
     cff:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     d0f:	58 0a 00                                            X..

00000d12 <__c.5040>:
     d12:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     d22:	6c 3a 20 25 58 0a 00                                l: %X..

00000d29 <__c.5038>:
     d29:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     d39:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000d43 <__c.5036>:
     d43:	0a 0a 2d 2d 2d 2d 2d 20 53 74 61 74 75 73 20 2d     ..----- Status -
     d53:	2d 2d 2d 2d 0a 00                                   ----..

00000d59 <__c.5033>:
     d59:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     d69:	6c 58 0a 00                                         lX..

00000d6d <__c.5030>:
     d6d:	47 43 43 3a 20 34 2e 38 2e 31 20 41 56 52 2d 4c     GCC: 4.8.1 AVR-L
     d7d:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     d8d:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

00000d9b <__c.5028>:
     d9b:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     dab:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     dbb:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     dcb:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 36     E COMMAND NKRO 6
     ddb:	4b 52 4f 20 4c 45 44 4d 41 50 20 4c 45 44 4d 41     KRO LEDMAP LEDMA
     deb:	50 5f 49 4e 5f 45 45 50 52 4f 4d 20 42 41 43 4b     P_IN_EEPROM BACK
     dfb:	4c 49 47 48 54 20 53 4f 46 54 50 57 4d 5f 4c 45     LIGHT SOFTPWM_LE
     e0b:	44 20 42 52 45 41 54 48 49 4e 47 5f 4c 45 44 20     D BREATHING_LED 
     e1b:	34 30 39 36 0a 00                                   4096..

00000e21 <__c.5026>:
     e21:	42 55 49 4c 44 3a 20 75 6e 6b 6e 6f 77 6e 20 28     BUILD: unknown (
     e31:	31 31 3a 35 37 3a 31 34 20 4d 61 72 20 32 31 20     11:57:14 Mar 21 
     e41:	32 30 31 36 29 0a 00                                2016)..

00000e48 <__c.5024>:
     e48:	56 49 44 3a 20 30 78 46 45 45 44 28 67 65 65 6b     VID: 0xFEED(geek
     e58:	68 61 63 6b 29 20 50 49 44 3a 20 30 78 31 30 31     hack) PID: 0x101
     e68:	30 28 47 48 50 61 64 29 20 56 45 52 3a 20 30 78     0(GHPad) VER: 0x
     e78:	30 30 30 32 0a 00                                   0002..

00000e7e <__c.5022>:
     e7e:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     e8e:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     e9e:	6f 72 20 47 48 50 61 64 0a 00                       or GHPad..

00000ea8 <__c.5020>:
     ea8:	0a 0a 2d 2d 2d 2d 2d 20 56 65 72 73 69 6f 6e 20     ..----- Version 
     eb8:	2d 2d 2d 2d 2d 0a 00                                -----..

00000ebf <__c.5017>:
     ebf:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 64 69     .DEBUG: mouse di
     ecf:	73 61 62 6c 65 64 2e 0a 00                          sabled...

00000ed8 <__c.5015>:
     ed8:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 65 6e     .DEBUG: mouse en
     ee8:	61 62 6c 65 64 2e 0a 00                             abled...

00000ef0 <__c.5012>:
     ef0:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     f00:	20 64 69 73 61 62 6c 65 64 2e 0a 00                  disabled...

00000f0c <__c.5010>:
     f0c:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     f1c:	20 65 6e 61 62 6c 65 64 2e 0a 00                     enabled...

00000f27 <__c.5007>:
     f27:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 64     .DEBUG: matrix d
     f37:	69 73 61 62 6c 65 64 2e 0a 00                       isabled...

00000f41 <__c.5005>:
     f41:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 65     .DEBUG: matrix e
     f51:	6e 61 62 6c 65 64 2e 0a 00                          nabled...

00000f5a <__c.5002>:
     f5a:	0a 44 45 42 55 47 3a 20 65 6e 61 62 6c 65 64 2e     .DEBUG: enabled.
     f6a:	0a 00                                               ..

00000f6c <__c.5000>:
     f6c:	0a 44 45 42 55 47 3a 20 64 69 73 61 62 6c 65 64     .DEBUG: disabled
     f7c:	2e 0a 00                                            ...

00000f7f <__c.4997>:
     f7f:	6e 6f 74 20 73 75 70 70 6f 72 74 65 64 2e 0a 00     not supported...

00000f8f <__c.4995>:
     f8f:	0a 0a 4a 75 6d 70 20 74 6f 20 62 6f 6f 74 6c 6f     ..Jump to bootlo
     f9f:	61 64 65 72 2e 2e 2e 20 00                          ader... .

00000fa8 <__c.4992>:
     fa8:	43 3e 20 00                                         C> .

00000fac <__c.4990>:
     fac:	0a 45 6e 74 65 72 20 43 6f 6e 73 6f 6c 65 20 4d     .Enter Console M
     fbc:	6f 64 65 0a 00                                      ode..

00000fc1 <__c.4985>:
     fc1:	55 6e 6c 6f 63 6b 65 64 2e 0a 00                    Unlocked...

00000fcc <__c.4983>:
     fcc:	4c 6f 63 6b 65 64 2e 0a 00                          Locked...

00000fd5 <__c.4979>:
     fd5:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000fe0 <breathing_table>:
     fe0:	00 00 00 00 00 00 00 00 00 00 01 01 01 02 02 02     ................
     ff0:	03 03 04 04 05 05 06 06 07 08 08 09 0a 0b 0b 0c     ................
    1000:	0d 0e 0f 10 11 12 13 15 16 17 19 1a 1b 1d 1e 20     ............... 
    1010:	22 23 25 27 29 2b 2d 2f 31 33 35 38 3a 3d 3f 42     "#%')+-/1358:=?B
    1020:	44 47 4a 4d 50 53 56 59 5c 5f 62 66 69 6c 70 74     DGJMPSVY\_bfilpt
    1030:	77 7b 7e 82 86 8a 8e 91 95 99 9d a1 a5 a9 ad b0     w{~.............
    1040:	b4 b8 bc c0 c3 c7 cb ce d2 d5 d8 db df e2 e4 e7     ................
    1050:	ea ec ef f1 f3 f5 f7 f8 fa fb fc fd fe ff ff ff     ................

00001060 <__c.1770>:
    1060:	62 61 63 6b 6c 69 67 68 74 20 73 74 65 70 3a 20     backlight step: 
    1070:	25 75 0a 00                                         %u..

00001074 <__c.1765>:
    1074:	62 61 63 6b 6c 69 67 68 74 20 74 6f 67 67 6c 65     backlight toggle
    1084:	3a 20 25 75 0a 00                                   : %u..

0000108a <__c.1760>:
    108a:	62 61 63 6b 6c 69 67 68 74 20 63 75 73 74 6f 6d     backlight custom
    109a:	20 64 65 63 72 65 61 73 65 3a 20 25 75 0a 00         decrease: %u..

000010a9 <__c.1755>:
    10a9:	62 61 63 6b 6c 69 67 68 74 20 63 75 73 74 6f 6d     backlight custom
    10b9:	20 69 6e 63 72 65 61 73 65 3a 20 25 75 0a 00         increase: %u..

000010c8 <__ctors_end>:
    10c8:	11 24       	eor	r1, r1
    10ca:	1f be       	out	0x3f, r1	; 63
    10cc:	cf ef       	ldi	r28, 0xFF	; 255
    10ce:	da e0       	ldi	r29, 0x0A	; 10
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	cd bf       	out	0x3d, r28	; 61

000010d4 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
    10d4:	04 b6       	in	r0, 0x34	; 52
    10d6:	03 fe       	sbrs	r0, 3
    10d8:	24 c0       	rjmp	.+72     	; 0x1122 <__do_copy_data>
    10da:	80 91 0f 02 	lds	r24, 0x020F
    10de:	90 91 10 02 	lds	r25, 0x0210
    10e2:	a0 91 11 02 	lds	r26, 0x0211
    10e6:	b0 91 12 02 	lds	r27, 0x0212
    10ea:	87 30       	cpi	r24, 0x07	; 7
    10ec:	90 4b       	sbci	r25, 0xB0	; 176
    10ee:	a7 40       	sbci	r26, 0x07	; 7
    10f0:	b0 4b       	sbci	r27, 0xB0	; 176
    10f2:	b9 f4       	brne	.+46     	; 0x1122 <__do_copy_data>
        reset_key = 0;
    10f4:	10 92 0f 02 	sts	0x020F, r1
    10f8:	10 92 10 02 	sts	0x0210, r1
    10fc:	10 92 11 02 	sts	0x0211, r1
    1100:	10 92 12 02 	sts	0x0212, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
    1104:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
    1106:	84 b7       	in	r24, 0x34	; 52
    1108:	87 7f       	andi	r24, 0xF7	; 247
    110a:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
    110c:	88 e1       	ldi	r24, 0x18	; 24
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	80 93 60 00 	sts	0x0060, r24
    1116:	10 92 60 00 	sts	0x0060, r1
    111a:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
    111c:	e0 e0       	ldi	r30, 0x00	; 0
    111e:	f8 e3       	ldi	r31, 0x38	; 56
    1120:	09 95       	icall

00001122 <__do_copy_data>:
    1122:	11 e0       	ldi	r17, 0x01	; 1
    1124:	a0 e0       	ldi	r26, 0x00	; 0
    1126:	b1 e0       	ldi	r27, 0x01	; 1
    1128:	ee eb       	ldi	r30, 0xBE	; 190
    112a:	f8 e6       	ldi	r31, 0x68	; 104
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <__do_copy_data+0x10>
    112e:	05 90       	lpm	r0, Z+
    1130:	0d 92       	st	X+, r0
    1132:	a8 33       	cpi	r26, 0x38	; 56
    1134:	b1 07       	cpc	r27, r17
    1136:	d9 f7       	brne	.-10     	; 0x112e <__do_copy_data+0xc>

00001138 <__do_clear_bss>:
    1138:	22 e0       	ldi	r18, 0x02	; 2
    113a:	a8 e3       	ldi	r26, 0x38	; 56
    113c:	b1 e0       	ldi	r27, 0x01	; 1
    113e:	01 c0       	rjmp	.+2      	; 0x1142 <.do_clear_bss_start>

00001140 <.do_clear_bss_loop>:
    1140:	1d 92       	st	X+, r1

00001142 <.do_clear_bss_start>:
    1142:	af 30       	cpi	r26, 0x0F	; 15
    1144:	b2 07       	cpc	r27, r18
    1146:	e1 f7       	brne	.-8      	; 0x1140 <.do_clear_bss_loop>
    1148:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <main>
    114c:	0c 94 5d 34 	jmp	0x68ba	; 0x68ba <_exit>

00001150 <__bad_interrupt>:
    1150:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001154 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
    1154:	ff 93       	push	r31
	push	ZL
    1156:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    1158:	e0 91 38 01 	lds	r30, 0x0138
	lds	ZH, xfunc_out+1	;/
    115c:	f0 91 39 01 	lds	r31, 0x0139
	sbiw	ZL, 0		;Skip if null
    1160:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
    1162:	09 f0       	breq	.+2      	; 0x1166 <xputc+0x12>
	icall
    1164:	09 95       	icall
2:	pop	ZL
    1166:	ef 91       	pop	r30
	pop	ZH
    1168:	ff 91       	pop	r31
	ret
    116a:	08 95       	ret

0000116c <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    116c:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    116e:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    1170:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    1172:	11 f0       	breq	.+4      	; 0x1178 <xputs+0xc>
	rcall	xputc
    1174:	ef df       	rcall	.-34     	; 0x1154 <xputc>
	rjmp	1b
    1176:	fb cf       	rjmp	.-10     	; 0x116e <xputs+0x2>
2:	ret
    1178:	08 95       	ret

0000117a <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    117a:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    117c:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    117e:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    1180:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    1182:	0c c0       	rjmp	.+24     	; 0x119c <xitoa+0x22>
	neg	r20		;
    1184:	41 95       	neg	r20
	sbrs	r25, 7		;
    1186:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    1188:	09 c0       	rjmp	.+18     	; 0x119c <xitoa+0x22>
	ldi	r30, '-'	;
    118a:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    118c:	60 95       	com	r22
	com	r23		;
    118e:	70 95       	com	r23
	com	r24		;
    1190:	80 95       	com	r24
	com	r25		;
    1192:	90 95       	com	r25
	adc	r22, r1		;
    1194:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    1196:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    1198:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    119a:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    119c:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <xitoa+0x2a>
	neg	r18		;
    11a0:	21 95       	neg	r18
	ldi	r19, '0'	;/
    11a2:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    11a4:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    11a6:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    11a8:	66 0f       	add	r22, r22
	rol	r23		;
    11aa:	77 1f       	adc	r23, r23
	rol	r24		;
    11ac:	88 1f       	adc	r24, r24
	rol	r25		;
    11ae:	99 1f       	adc	r25, r25
	rol	r26		;
    11b0:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    11b2:	a4 17       	cp	r26, r20
	brcs	3f		;
    11b4:	10 f0       	brcs	.+4      	; 0x11ba <xitoa+0x40>
	sub	r26, r20	;
    11b6:	a4 1b       	sub	r26, r20
	inc	r22		;
    11b8:	63 95       	inc	r22
3:	dec	r21		;
    11ba:	5a 95       	dec	r21
	brne	2b		;/
    11bc:	a9 f7       	brne	.-22     	; 0x11a8 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    11be:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    11c0:	08 f0       	brcs	.+2      	; 0x11c4 <xitoa+0x4a>
	subi	r26, -7		;
    11c2:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    11c4:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    11c6:	af 93       	push	r26
	inc	r31		;/
    11c8:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    11ca:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    11cc:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    11ce:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    11d0:	91 05       	cpc	r25, r1
	brne	1b		;/
    11d2:	41 f7       	brne	.-48     	; 0x11a4 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    11d4:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    11d6:	11 f4       	brne	.+4      	; 0x11dc <xitoa+0x62>
	push	r30		;
    11d8:	ef 93       	push	r30
	inc	r31		;/
    11da:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    11dc:	f2 17       	cp	r31, r18
	brcc	6f		;
    11de:	18 f4       	brcc	.+6      	; 0x11e6 <xitoa+0x6c>
	push	r19		;
    11e0:	3f 93       	push	r19
	inc	r31		;
    11e2:	f3 95       	inc	r31
	rjmp	5b		;/
    11e4:	fb cf       	rjmp	.-10     	; 0x11dc <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    11e6:	8f 91       	pop	r24
	rcall	xputc		;
    11e8:	b5 df       	rcall	.-150    	; 0x1154 <xputc>
	dec	r31		;
    11ea:	fa 95       	dec	r31
	brne	6b		;/
    11ec:	e1 f7       	brne	.-8      	; 0x11e6 <xitoa+0x6c>

	ret
    11ee:	08 95       	ret

000011f0 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
    11f0:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    11f2:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    11f4:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    11f6:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    11f8:	21 f0       	breq	.+8      	; 0x1202 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
    11fa:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    11fc:	19 f0       	breq	.+6      	; 0x1204 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
    11fe:	aa df       	rcall	.-172    	; 0x1154 <xputc>
	rjmp	0b		;/
    1200:	f9 cf       	rjmp	.-14     	; 0x11f4 <xvprintf+0x4>
90:	ret
    1202:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    1204:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    1206:	e8 94       	clt
	_LPMI	r21		;Get flags
    1208:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    120a:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    120c:	c1 f3       	breq	.-16     	; 0x11fe <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
    120e:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    1210:	11 f4       	brne	.+4      	; 0x1216 <xvprintf+0x26>
	set			;/
    1212:	68 94       	set
22:	_LPMI	r21		;Get width
    1214:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    1216:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    1218:	48 f4       	brcc	.+18     	; 0x122c <xvprintf+0x3c>
	subi	r21, '0'	;
    121a:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    121c:	90 f3       	brcs	.-28     	; 0x1202 <xvprintf+0x12>
	lsl	r18		;
    121e:	22 0f       	add	r18, r18
	mov	r0, r18		;
    1220:	02 2e       	mov	r0, r18
	lsl	r18		;
    1222:	22 0f       	add	r18, r18
	lsl	r18		;
    1224:	22 0f       	add	r18, r18
	add	r18, r0		;
    1226:	20 0d       	add	r18, r0
	add	r18, r21	;
    1228:	25 0f       	add	r18, r21
	rjmp	22b		;/
    122a:	f4 cf       	rjmp	.-24     	; 0x1214 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
    122c:	0e f4       	brtc	.+2      	; 0x1230 <xvprintf+0x40>
	neg	r18		;
    122e:	21 95       	neg	r18
25:	ld	r24, Y+		;
    1230:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    1232:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    1234:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    1236:	19 f3       	breq	.-58     	; 0x11fe <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
    1238:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    123a:	29 f1       	breq	.+74     	; 0x1286 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
    123c:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    123e:	59 f1       	breq	.+86     	; 0x1296 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    1240:	bc 01       	movw	r22, r24
	clr	r24		;
    1242:	88 27       	eor	r24, r24
	clr	r25		;
    1244:	99 27       	eor	r25, r25
	clt			;/
    1246:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    1248:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    124a:	21 f4       	brne	.+8      	; 0x1254 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
    124c:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    124e:	99 91       	ld	r25, Y+
	set			;
    1250:	68 94       	set
	_LPMI	r21		;/
    1252:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    1254:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    1256:	39 f4       	brne	.+14     	; 0x1266 <xvprintf+0x76>
	ldi	r20, -10	;
    1258:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    125a:	7e f0       	brts	.+30     	; 0x127a <xvprintf+0x8a>
	sbrs	r23, 7		;
    125c:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    125e:	0d c0       	rjmp	.+26     	; 0x127a <xvprintf+0x8a>
	ldi	r24, -1		;
    1260:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    1262:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    1264:	0a c0       	rjmp	.+20     	; 0x127a <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    1266:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    1268:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    126a:	39 f0       	breq	.+14     	; 0x127a <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
    126c:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    126e:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    1270:	21 f0       	breq	.+8      	; 0x127a <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
    1272:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    1274:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    1276:	09 f0       	breq	.+2      	; 0x127a <xvprintf+0x8a>
	ret			;abort
    1278:	08 95       	ret
40:	push	ZH		;Output the value
    127a:	ff 93       	push	r31
	push	ZL		;
    127c:	ef 93       	push	r30
	rcall	xitoa		;
    127e:	7d df       	rcall	.-262    	; 0x117a <xitoa>
42:	pop	ZL		;
    1280:	ef 91       	pop	r30
	pop	ZH		;
    1282:	ff 91       	pop	r31
	rjmp	0b		;/
    1284:	b7 cf       	rjmp	.-146    	; 0x11f4 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
    1286:	ff 93       	push	r31
	push	ZL
    1288:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    128a:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    128c:	81 91       	ld	r24, Z+
	cpi	r24, 0
    128e:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    1290:	b9 f3       	breq	.-18     	; 0x1280 <xvprintf+0x90>
	rcall	xputc
    1292:	60 df       	rcall	.-320    	; 0x1154 <xputc>
	rjmp	51b
    1294:	fb cf       	rjmp	.-10     	; 0x128c <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
    1296:	ff 93       	push	r31
	push	ZL
    1298:	ef 93       	push	r30
	rcall	xputs
    129a:	68 df       	rcall	.-304    	; 0x116c <xputs>
	rjmp	42b
    129c:	f1 cf       	rjmp	.-30     	; 0x1280 <xvprintf+0x90>

0000129e <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
    129e:	df 93       	push	r29
	push	YL
    12a0:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    12a2:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    12a4:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
    12a6:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
    12a8:	a3 df       	rcall	.-186    	; 0x11f0 <xvprintf>
	pop	YL
    12aa:	cf 91       	pop	r28
	pop	YH
    12ac:	df 91       	pop	r29
	ret
    12ae:	08 95       	ret

000012b0 <matrix_power_up>:

void keyboard_init(void);
void keyboard_task(void);
void keyboard_set_leds(uint8_t leds);

__attribute__ ((weak)) void matrix_power_up(void) {}
    12b0:	08 95       	ret

000012b2 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    12b2:	08 95       	ret

000012b4 <keymap_key_to_keycode>:

/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
#ifndef KEYMAP_IN_EEPROM_ENABLE
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    12b4:	e7 2f       	mov	r30, r23
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	96 e0       	ldi	r25, 0x06	; 6
    12ba:	89 9f       	mul	r24, r25
    12bc:	e0 0d       	add	r30, r0
    12be:	f1 1d       	adc	r31, r1
    12c0:	11 24       	eor	r1, r1
    12c2:	ee 0f       	add	r30, r30
    12c4:	ff 1f       	adc	r31, r31
    12c6:	ee 0f       	add	r30, r30
    12c8:	ff 1f       	adc	r31, r31
    12ca:	e6 0f       	add	r30, r22
    12cc:	f1 1d       	adc	r31, r1
    12ce:	e4 59       	subi	r30, 0x94	; 148
    12d0:	fe 4f       	sbci	r31, 0xFE	; 254
    12d2:	84 91       	lpm	r24, Z
#else
    return eeconfig_read_keymap_key(layer, key.row, key.col);
#endif
}
    12d4:	08 95       	ret

000012d6 <keymap_fn_to_action>:
/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t) {
#ifndef KEYMAP_IN_EEPROM_ENABLE
        .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)])
    12d6:	e8 2f       	mov	r30, r24
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	ee 0f       	add	r30, r30
    12dc:	ff 1f       	adc	r31, r31
    12de:	ea 51       	subi	r30, 0x1A	; 26
    12e0:	f0 40       	sbci	r31, 0x00	; 0
#else
        .code = eeconfig_read_keymap_fn_action(FN_INDEX(keycode))
#endif
    };
}
    12e2:	85 91       	lpm	r24, Z+
    12e4:	94 91       	lpm	r25, Z
    12e6:	08 95       	ret

000012e8 <unselect_rows>:
 * pin: C6  D3	D2	D1	D0	B7
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRC  &= ~0b01000000;
    12e8:	3e 98       	cbi	0x07, 6	; 7
    PORTC &= ~0b01000000;
    12ea:	46 98       	cbi	0x08, 6	; 8
    DDRD  &= ~0b00001111;
    12ec:	8a b1       	in	r24, 0x0a	; 10
    12ee:	80 7f       	andi	r24, 0xF0	; 240
    12f0:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~0b00001111;
    12f2:	8b b1       	in	r24, 0x0b	; 11
    12f4:	80 7f       	andi	r24, 0xF0	; 240
    12f6:	8b b9       	out	0x0b, r24	; 11
    DDRB  &= ~0b10000000;
    12f8:	27 98       	cbi	0x04, 7	; 4
    PORTB &= ~0b10000000;
    12fa:	2f 98       	cbi	0x05, 7	; 5
    12fc:	08 95       	ret

000012fe <matrix_init>:
}

void matrix_init(void)
{
    // disable JTAG
    MCUCR = (1<<JTD);
    12fe:	80 e8       	ldi	r24, 0x80	; 128
    1300:	85 bf       	out	0x35, r24	; 53
    MCUCR = (1<<JTD);
    1302:	85 bf       	out	0x35, r24	; 53

    // initialize row and col
    unselect_rows();
    1304:	0e 94 74 09 	call	0x12e8	; 0x12e8 <unselect_rows>
 *  pin: D4  D6  D7  B4
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRD  &= ~(1<<PD4 | 1<<PD6 | 1<<PD7);
    1308:	8a b1       	in	r24, 0x0a	; 10
    130a:	8f 72       	andi	r24, 0x2F	; 47
    130c:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (1<<PD4 | 1<<PD6 | 1<<PD7);
    130e:	8b b1       	in	r24, 0x0b	; 11
    1310:	80 6d       	ori	r24, 0xD0	; 208
    1312:	8b b9       	out	0x0b, r24	; 11
    DDRB  &= ~(1<<PB4);
    1314:	24 98       	cbi	0x04, 4	; 4
    PORTB |=  (1<<PB4);
    1316:	2c 9a       	sbi	0x05, 4	; 5
    1318:	e0 e4       	ldi	r30, 0x40	; 64
    131a:	f1 e0       	ldi	r31, 0x01	; 1
    131c:	aa e3       	ldi	r26, 0x3A	; 58
    131e:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
    1320:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
    1322:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	e6 34       	cpi	r30, 0x46	; 70
    1328:	f8 07       	cpc	r31, r24
    132a:	d1 f7       	brne	.-12     	; 0x1320 <matrix_init+0x22>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
    132c:	08 95       	ret

0000132e <matrix_scan>:

uint8_t matrix_scan(void)
{
    132e:	df 92       	push	r13
    1330:	ef 92       	push	r14
    1332:	ff 92       	push	r15
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	ca e3       	ldi	r28, 0x3A	; 58
    133e:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1340:	10 e0       	ldi	r17, 0x00	; 0
 *  col: 0   1   2   3
 *  pin: D4  D6  D7  B4
 */
static matrix_row_t read_cols(void)
{
    return (PIND&(1<<PD4) ? 0 : (1<<0)) |
    1342:	01 e0       	ldi	r16, 0x01	; 1
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
    1344:	85 e0       	ldi	r24, 0x05	; 5
    1346:	d8 2e       	mov	r13, r24
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1348:	9d ea       	ldi	r25, 0xAD	; 173
    134a:	e9 2e       	mov	r14, r25
    134c:	91 e0       	ldi	r25, 0x01	; 1
    134e:	f9 2e       	mov	r15, r25
 * pin: C6  D3	D2	D1	D0	B7
   */
static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
    1350:	13 30       	cpi	r17, 0x03	; 3
    1352:	99 f0       	breq	.+38     	; 0x137a <matrix_scan+0x4c>
    1354:	28 f4       	brcc	.+10     	; 0x1360 <matrix_scan+0x32>
    1356:	11 30       	cpi	r17, 0x01	; 1
    1358:	51 f0       	breq	.+20     	; 0x136e <matrix_scan+0x40>
    135a:	12 30       	cpi	r17, 0x02	; 2
    135c:	59 f0       	breq	.+22     	; 0x1374 <matrix_scan+0x46>
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <matrix_scan+0x3a>
    1360:	14 30       	cpi	r17, 0x04	; 4
    1362:	71 f0       	breq	.+28     	; 0x1380 <matrix_scan+0x52>
    1364:	15 30       	cpi	r17, 0x05	; 5
    1366:	79 f0       	breq	.+30     	; 0x1386 <matrix_scan+0x58>
        case 0:
            DDRC  |= (1<<6);
    1368:	3e 9a       	sbi	0x07, 6	; 7
            PORTC &= ~(1<<6);
    136a:	46 98       	cbi	0x08, 6	; 8
    136c:	0e c0       	rjmp	.+28     	; 0x138a <matrix_scan+0x5c>
            break;
        case 1:
            DDRD  |= (1<<3);
    136e:	53 9a       	sbi	0x0a, 3	; 10
            PORTD &= ~(1<<3);
    1370:	5b 98       	cbi	0x0b, 3	; 11
    1372:	0b c0       	rjmp	.+22     	; 0x138a <matrix_scan+0x5c>
            break;
        case 2:
            DDRD  |= (1<<2);
    1374:	52 9a       	sbi	0x0a, 2	; 10
            PORTD &= ~(1<<2);
    1376:	5a 98       	cbi	0x0b, 2	; 11
    1378:	08 c0       	rjmp	.+16     	; 0x138a <matrix_scan+0x5c>
            break;
        case 3:
            DDRD  |= (1<<1);
    137a:	51 9a       	sbi	0x0a, 1	; 10
            PORTD &= ~(1<<1);
    137c:	59 98       	cbi	0x0b, 1	; 11
    137e:	05 c0       	rjmp	.+10     	; 0x138a <matrix_scan+0x5c>
            break;
        case 4:
            DDRD  |= (1<<0);
    1380:	50 9a       	sbi	0x0a, 0	; 10
            PORTD &= ~(1<<0);
    1382:	58 98       	cbi	0x0b, 0	; 11
    1384:	02 c0       	rjmp	.+4      	; 0x138a <matrix_scan+0x5c>
            break;
        case 5:
            DDRB  |= (1<<7);
    1386:	27 9a       	sbi	0x04, 7	; 4
            PORTB &= ~(1<<7);
    1388:	2f 98       	cbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    138a:	80 ea       	ldi	r24, 0xA0	; 160
    138c:	8a 95       	dec	r24
    138e:	f1 f7       	brne	.-4      	; 0x138c <matrix_scan+0x5e>
 *  col: 0   1   2   3
 *  pin: D4  D6  D7  B4
 */
static matrix_row_t read_cols(void)
{
    return (PIND&(1<<PD4) ? 0 : (1<<0)) |
    1390:	99 b1       	in	r25, 0x09	; 9
    1392:	92 95       	swap	r25
    1394:	91 70       	andi	r25, 0x01	; 1
    1396:	90 27       	eor	r25, r16
    1398:	4e 9b       	sbis	0x09, 6	; 9
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <matrix_scan+0x72>
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	01 c0       	rjmp	.+2      	; 0x13a2 <matrix_scan+0x74>
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	98 2b       	or	r25, r24
           (PIND&(1<<PD6) ? 0 : (1<<1)) |
           (PIND&(1<<PD7) ? 0 : (1<<2)) |
    13a4:	89 b1       	in	r24, 0x09	; 9
 *  col: 0   1   2   3
 *  pin: D4  D6  D7  B4
 */
static matrix_row_t read_cols(void)
{
    return (PIND&(1<<PD4) ? 0 : (1<<0)) |
    13a6:	80 95       	com	r24
    13a8:	88 1f       	adc	r24, r24
    13aa:	88 27       	eor	r24, r24
    13ac:	88 1f       	adc	r24, r24
    13ae:	88 0f       	add	r24, r24
    13b0:	88 0f       	add	r24, r24
    13b2:	98 2b       	or	r25, r24
    13b4:	1c 9b       	sbis	0x03, 4	; 3
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <matrix_scan+0x8e>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <matrix_scan+0x90>
    13bc:	88 e0       	ldi	r24, 0x08	; 8
    13be:	98 2b       	or	r25, r24
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    13c0:	88 81       	ld	r24, Y
    13c2:	89 17       	cp	r24, r25
    13c4:	39 f1       	breq	.+78     	; 0x1414 <matrix_scan+0xe6>
            matrix_debouncing[i] = cols;
    13c6:	98 83       	st	Y, r25
            if (debouncing) {
    13c8:	80 91 00 01 	lds	r24, 0x0100
    13cc:	88 23       	and	r24, r24
    13ce:	01 f1       	breq	.+64     	; 0x1410 <matrix_scan+0xe2>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    13d0:	80 91 bd 01 	lds	r24, 0x01BD
    13d4:	80 ff       	sbrs	r24, 0
    13d6:	04 c0       	rjmp	.+8      	; 0x13e0 <matrix_scan+0xb2>
    13d8:	82 eb       	ldi	r24, 0xB2	; 178
    13da:	91 e0       	ldi	r25, 0x01	; 1
    13dc:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    13e0:	80 91 bd 01 	lds	r24, 0x01BD
    13e4:	80 ff       	sbrs	r24, 0
    13e6:	0c c0       	rjmp	.+24     	; 0x1400 <matrix_scan+0xd2>
    13e8:	80 91 00 01 	lds	r24, 0x0100
    13ec:	1f 92       	push	r1
    13ee:	8f 93       	push	r24
    13f0:	ff 92       	push	r15
    13f2:	ef 92       	push	r14
    13f4:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	80 91 bd 01 	lds	r24, 0x01BD
    1404:	80 ff       	sbrs	r24, 0
    1406:	04 c0       	rjmp	.+8      	; 0x1410 <matrix_scan+0xe2>
    1408:	8b ea       	ldi	r24, 0xAB	; 171
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
            }
            debouncing = DEBOUNCE;
    1410:	d0 92 00 01 	sts	0x0100, r13
        }
        unselect_rows();
    1414:	0e 94 74 09 	call	0x12e8	; 0x12e8 <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1418:	1f 5f       	subi	r17, 0xFF	; 255
    141a:	21 96       	adiw	r28, 0x01	; 1
    141c:	16 30       	cpi	r17, 0x06	; 6
    141e:	09 f0       	breq	.+2      	; 0x1422 <matrix_scan+0xf4>
    1420:	97 cf       	rjmp	.-210    	; 0x1350 <matrix_scan+0x22>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    1422:	80 91 00 01 	lds	r24, 0x0100
    1426:	88 23       	and	r24, r24
    1428:	b1 f0       	breq	.+44     	; 0x1456 <matrix_scan+0x128>
        if (--debouncing) {
    142a:	81 50       	subi	r24, 0x01	; 1
    142c:	80 93 00 01 	sts	0x0100, r24
    1430:	88 23       	and	r24, r24
    1432:	39 f0       	breq	.+14     	; 0x1442 <matrix_scan+0x114>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1434:	8f e9       	ldi	r24, 0x9F	; 159
    1436:	9f e0       	ldi	r25, 0x0F	; 15
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <matrix_scan+0x10a>
    143c:	00 c0       	rjmp	.+0      	; 0x143e <matrix_scan+0x110>
    143e:	00 00       	nop
    1440:	0a c0       	rjmp	.+20     	; 0x1456 <matrix_scan+0x128>
    1442:	a0 e4       	ldi	r26, 0x40	; 64
    1444:	b1 e0       	ldi	r27, 0x01	; 1
    1446:	ea e3       	ldi	r30, 0x3A	; 58
    1448:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    144a:	81 91       	ld	r24, Z+
    144c:	8d 93       	st	X+, r24

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	e0 34       	cpi	r30, 0x40	; 64
    1452:	f9 07       	cpc	r31, r25
    1454:	d1 f7       	brne	.-12     	; 0x144a <matrix_scan+0x11c>
            }
        }
    }

    return 1;
}
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	ff 90       	pop	r15
    1462:	ef 90       	pop	r14
    1464:	df 90       	pop	r13
    1466:	08 95       	ret

00001468 <matrix_is_on>:
}

inline
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix[row] & ((matrix_row_t)1<<col));
    1468:	e8 2f       	mov	r30, r24
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	e0 5c       	subi	r30, 0xC0	; 192
    146e:	fe 4f       	sbci	r31, 0xFE	; 254
    1470:	20 81       	ld	r18, Z
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 c0       	rjmp	.+4      	; 0x147e <matrix_is_on+0x16>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	6a 95       	dec	r22
    1480:	e2 f7       	brpl	.-8      	; 0x147a <matrix_is_on+0x12>
    1482:	28 23       	and	r18, r24
    1484:	39 23       	and	r19, r25
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	23 2b       	or	r18, r19
    148a:	09 f4       	brne	.+2      	; 0x148e <matrix_is_on+0x26>
    148c:	80 e0       	ldi	r24, 0x00	; 0
}
    148e:	08 95       	ret

00001490 <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    1490:	e8 2f       	mov	r30, r24
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	e0 5c       	subi	r30, 0xC0	; 192
    1496:	fe 4f       	sbci	r31, 0xFE	; 254
}
    1498:	80 81       	ld	r24, Z
    149a:	08 95       	ret

0000149c <matrix_print>:

void matrix_print(void)
{
    149c:	cf 92       	push	r12
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    14ac:	84 e9       	ldi	r24, 0x94	; 148
    14ae:	91 e0       	ldi	r25, 0x01	; 1
    14b0:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    14b4:	20 e4       	ldi	r18, 0x40	; 64
    14b6:	e2 2e       	mov	r14, r18
    14b8:	21 e0       	ldi	r18, 0x01	; 1
    14ba:	f2 2e       	mov	r15, r18
    14bc:	c0 e0       	ldi	r28, 0x00	; 0
    14be:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    14c0:	3f e8       	ldi	r19, 0x8F	; 143
    14c2:	c3 2e       	mov	r12, r19
    14c4:	31 e0       	ldi	r19, 0x01	; 1
    14c6:	d3 2e       	mov	r13, r19
        pbin_reverse16(matrix_get_row(row));
    14c8:	06 e8       	ldi	r16, 0x86	; 134
    14ca:	11 e0       	ldi	r17, 0x01	; 1

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	df 92       	push	r13
    14d2:	cf 92       	push	r12
    14d4:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    14d8:	8c e8       	ldi	r24, 0x8C	; 140
    14da:	91 e0       	ldi	r25, 0x01	; 1
    14dc:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    14e0:	f7 01       	movw	r30, r14
    14e2:	81 91       	ld	r24, Z+
    14e4:	7f 01       	movw	r14, r30
void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	0e 94 9e 21 	call	0x433c	; 0x433c <bitrev16>
    14ec:	9f 93       	push	r25
    14ee:	8f 93       	push	r24
    14f0:	1f 93       	push	r17
    14f2:	0f 93       	push	r16
    14f4:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
        print("\n");
    14f8:	84 e8       	ldi	r24, 0x84	; 132
    14fa:	91 e0       	ldi	r25, 0x01	; 1
    14fc:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    1500:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    1502:	8d b7       	in	r24, 0x3d	; 61
    1504:	9e b7       	in	r25, 0x3e	; 62
    1506:	08 96       	adiw	r24, 0x08	; 8
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	9e bf       	out	0x3e, r25	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	8d bf       	out	0x3d, r24	; 61
    1512:	c6 30       	cpi	r28, 0x06	; 6
    1514:	d1 05       	cpc	r29, r1
    1516:	d1 f6       	brne	.-76     	; 0x14cc <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	ff 90       	pop	r15
    1522:	ef 90       	pop	r14
    1524:	df 90       	pop	r13
    1526:	cf 90       	pop	r12
    1528:	08 95       	ret

0000152a <backlight_set>:
/* Backlight pin configuration
 * PWM:  PB5 (RevRS)
 * GPIO: PF7  PF6  PF5
 */
void backlight_set(uint8_t level)
{
    152a:	cf 93       	push	r28
    152c:	c8 2f       	mov	r28, r24
    backlight_mode = level;
    152e:	80 93 46 01 	sts	0x0146, r24
    switch (level) {
    1532:	87 30       	cpi	r24, 0x07	; 7
    1534:	90 f4       	brcc	.+36     	; 0x155a <backlight_set+0x30>
    1536:	84 30       	cpi	r24, 0x04	; 4
    1538:	f8 f4       	brcc	.+62     	; 0x1578 <backlight_set+0x4e>
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	a8 f1       	brcs	.+106    	; 0x15a8 <backlight_set+0x7e>
        case 1:
        case 2:
        case 3:
            softpwm_led_enable();
    153e:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <softpwm_led_enable>
            fading_led_disable_all();
    1542:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <fading_led_disable_all>
            breathing_led_disable_all();
    1546:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <breathing_led_disable_all>
            softpwm_led_set_all(pgm_read_byte(&backlight_table[level]));
    154a:	ec 2f       	mov	r30, r28
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	e4 54       	subi	r30, 0x44	; 68
    1550:	fe 4f       	sbci	r31, 0xFE	; 254
    1552:	84 91       	lpm	r24, Z
            fading_led_disable_all();
            breathing_led_disable_all();
            softpwm_led_disable();
            break;
    }
}
    1554:	cf 91       	pop	r28
        case 2:
        case 3:
            softpwm_led_enable();
            fading_led_disable_all();
            breathing_led_disable_all();
            softpwm_led_set_all(pgm_read_byte(&backlight_table[level]));
    1556:	0c 94 39 2e 	jmp	0x5c72	; 0x5c72 <softpwm_led_set_all>
 * GPIO: PF7  PF6  PF5
 */
void backlight_set(uint8_t level)
{
    backlight_mode = level;
    switch (level) {
    155a:	87 30       	cpi	r24, 0x07	; 7
    155c:	c1 f0       	breq	.+48     	; 0x158e <backlight_set+0x64>
    155e:	88 30       	cpi	r24, 0x08	; 8
    1560:	19 f5       	brne	.+70     	; 0x15a8 <backlight_set+0x7e>
            breathing_led_disable_all();
            fading_led_set_direction_all(FADING_LED_FADE_IN);
            fading_led_set_duration(4);
            break;
        case 8:
            softpwm_led_enable();
    1562:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <softpwm_led_enable>
            fading_led_enable_all();
    1566:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <fading_led_enable_all>
            breathing_led_disable_all();
    156a:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <breathing_led_disable_all>
            fading_led_set_direction_all(FADING_LED_FADE_OUT);
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <fading_led_set_direction_all>
            fading_led_set_duration(2);
    1574:	82 e0       	ldi	r24, 0x02	; 2
    1576:	15 c0       	rjmp	.+42     	; 0x15a2 <backlight_set+0x78>
            softpwm_led_set_all(pgm_read_byte(&backlight_table[level]));
            break;
        case 4:
        case 5:
        case 6:
            softpwm_led_enable();
    1578:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <softpwm_led_enable>
            breathing_led_enable_all();
    157c:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <breathing_led_enable_all>
            fading_led_disable_all();
    1580:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <fading_led_disable_all>
            breathing_led_set_duration(6 - level);
    1584:	86 e0       	ldi	r24, 0x06	; 6
    1586:	8c 1b       	sub	r24, r28
            fading_led_disable_all();
            breathing_led_disable_all();
            softpwm_led_disable();
            break;
    }
}
    1588:	cf 91       	pop	r28
        case 5:
        case 6:
            softpwm_led_enable();
            breathing_led_enable_all();
            fading_led_disable_all();
            breathing_led_set_duration(6 - level);
    158a:	0c 94 b8 2e 	jmp	0x5d70	; 0x5d70 <breathing_led_set_duration>
            break;
        case 7:
            softpwm_led_enable();
    158e:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <softpwm_led_enable>
            fading_led_enable_all();
    1592:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <fading_led_enable_all>
            breathing_led_disable_all();
    1596:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <breathing_led_disable_all>
            fading_led_set_direction_all(FADING_LED_FADE_IN);
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	0e 94 9e 2e 	call	0x5d3c	; 0x5d3c <fading_led_set_direction_all>
            fading_led_set_duration(4);
    15a0:	84 e0       	ldi	r24, 0x04	; 4
            fading_led_disable_all();
            breathing_led_disable_all();
            softpwm_led_disable();
            break;
    }
}
    15a2:	cf 91       	pop	r28
        case 8:
            softpwm_led_enable();
            fading_led_enable_all();
            breathing_led_disable_all();
            fading_led_set_direction_all(FADING_LED_FADE_OUT);
            fading_led_set_duration(2);
    15a4:	0c 94 ac 2e 	jmp	0x5d58	; 0x5d58 <fading_led_set_duration>
            break;
        case 0:
        default:
            fading_led_disable_all();
    15a8:	0e 94 89 2e 	call	0x5d12	; 0x5d12 <fading_led_disable_all>
            breathing_led_disable_all();
    15ac:	0e 94 b5 2e 	call	0x5d6a	; 0x5d6a <breathing_led_disable_all>
            softpwm_led_disable();
            break;
    }
}
    15b0:	cf 91       	pop	r28
            break;
        case 0:
        default:
            fading_led_disable_all();
            breathing_led_disable_all();
            softpwm_led_disable();
    15b2:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <softpwm_led_disable>

000015b6 <action_keyevent>:
    PORTF |=  (1<<PF7 | 1<<PF6 | 1<<PF5);
}
#endif

void action_keyevent(keyevent_t event)
{
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	00 d0       	rcall	.+0      	; 0x15be <action_keyevent+0x8>
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <action_keyevent+0xa>
    15c0:	1f 92       	push	r1
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	16 2f       	mov	r17, r22
    if (backlight_mode == 7) {
    15c8:	80 91 46 01 	lds	r24, 0x0146
    15cc:	87 30       	cpi	r24, 0x07	; 7
    15ce:	29 f4       	brne	.+10     	; 0x15da <action_keyevent+0x24>
        if (event.pressed) {
    15d0:	66 23       	and	r22, r22
    15d2:	19 f0       	breq	.+6      	; 0x15da <action_keyevent+0x24>
            softpwm_led_decrease_all(32);
    15d4:	80 e2       	ldi	r24, 0x20	; 32
    15d6:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <softpwm_led_decrease_all>
        }
    }
    if (backlight_mode == 8) {
    15da:	80 91 46 01 	lds	r24, 0x0146
    15de:	88 30       	cpi	r24, 0x08	; 8
    15e0:	69 f4       	brne	.+26     	; 0x15fc <action_keyevent+0x46>
        if (event.pressed) {
    15e2:	11 23       	and	r17, r17
    15e4:	59 f0       	breq	.+22     	; 0x15fc <action_keyevent+0x46>
            softpwm_led_increase_all(32);
    15e6:	80 e2       	ldi	r24, 0x20	; 32
        }
    }
}
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
            softpwm_led_decrease_all(32);
        }
    }
    if (backlight_mode == 8) {
        if (event.pressed) {
            softpwm_led_increase_all(32);
    15f8:	0c 94 58 2e 	jmp	0x5cb0	; 0x5cb0 <softpwm_led_increase_all>
        }
    }
}
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	08 95       	ret

0000160e <ledmap_get_code>:
    [4] = LEDMAP_BACKLIGHT,                     // PWM    - PB5
};

ledmap_t ledmap_get_code(uint8_t index)
{
    return (ledmap_t) { .code = pgm_read_word(&ledmaps[index]) };
    160e:	e8 2f       	mov	r30, r24
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	ee 0f       	add	r30, r30
    1614:	ff 1f       	adc	r31, r31
    1616:	e0 54       	subi	r30, 0x40	; 64
    1618:	fe 4f       	sbci	r31, 0xFE	; 254
}
    161a:	85 91       	lpm	r24, Z+
    161c:	94 91       	lpm	r25, Z
    161e:	08 95       	ret

00001620 <ledmap_led_init>:

void ledmap_led_init(void)
{
    DDRB  |=  (1<<PB2);
    1620:	22 9a       	sbi	0x04, 2	; 4
    PORTB |=  (1<<PB2);
    1622:	2a 9a       	sbi	0x05, 2	; 5
    DDRF  |=  (1<<PF7 | 1<<PF6 | 1<<PF5);
    1624:	80 b3       	in	r24, 0x10	; 16
    1626:	80 6e       	ori	r24, 0xE0	; 224
    1628:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<PF7 | 1<<PF6 | 1<<PF5);
    162a:	81 b3       	in	r24, 0x11	; 17
    162c:	80 6e       	ori	r24, 0xE0	; 224
    162e:	81 bb       	out	0x11, r24	; 17
    DDRB  |=  (1<<PB5);
    1630:	25 9a       	sbi	0x04, 5	; 4
    PORTB &= ~(1<<PB5);
    1632:	2d 98       	cbi	0x05, 5	; 5
    1634:	08 95       	ret

00001636 <ledmap_led_on>:
}

void ledmap_led_on(uint8_t index)
{
    switch (index) {
    1636:	82 30       	cpi	r24, 0x02	; 2
    1638:	79 f0       	breq	.+30     	; 0x1658 <ledmap_led_on+0x22>
    163a:	28 f4       	brcc	.+10     	; 0x1646 <ledmap_led_on+0x10>
    163c:	88 23       	and	r24, r24
    163e:	41 f0       	breq	.+16     	; 0x1650 <ledmap_led_on+0x1a>
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	41 f0       	breq	.+16     	; 0x1654 <ledmap_led_on+0x1e>
    1644:	08 95       	ret
    1646:	83 30       	cpi	r24, 0x03	; 3
    1648:	49 f0       	breq	.+18     	; 0x165c <ledmap_led_on+0x26>
    164a:	84 30       	cpi	r24, 0x04	; 4
    164c:	49 f0       	breq	.+18     	; 0x1660 <ledmap_led_on+0x2a>
    164e:	08 95       	ret
        case 0:
            PORTB &= ~(1<<PB2);
    1650:	2a 98       	cbi	0x05, 2	; 5
            break;
    1652:	08 95       	ret
        case 1:
            PORTF &= ~(1<<PF7);
    1654:	8f 98       	cbi	0x11, 7	; 17
            break;
    1656:	08 95       	ret
        case 2:
            PORTF &= ~(1<<PF6);
    1658:	8e 98       	cbi	0x11, 6	; 17
            break;
    165a:	08 95       	ret
        case 3:
            PORTF &= ~(1<<PF5);
    165c:	8d 98       	cbi	0x11, 5	; 17
            break;
    165e:	08 95       	ret
        case 4:
            PORTB |=  (1<<PB5);
    1660:	2d 9a       	sbi	0x05, 5	; 5
    1662:	08 95       	ret

00001664 <ledmap_led_off>:
    }
}

void ledmap_led_off(uint8_t index)
{
    switch (index) {
    1664:	82 30       	cpi	r24, 0x02	; 2
    1666:	79 f0       	breq	.+30     	; 0x1686 <ledmap_led_off+0x22>
    1668:	28 f4       	brcc	.+10     	; 0x1674 <ledmap_led_off+0x10>
    166a:	88 23       	and	r24, r24
    166c:	41 f0       	breq	.+16     	; 0x167e <ledmap_led_off+0x1a>
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	41 f0       	breq	.+16     	; 0x1682 <ledmap_led_off+0x1e>
    1672:	08 95       	ret
    1674:	83 30       	cpi	r24, 0x03	; 3
    1676:	49 f0       	breq	.+18     	; 0x168a <ledmap_led_off+0x26>
    1678:	84 30       	cpi	r24, 0x04	; 4
    167a:	49 f0       	breq	.+18     	; 0x168e <ledmap_led_off+0x2a>
    167c:	08 95       	ret
        case 0:
            PORTB |= (1<<PB2);
    167e:	2a 9a       	sbi	0x05, 2	; 5
            break;
    1680:	08 95       	ret
        case 1:
            PORTF |= (1<<PF7);
    1682:	8f 9a       	sbi	0x11, 7	; 17
            break;
    1684:	08 95       	ret
        case 2:
            PORTF |= (1<<PF6);
    1686:	8e 9a       	sbi	0x11, 6	; 17
            break;
    1688:	08 95       	ret
        case 3:
            PORTF |= (1<<PF5);
    168a:	8d 9a       	sbi	0x11, 5	; 17
            break;
    168c:	08 95       	ret
        case 4:
            PORTB &= ~(1<<PB5);
    168e:	2d 98       	cbi	0x05, 5	; 5
    1690:	08 95       	ret

00001692 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    1692:	80 91 58 01 	lds	r24, 0x0158
    1696:	08 95       	ret

00001698 <sendchar>:
{
    // Not wait once timeouted.
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1698:	90 91 05 02 	lds	r25, 0x0205
    169c:	94 30       	cpi	r25, 0x04	; 4
    169e:	09 f0       	breq	.+2      	; 0x16a2 <sendchar+0xa>
    16a0:	4d c0       	rjmp	.+154    	; 0x173c <sendchar+0xa4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    16a2:	90 91 e9 00 	lds	r25, 0x00E9
    16a6:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    16a8:	20 91 ec 00 	lds	r18, 0x00EC
    16ac:	20 ff       	sbrs	r18, 0
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <sendchar+0x1c>
    16b0:	20 e8       	ldi	r18, 0x80	; 128
    16b2:	01 c0       	rjmp	.+2      	; 0x16b6 <sendchar+0x1e>
    16b4:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    16b6:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16b8:	94 e0       	ldi	r25, 0x04	; 4
    16ba:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    16be:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    16c2:	90 ff       	sbrs	r25, 0
    16c4:	38 c0       	rjmp	.+112    	; 0x1736 <sendchar+0x9e>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    16c6:	90 91 ee 00 	lds	r25, 0x00EE
    16ca:	97 ff       	sbrs	r25, 7
    16cc:	34 c0       	rjmp	.+104    	; 0x1736 <sendchar+0x9e>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    16ce:	90 91 47 01 	lds	r25, 0x0147
    16d2:	99 23       	and	r25, r25
    16d4:	21 f0       	breq	.+8      	; 0x16de <sendchar+0x46>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16d6:	90 91 e8 00 	lds	r25, 0x00E8
    16da:	95 ff       	sbrs	r25, 5
    16dc:	2c c0       	rjmp	.+88     	; 0x1736 <sendchar+0x9e>
        goto ERROR_EXIT;
    }

    timeouted = false;
    16de:	10 92 47 01 	sts	0x0147, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    16e2:	96 e0       	ldi	r25, 0x06	; 6
    16e4:	30 91 e8 00 	lds	r19, 0x00E8
    16e8:	35 fd       	sbrc	r19, 5
    16ea:	15 c0       	rjmp	.+42     	; 0x1716 <sendchar+0x7e>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    16ec:	30 91 05 02 	lds	r19, 0x0205
    16f0:	34 30       	cpi	r19, 0x04	; 4
    16f2:	09 f5       	brne	.+66     	; 0x1736 <sendchar+0x9e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    16f4:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    16f8:	35 fd       	sbrc	r19, 5
    16fa:	1d c0       	rjmp	.+58     	; 0x1736 <sendchar+0x9e>
    16fc:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    16fe:	21 f4       	brne	.+8      	; 0x1708 <sendchar+0x70>
            timeouted = true;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	80 93 47 01 	sts	0x0147, r24
            goto ERROR_EXIT;
    1706:	17 c0       	rjmp	.+46     	; 0x1736 <sendchar+0x9e>
    1708:	ef e9       	ldi	r30, 0x9F	; 159
    170a:	ff e0       	ldi	r31, 0x0F	; 15
    170c:	31 97       	sbiw	r30, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <sendchar+0x74>
    1710:	00 c0       	rjmp	.+0      	; 0x1712 <sendchar+0x7a>
    1712:	00 00       	nop
    1714:	e7 cf       	rjmp	.-50     	; 0x16e4 <sendchar+0x4c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1716:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    171a:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed())
    171e:	85 fd       	sbrc	r24, 5
    1720:	05 c0       	rjmp	.+10     	; 0x172c <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1722:	80 91 e8 00 	lds	r24, 0x00E8
    1726:	8e 77       	andi	r24, 0x7E	; 126
    1728:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    172c:	2f 70       	andi	r18, 0x0F	; 15
    172e:	20 93 e9 00 	sts	0x00E9, r18
        Endpoint_ClearIN();

    Endpoint_SelectEndpoint(ep);
    return 0;
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	08 95       	ret
    1736:	2f 70       	andi	r18, 0x0F	; 15
    1738:	20 93 e9 00 	sts	0x00E9, r18
    // Not wait once timeouted.
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    173c:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    173e:	08 95       	ret

00001740 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	00 d0       	rcall	.+0      	; 0x1746 <send_consumer+0x6>
    1746:	1f 92       	push	r1
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    174c:	20 91 05 02 	lds	r18, 0x0205
    1750:	24 30       	cpi	r18, 0x04	; 4
    1752:	19 f5       	brne	.+70     	; 0x179a <send_consumer+0x5a>
        return;

    report_extra_t r = {
    1754:	23 e0       	ldi	r18, 0x03	; 3
    1756:	29 83       	std	Y+1, r18	; 0x01
    1758:	9b 83       	std	Y+3, r25	; 0x03
    175a:	8a 83       	std	Y+2, r24	; 0x02
    175c:	20 93 e9 00 	sts	0x00E9, r18
    1760:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1762:	90 91 e8 00 	lds	r25, 0x00E8
    1766:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1768:	95 fd       	sbrc	r25, 5
    176a:	06 c0       	rjmp	.+12     	; 0x1778 <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    176c:	95 ed       	ldi	r25, 0xD5	; 213
    176e:	9a 95       	dec	r25
    1770:	f1 f7       	brne	.-4      	; 0x176e <send_consumer+0x2e>
    1772:	00 00       	nop
    1774:	81 11       	cpse	r24, r1
    1776:	f5 cf       	rjmp	.-22     	; 0x1762 <send_consumer+0x22>
    1778:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    177c:	85 ff       	sbrs	r24, 5
    177e:	0d c0       	rjmp	.+26     	; 0x179a <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1780:	40 e0       	ldi	r20, 0x00	; 0
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	63 e0       	ldi	r22, 0x03	; 3
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	ce 01       	movw	r24, r28
    178a:	01 96       	adiw	r24, 0x01	; 1
    178c:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1790:	80 91 e8 00 	lds	r24, 0x00E8
    1794:	8e 77       	andi	r24, 0x7E	; 126
    1796:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	08 95       	ret

000017a6 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <send_system+0x6>
    17ac:	1f 92       	push	r1
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    17b2:	20 91 05 02 	lds	r18, 0x0205
    17b6:	24 30       	cpi	r18, 0x04	; 4
    17b8:	21 f5       	brne	.+72     	; 0x1802 <send_system+0x5c>
        return;

    report_extra_t r = {
    17ba:	22 e0       	ldi	r18, 0x02	; 2
    17bc:	29 83       	std	Y+1, r18	; 0x01
    17be:	9b 83       	std	Y+3, r25	; 0x03
    17c0:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17c2:	83 e0       	ldi	r24, 0x03	; 3
    17c4:	80 93 e9 00 	sts	0x00E9, r24
    17c8:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    17ca:	90 91 e8 00 	lds	r25, 0x00E8
    17ce:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    17d0:	95 fd       	sbrc	r25, 5
    17d2:	06 c0       	rjmp	.+12     	; 0x17e0 <send_system+0x3a>
    17d4:	95 ed       	ldi	r25, 0xD5	; 213
    17d6:	9a 95       	dec	r25
    17d8:	f1 f7       	brne	.-4      	; 0x17d6 <send_system+0x30>
    17da:	00 00       	nop
    17dc:	81 11       	cpse	r24, r1
    17de:	f5 cf       	rjmp	.-22     	; 0x17ca <send_system+0x24>
    17e0:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    17e4:	85 ff       	sbrs	r24, 5
    17e6:	0d c0       	rjmp	.+26     	; 0x1802 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    17e8:	40 e0       	ldi	r20, 0x00	; 0
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	63 e0       	ldi	r22, 0x03	; 3
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	ce 01       	movw	r24, r28
    17f2:	01 96       	adiw	r24, 0x01	; 1
    17f4:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17f8:	80 91 e8 00 	lds	r24, 0x00E8
    17fc:	8e 77       	andi	r24, 0x7E	; 126
    17fe:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	08 95       	ret

0000180e <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    180e:	20 91 05 02 	lds	r18, 0x0205
    1812:	24 30       	cpi	r18, 0x04	; 4
    1814:	f1 f4       	brne	.+60     	; 0x1852 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1816:	22 e0       	ldi	r18, 0x02	; 2
    1818:	20 93 e9 00 	sts	0x00E9, r18
    181c:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    181e:	30 91 e8 00 	lds	r19, 0x00E8
    1822:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1824:	35 fd       	sbrc	r19, 5
    1826:	06 c0       	rjmp	.+12     	; 0x1834 <send_mouse+0x26>
    1828:	35 ed       	ldi	r19, 0xD5	; 213
    182a:	3a 95       	dec	r19
    182c:	f1 f7       	brne	.-4      	; 0x182a <send_mouse+0x1c>
    182e:	00 00       	nop
    1830:	21 11       	cpse	r18, r1
    1832:	f5 cf       	rjmp	.-22     	; 0x181e <send_mouse+0x10>
    1834:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1838:	25 ff       	sbrs	r18, 5
    183a:	0b c0       	rjmp	.+22     	; 0x1852 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	50 e0       	ldi	r21, 0x00	; 0
    1840:	65 e0       	ldi	r22, 0x05	; 5
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1848:	80 91 e8 00 	lds	r24, 0x00E8
    184c:	8e 77       	andi	r24, 0x7E	; 126
    184e:	80 93 e8 00 	sts	0x00E8, r24
    1852:	08 95       	ret

00001854 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    185a:	80 91 05 02 	lds	r24, 0x0205
    185e:	84 30       	cpi	r24, 0x04	; 4
    1860:	09 f0       	breq	.+2      	; 0x1864 <send_keyboard+0x10>
    1862:	43 c0       	rjmp	.+134    	; 0x18ea <send_keyboard+0x96>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    1864:	80 91 0c 01 	lds	r24, 0x010C
    1868:	88 23       	and	r24, r24
    186a:	c1 f0       	breq	.+48     	; 0x189c <send_keyboard+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    186c:	85 e0       	ldi	r24, 0x05	; 5
    186e:	80 93 e9 00 	sts	0x00E9, r24
    1872:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1874:	90 91 e8 00 	lds	r25, 0x00E8
    1878:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    187a:	95 fd       	sbrc	r25, 5
    187c:	06 c0       	rjmp	.+12     	; 0x188a <send_keyboard+0x36>
    187e:	95 e1       	ldi	r25, 0x15	; 21
    1880:	9a 95       	dec	r25
    1882:	f1 f7       	brne	.-4      	; 0x1880 <send_keyboard+0x2c>
    1884:	00 00       	nop
    1886:	81 11       	cpse	r24, r1
    1888:	f5 cf       	rjmp	.-22     	; 0x1874 <send_keyboard+0x20>
    188a:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    188e:	85 ff       	sbrs	r24, 5
    1890:	2c c0       	rjmp	.+88     	; 0x18ea <send_keyboard+0x96>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	60 e1       	ldi	r22, 0x10	; 16
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	17 c0       	rjmp	.+46     	; 0x18ca <send_keyboard+0x76>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	80 93 e9 00 	sts	0x00E9, r24
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    18a4:	90 91 e8 00 	lds	r25, 0x00E8
    18a8:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    18aa:	95 fd       	sbrc	r25, 5
    18ac:	06 c0       	rjmp	.+12     	; 0x18ba <send_keyboard+0x66>
    18ae:	95 ed       	ldi	r25, 0xD5	; 213
    18b0:	9a 95       	dec	r25
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <send_keyboard+0x5c>
    18b4:	00 00       	nop
    18b6:	81 11       	cpse	r24, r1
    18b8:	f5 cf       	rjmp	.-22     	; 0x18a4 <send_keyboard+0x50>
    18ba:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    18be:	85 ff       	sbrs	r24, 5
    18c0:	14 c0       	rjmp	.+40     	; 0x18ea <send_keyboard+0x96>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	50 e0       	ldi	r21, 0x00	; 0
    18c6:	68 e0       	ldi	r22, 0x08	; 8
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	ce 01       	movw	r24, r28
    18cc:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18d0:	80 91 e8 00 	lds	r24, 0x00E8
    18d4:	8e 77       	andi	r24, 0x7E	; 126
    18d6:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    18da:	80 e1       	ldi	r24, 0x10	; 16
    18dc:	fe 01       	movw	r30, r28
    18de:	a8 e4       	ldi	r26, 0x48	; 72
    18e0:	b1 e0       	ldi	r27, 0x01	; 1
    18e2:	01 90       	ld	r0, Z+
    18e4:	0d 92       	st	X+, r0
    18e6:	8a 95       	dec	r24
    18e8:	e1 f7       	brne	.-8      	; 0x18e2 <send_keyboard+0x8e>
}
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	08 95       	ret

000018f0 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	92 e0       	ldi	r25, 0x02	; 2
    18f4:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    18f8:	80 91 04 02 	lds	r24, 0x0204
    18fc:	81 11       	cpse	r24, r1
    18fe:	09 c0       	rjmp	.+18     	; 0x1912 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    1900:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <USB_Disable>
        USB_Init();
    1904:	0e 94 4b 10 	call	0x2096	; 0x2096 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1908:	80 91 e2 00 	lds	r24, 0x00E2
    190c:	84 60       	ori	r24, 0x04	; 4
    190e:	80 93 e2 00 	sts	0x00E2, r24
    1912:	08 95       	ret

00001914 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    1914:	8c ef       	ldi	r24, 0xFC	; 252
    1916:	91 e0       	ldi	r25, 0x01	; 1
    1918:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    191c:	10 92 04 02 	sts	0x0204, r1
    1920:	08 95       	ret

00001922 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    1922:	88 ef       	ldi	r24, 0xF8	; 248
    1924:	91 e0       	ldi	r25, 0x01	; 1
    1926:	0c 94 b6 08 	jmp	0x116c	; 0x116c <xputs>

0000192a <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    192a:	84 ef       	ldi	r24, 0xF4	; 244
    192c:	91 e0       	ldi	r25, 0x01	; 1
    192e:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    matrix_power_down();
    1932:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <matrix_power_down>

00001936 <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    1936:	80 ef       	ldi	r24, 0xF0	; 240
    1938:	91 e0       	ldi	r25, 0x01	; 1
    193a:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    suspend_wakeup_init();
    193e:	0c 94 f5 21 	jmp	0x43ea	; 0x43ea <suspend_wakeup_init>

00001942 <EVENT_USB_Device_StartOfFrame>:
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1942:	80 91 05 02 	lds	r24, 0x0205
    1946:	84 30       	cpi	r24, 0x04	; 4
    1948:	49 f5       	brne	.+82     	; 0x199c <EVENT_USB_Device_StartOfFrame+0x5a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    194a:	80 91 e9 00 	lds	r24, 0x00E9
    194e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1950:	90 91 ec 00 	lds	r25, 0x00EC
    1954:	90 ff       	sbrs	r25, 0
    1956:	02 c0       	rjmp	.+4      	; 0x195c <EVENT_USB_Device_StartOfFrame+0x1a>
    1958:	90 e8       	ldi	r25, 0x80	; 128
    195a:	01 c0       	rjmp	.+2      	; 0x195e <EVENT_USB_Device_StartOfFrame+0x1c>
    195c:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    195e:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1960:	84 e0       	ldi	r24, 0x04	; 4
    1962:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1966:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    196a:	80 ff       	sbrs	r24, 0
    196c:	14 c0       	rjmp	.+40     	; 0x1996 <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    196e:	80 91 ee 00 	lds	r24, 0x00EE
    1972:	87 ff       	sbrs	r24, 7
    1974:	10 c0       	rjmp	.+32     	; 0x1996 <EVENT_USB_Device_StartOfFrame+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1976:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    197a:	85 ff       	sbrs	r24, 5
    197c:	03 c0       	rjmp	.+6      	; 0x1984 <EVENT_USB_Device_StartOfFrame+0x42>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    197e:	10 92 f1 00 	sts	0x00F1, r1
    1982:	f9 cf       	rjmp	.-14     	; 0x1976 <EVENT_USB_Device_StartOfFrame+0x34>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1984:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1988:	80 ff       	sbrs	r24, 0
    198a:	05 c0       	rjmp	.+10     	; 0x1996 <EVENT_USB_Device_StartOfFrame+0x54>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    198c:	80 91 e8 00 	lds	r24, 0x00E8
    1990:	8e 77       	andi	r24, 0x7E	; 126
    1992:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1996:	9f 70       	andi	r25, 0x0F	; 15
    1998:	90 93 e9 00 	sts	0x00E9, r25
    199c:	08 95       	ret

0000199e <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    199e:	42 e0       	ldi	r20, 0x02	; 2
    19a0:	61 ec       	ldi	r22, 0xC1	; 193
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <Endpoint_ConfigureEndpoint_Prv>
    19a8:	42 e0       	ldi	r20, 0x02	; 2
    19aa:	61 ec       	ldi	r22, 0xC1	; 193
    19ac:	82 e0       	ldi	r24, 0x02	; 2
    19ae:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <Endpoint_ConfigureEndpoint_Prv>
    19b2:	42 e0       	ldi	r20, 0x02	; 2
    19b4:	61 ec       	ldi	r22, 0xC1	; 193
    19b6:	83 e0       	ldi	r24, 0x03	; 3
    19b8:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <Endpoint_ConfigureEndpoint_Prv>
    19bc:	46 e2       	ldi	r20, 0x26	; 38
    19be:	61 ec       	ldi	r22, 0xC1	; 193
    19c0:	84 e0       	ldi	r24, 0x04	; 4
    19c2:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <Endpoint_ConfigureEndpoint_Prv>
    19c6:	42 e1       	ldi	r20, 0x12	; 18
    19c8:	61 ec       	ldi	r22, 0xC1	; 193
    19ca:	85 e0       	ldi	r24, 0x05	; 5
    19cc:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <Endpoint_ConfigureEndpoint_Prv>

000019d0 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    19d0:	80 91 07 02 	lds	r24, 0x0207
    19d4:	83 30       	cpi	r24, 0x03	; 3
    19d6:	09 f4       	brne	.+2      	; 0x19da <EVENT_USB_Device_ControlRequest+0xa>
    19d8:	55 c0       	rjmp	.+170    	; 0x1a84 <EVENT_USB_Device_ControlRequest+0xb4>
    19da:	30 f4       	brcc	.+12     	; 0x19e8 <EVENT_USB_Device_ControlRequest+0x18>
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	71 f0       	breq	.+28     	; 0x19fc <EVENT_USB_Device_ControlRequest+0x2c>
    19e0:	82 30       	cpi	r24, 0x02	; 2
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <EVENT_USB_Device_ControlRequest+0x16>
    19e4:	95 c0       	rjmp	.+298    	; 0x1b10 <EVENT_USB_Device_ControlRequest+0x140>
    19e6:	08 95       	ret
    19e8:	8a 30       	cpi	r24, 0x0A	; 10
    19ea:	09 f4       	brne	.+2      	; 0x19ee <EVENT_USB_Device_ControlRequest+0x1e>
    19ec:	81 c0       	rjmp	.+258    	; 0x1af0 <EVENT_USB_Device_ControlRequest+0x120>
    19ee:	8b 30       	cpi	r24, 0x0B	; 11
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <EVENT_USB_Device_ControlRequest+0x24>
    19f2:	60 c0       	rjmp	.+192    	; 0x1ab4 <EVENT_USB_Device_ControlRequest+0xe4>
    19f4:	89 30       	cpi	r24, 0x09	; 9
    19f6:	09 f0       	breq	.+2      	; 0x19fa <EVENT_USB_Device_ControlRequest+0x2a>
    19f8:	a3 c0       	rjmp	.+326    	; 0x1b40 <EVENT_USB_Device_ControlRequest+0x170>
    19fa:	20 c0       	rjmp	.+64     	; 0x1a3c <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    19fc:	80 91 06 02 	lds	r24, 0x0206
    1a00:	81 3a       	cpi	r24, 0xA1	; 161
    1a02:	09 f0       	breq	.+2      	; 0x1a06 <EVENT_USB_Device_ControlRequest+0x36>
    1a04:	9d c0       	rjmp	.+314    	; 0x1b40 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a06:	80 91 e8 00 	lds	r24, 0x00E8
    1a0a:	87 7f       	andi	r24, 0xF7	; 247
    1a0c:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1a10:	80 91 0a 02 	lds	r24, 0x020A
    1a14:	90 91 0b 02 	lds	r25, 0x020B
    1a18:	89 2b       	or	r24, r25
    1a1a:	21 f0       	breq	.+8      	; 0x1a24 <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    1a1c:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	03 c0       	rjmp	.+6      	; 0x1a2a <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    1a24:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1a26:	88 e4       	ldi	r24, 0x48	; 72
    1a28:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1a2a:	70 e0       	ldi	r23, 0x00	; 0
    1a2c:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a30:	80 91 e8 00 	lds	r24, 0x00E8
    1a34:	8b 77       	andi	r24, 0x7B	; 123
    1a36:	80 93 e8 00 	sts	0x00E8, r24
    1a3a:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1a3c:	80 91 06 02 	lds	r24, 0x0206
    1a40:	81 32       	cpi	r24, 0x21	; 33
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <EVENT_USB_Device_ControlRequest+0x76>
    1a44:	7d c0       	rjmp	.+250    	; 0x1b40 <EVENT_USB_Device_ControlRequest+0x170>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1a46:	80 91 0a 02 	lds	r24, 0x020A
    1a4a:	90 91 0b 02 	lds	r25, 0x020B
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	19 f0       	breq	.+6      	; 0x1a58 <EVENT_USB_Device_ControlRequest+0x88>
    1a52:	04 97       	sbiw	r24, 0x04	; 4
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <EVENT_USB_Device_ControlRequest+0x88>
    1a56:	74 c0       	rjmp	.+232    	; 0x1b40 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a58:	80 91 e8 00 	lds	r24, 0x00E8
    1a5c:	87 7f       	andi	r24, 0xF7	; 247
    1a5e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a62:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1a66:	82 fd       	sbrc	r24, 2
    1a68:	05 c0       	rjmp	.+10     	; 0x1a74 <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a6a:	80 91 05 02 	lds	r24, 0x0205
    1a6e:	81 11       	cpse	r24, r1
    1a70:	f8 cf       	rjmp	.-16     	; 0x1a62 <EVENT_USB_Device_ControlRequest+0x92>
    1a72:	66 c0       	rjmp	.+204    	; 0x1b40 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1a74:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    1a78:	80 93 58 01 	sts	0x0158, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a7c:	80 91 e8 00 	lds	r24, 0x00E8
    1a80:	8b 77       	andi	r24, 0x7B	; 123
    1a82:	5a c0       	rjmp	.+180    	; 0x1b38 <EVENT_USB_Device_ControlRequest+0x168>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1a84:	80 91 06 02 	lds	r24, 0x0206
    1a88:	81 3a       	cpi	r24, 0xA1	; 161
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <EVENT_USB_Device_ControlRequest+0xbe>
    1a8c:	59 c0       	rjmp	.+178    	; 0x1b40 <EVENT_USB_Device_ControlRequest+0x170>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1a8e:	80 91 0a 02 	lds	r24, 0x020A
    1a92:	90 91 0b 02 	lds	r25, 0x020B
    1a96:	89 2b       	or	r24, r25
    1a98:	09 f0       	breq	.+2      	; 0x1a9c <EVENT_USB_Device_ControlRequest+0xcc>
    1a9a:	52 c0       	rjmp	.+164    	; 0x1b40 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1a9c:	80 91 e8 00 	lds	r24, 0x00E8
    1aa0:	87 7f       	andi	r24, 0xF7	; 247
    1aa2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1aa6:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1aaa:	80 ff       	sbrs	r24, 0
    1aac:	fc cf       	rjmp	.-8      	; 0x1aa6 <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    1aae:	80 91 0b 01 	lds	r24, 0x010B
    1ab2:	3d c0       	rjmp	.+122    	; 0x1b2e <EVENT_USB_Device_ControlRequest+0x15e>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1ab4:	80 91 06 02 	lds	r24, 0x0206
    1ab8:	81 32       	cpi	r24, 0x21	; 33
    1aba:	09 f0       	breq	.+2      	; 0x1abe <EVENT_USB_Device_ControlRequest+0xee>
    1abc:	41 c0       	rjmp	.+130    	; 0x1b40 <EVENT_USB_Device_ControlRequest+0x170>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1abe:	80 91 0a 02 	lds	r24, 0x020A
    1ac2:	90 91 0b 02 	lds	r25, 0x020B
    1ac6:	89 2b       	or	r24, r25
    1ac8:	d9 f5       	brne	.+118    	; 0x1b40 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1aca:	80 91 e8 00 	lds	r24, 0x00E8
    1ace:	87 7f       	andi	r24, 0xF7	; 247
    1ad0:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1ad4:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <Endpoint_ClearStatusStage>

                    keyboard_protocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1ad8:	90 91 08 02 	lds	r25, 0x0208
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	91 11       	cpse	r25, r1
    1ae0:	01 c0       	rjmp	.+2      	; 0x1ae4 <EVENT_USB_Device_ControlRequest+0x114>
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	80 93 0b 01 	sts	0x010B, r24
#ifdef NKRO_ENABLE
                    keyboard_nkro = !!keyboard_protocol;
    1ae8:	80 93 0c 01 	sts	0x010C, r24
#endif
                    clear_keyboard();
    1aec:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1af0:	80 91 06 02 	lds	r24, 0x0206
    1af4:	81 32       	cpi	r24, 0x21	; 33
    1af6:	21 f5       	brne	.+72     	; 0x1b40 <EVENT_USB_Device_ControlRequest+0x170>
    1af8:	80 91 e8 00 	lds	r24, 0x00E8
    1afc:	87 7f       	andi	r24, 0xF7	; 247
    1afe:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    1b02:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1b06:	80 91 09 02 	lds	r24, 0x0209
    1b0a:	80 93 59 01 	sts	0x0159, r24
    1b0e:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1b10:	80 91 06 02 	lds	r24, 0x0206
    1b14:	81 3a       	cpi	r24, 0xA1	; 161
    1b16:	a1 f4       	brne	.+40     	; 0x1b40 <EVENT_USB_Device_ControlRequest+0x170>
    1b18:	80 91 e8 00 	lds	r24, 0x00E8
    1b1c:	87 7f       	andi	r24, 0xF7	; 247
    1b1e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b22:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    1b26:	80 ff       	sbrs	r24, 0
    1b28:	fc cf       	rjmp	.-8      	; 0x1b22 <EVENT_USB_Device_ControlRequest+0x152>
                Endpoint_Write_8(keyboard_idle);
    1b2a:	80 91 59 01 	lds	r24, 0x0159
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b2e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b32:	80 91 e8 00 	lds	r24, 0x00E8
    1b36:	8e 77       	andi	r24, 0x7E	; 126
    1b38:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1b3c:	0c 94 9d 0f 	jmp	0x1f3a	; 0x1f3a <Endpoint_ClearStatusStage>
    1b40:	08 95       	ret

00001b42 <main>:
 * main
 ******************************************************************************/
static void SetupHardware(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1b42:	84 b7       	in	r24, 0x34	; 52
    1b44:	87 7f       	andi	r24, 0xF7	; 247
    1b46:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    1b48:	88 e1       	ldi	r24, 0x18	; 24
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	80 93 60 00 	sts	0x0060, r24
    1b52:	10 92 60 00 	sts	0x0060, r1
    1b56:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	80 e8       	ldi	r24, 0x80	; 128
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	80 93 61 00 	sts	0x0061, r24
    1b64:	90 93 61 00 	sts	0x0061, r25
    1b68:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);

    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1b6a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <USB_Disable>

    USB_Init();
    1b6e:	0e 94 4b 10 	call	0x2096	; 0x2096 <USB_Init>
    1b72:	80 91 e2 00 	lds	r24, 0x00E2
    1b76:	84 60       	ori	r24, 0x04	; 4
    1b78:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    1b7c:	8c e4       	ldi	r24, 0x4C	; 76
    1b7e:	9b e0       	ldi	r25, 0x0B	; 11
    1b80:	0e 94 34 21 	call	0x4268	; 0x4268 <print_set_sendchar>

int main(void)  __attribute__ ((weak));
int main(void)
{
    SetupHardware();
    sei();
    1b84:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1b86:	80 91 05 02 	lds	r24, 0x0205
    1b8a:	84 30       	cpi	r24, 0x04	; 4
    1b8c:	e1 f7       	brne	.-8      	; 0x1b86 <main+0x44>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    1b8e:	8f ed       	ldi	r24, 0xDF	; 223
    1b90:	91 e0       	ldi	r25, 0x01	; 1
    1b92:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>

    /* init modules */
    keyboard_init();
    1b96:	0e 94 57 13 	call	0x26ae	; 0x26ae <keyboard_init>
    host_set_driver(&lufa_driver);
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	91 e0       	ldi	r25, 0x01	; 1
    1b9e:	0e 94 c5 12 	call	0x258a	; 0x258a <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    1ba2:	8e ec       	ldi	r24, 0xCE	; 206
    1ba4:	91 e0       	ldi	r25, 0x01	; 1
    1ba6:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1baa:	80 91 05 02 	lds	r24, 0x0205
    1bae:	85 30       	cpi	r24, 0x05	; 5
    1bb0:	89 f4       	brne	.+34     	; 0x1bd4 <main+0x92>
            print("[s]");
    1bb2:	8a ec       	ldi	r24, 0xCA	; 202
    1bb4:	91 e0       	ldi	r25, 0x01	; 1
    1bb6:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
            suspend_power_down();
    1bba:	0e 94 b8 21 	call	0x4370	; 0x4370 <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1bbe:	80 91 03 02 	lds	r24, 0x0203
    1bc2:	88 23       	and	r24, r24
    1bc4:	91 f3       	breq	.-28     	; 0x1baa <main+0x68>
    1bc6:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <suspend_wakeup_condition>
    1bca:	88 23       	and	r24, r24
    1bcc:	71 f3       	breq	.-36     	; 0x1baa <main+0x68>
                    USB_Device_SendRemoteWakeup();
    1bce:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <USB_Device_SendRemoteWakeup>
    1bd2:	eb cf       	rjmp	.-42     	; 0x1baa <main+0x68>
            }
        }

        keyboard_task();
    1bd4:	0e 94 8d 13 	call	0x271a	; 0x271a <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    1bd8:	e8 cf       	rjmp	.-48     	; 0x1baa <main+0x68>

00001bda <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    1bda:	29 2f       	mov	r18, r25
    1bdc:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1bde:	23 30       	cpi	r18, 0x03	; 3
    1be0:	31 05       	cpc	r19, r1
    1be2:	a9 f0       	breq	.+42     	; 0x1c0e <CALLBACK_USB_GetDescriptor+0x34>
    1be4:	6c f4       	brge	.+26     	; 0x1c00 <CALLBACK_USB_GetDescriptor+0x26>
    1be6:	21 30       	cpi	r18, 0x01	; 1
    1be8:	31 05       	cpc	r19, r1
    1bea:	09 f4       	brne	.+2      	; 0x1bee <CALLBACK_USB_GetDescriptor+0x14>
    1bec:	42 c0       	rjmp	.+132    	; 0x1c72 <CALLBACK_USB_GetDescriptor+0x98>
    1bee:	22 30       	cpi	r18, 0x02	; 2
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	09 f0       	breq	.+2      	; 0x1bf6 <CALLBACK_USB_GetDescriptor+0x1c>
    1bf4:	43 c0       	rjmp	.+134    	; 0x1c7c <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1bf6:	8d e8       	ldi	r24, 0x8D	; 141
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    1bfa:	2a e2       	ldi	r18, 0x2A	; 42
    1bfc:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    1bfe:	42 c0       	rjmp	.+132    	; 0x1c84 <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1c00:	21 32       	cpi	r18, 0x21	; 33
    1c02:	31 05       	cpc	r19, r1
    1c04:	c9 f0       	breq	.+50     	; 0x1c38 <CALLBACK_USB_GetDescriptor+0x5e>
    1c06:	22 32       	cpi	r18, 0x22	; 34
    1c08:	31 05       	cpc	r19, r1
    1c0a:	19 f1       	breq	.+70     	; 0x1c52 <CALLBACK_USB_GetDescriptor+0x78>
    1c0c:	37 c0       	rjmp	.+110    	; 0x1c7c <CALLBACK_USB_GetDescriptor+0xa2>
    1c0e:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1c10:	81 30       	cpi	r24, 0x01	; 1
    1c12:	91 05       	cpc	r25, r1
    1c14:	41 f0       	breq	.+16     	; 0x1c26 <CALLBACK_USB_GetDescriptor+0x4c>
    1c16:	82 30       	cpi	r24, 0x02	; 2
    1c18:	91 05       	cpc	r25, r1
    1c1a:	41 f0       	breq	.+16     	; 0x1c2c <CALLBACK_USB_GetDescriptor+0x52>
    1c1c:	89 2b       	or	r24, r25
    1c1e:	71 f5       	brne	.+92     	; 0x1c7c <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1c20:	e6 e2       	ldi	r30, 0x26	; 38
    1c22:	f2 e0       	ldi	r31, 0x02	; 2
    1c24:	05 c0       	rjmp	.+10     	; 0x1c30 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1c26:	e2 e1       	ldi	r30, 0x12	; 18
    1c28:	f2 e0       	ldi	r31, 0x02	; 2
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1c2c:	e4 e0       	ldi	r30, 0x04	; 4
    1c2e:	f2 e0       	ldi	r31, 0x02	; 2
    1c30:	84 91       	lpm	r24, Z
    1c32:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    1c34:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    1c36:	26 c0       	rjmp	.+76     	; 0x1c84 <CALLBACK_USB_GetDescriptor+0xaa>
    1c38:	65 30       	cpi	r22, 0x05	; 5
    1c3a:	00 f5       	brcc	.+64     	; 0x1c7c <CALLBACK_USB_GetDescriptor+0xa2>
    1c3c:	e6 2f       	mov	r30, r22
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	ee 0f       	add	r30, r30
    1c42:	ff 1f       	adc	r31, r31
    1c44:	ec 5d       	subi	r30, 0xDC	; 220
    1c46:	fe 4f       	sbci	r31, 0xFE	; 254
    1c48:	20 81       	ld	r18, Z
    1c4a:	31 81       	ldd	r19, Z+1	; 0x01
    1c4c:	89 e0       	ldi	r24, 0x09	; 9
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	19 c0       	rjmp	.+50     	; 0x1c84 <CALLBACK_USB_GetDescriptor+0xaa>
    1c52:	65 30       	cpi	r22, 0x05	; 5
    1c54:	98 f4       	brcc	.+38     	; 0x1c7c <CALLBACK_USB_GetDescriptor+0xa2>
    1c56:	e6 2f       	mov	r30, r22
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	df 01       	movw	r26, r30
    1c5c:	aa 0f       	add	r26, r26
    1c5e:	bb 1f       	adc	r27, r27
    1c60:	a6 5e       	subi	r26, 0xE6	; 230
    1c62:	be 4f       	sbci	r27, 0xFE	; 254
    1c64:	2d 91       	ld	r18, X+
    1c66:	3c 91       	ld	r19, X
    1c68:	eb 5e       	subi	r30, 0xEB	; 235
    1c6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c6c:	80 81       	ld	r24, Z
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	09 c0       	rjmp	.+18     	; 0x1c84 <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1c72:	82 e1       	ldi	r24, 0x12	; 18
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1c76:	27 eb       	ldi	r18, 0xB7	; 183
    1c78:	32 e0       	ldi	r19, 0x02	; 2
    1c7a:	04 c0       	rjmp	.+8      	; 0x1c84 <CALLBACK_USB_GetDescriptor+0xaa>
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1c84:	fa 01       	movw	r30, r20
    1c86:	31 83       	std	Z+1, r19	; 0x01
    1c88:	20 83       	st	Z, r18
    return Size;
}
    1c8a:	08 95       	ret

00001c8c <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c8c:	80 e1       	ldi	r24, 0x10	; 16
    1c8e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c90:	82 e1       	ldi	r24, 0x12	; 18
    1c92:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1c94:	09 b4       	in	r0, 0x29	; 41
    1c96:	00 fe       	sbrs	r0, 0
    1c98:	fd cf       	rjmp	.-6      	; 0x1c94 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c9a:	80 91 d8 00 	lds	r24, 0x00D8
    1c9e:	8f 7d       	andi	r24, 0xDF	; 223
    1ca0:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1ca4:	80 91 e0 00 	lds	r24, 0x00E0
    1ca8:	82 60       	ori	r24, 0x02	; 2
    1caa:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1cae:	80 91 e0 00 	lds	r24, 0x00E0
    1cb2:	81 fd       	sbrc	r24, 1
    1cb4:	fc cf       	rjmp	.-8      	; 0x1cae <USB_Device_SendRemoteWakeup+0x22>
}
    1cb6:	08 95       	ret

00001cb8 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1cb8:	cf 92       	push	r12
    1cba:	df 92       	push	r13
    1cbc:	ef 92       	push	r14
    1cbe:	ff 92       	push	r15
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	7c 01       	movw	r14, r24
    1cca:	8b 01       	movw	r16, r22
    1ccc:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1cce:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <Endpoint_WaitUntilReady>
    1cd2:	81 11       	cpse	r24, r1
    1cd4:	31 c0       	rjmp	.+98     	; 0x1d38 <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1cd6:	20 97       	sbiw	r28, 0x00	; 0
    1cd8:	31 f0       	breq	.+12     	; 0x1ce6 <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    1cda:	88 81       	ld	r24, Y
    1cdc:	99 81       	ldd	r25, Y+1	; 0x01
    1cde:	08 1b       	sub	r16, r24
    1ce0:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1ce2:	e8 0e       	add	r14, r24
    1ce4:	f9 1e       	adc	r15, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1ce6:	c1 2c       	mov	r12, r1
    1ce8:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1cea:	01 15       	cp	r16, r1
    1cec:	11 05       	cpc	r17, r1
    1cee:	19 f1       	breq	.+70     	; 0x1d36 <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1cf0:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1cf4:	85 fd       	sbrc	r24, 5
    1cf6:	14 c0       	rjmp	.+40     	; 0x1d20 <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1cf8:	80 91 e8 00 	lds	r24, 0x00E8
    1cfc:	8e 77       	andi	r24, 0x7E	; 126
    1cfe:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1d02:	20 97       	sbiw	r28, 0x00	; 0
    1d04:	41 f0       	breq	.+16     	; 0x1d16 <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    1d06:	88 81       	ld	r24, Y
    1d08:	99 81       	ldd	r25, Y+1	; 0x01
    1d0a:	8c 0d       	add	r24, r12
    1d0c:	9d 1d       	adc	r25, r13
    1d0e:	99 83       	std	Y+1, r25	; 0x01
    1d10:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1d12:	85 e0       	ldi	r24, 0x05	; 5
    1d14:	11 c0       	rjmp	.+34     	; 0x1d38 <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1d16:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <Endpoint_WaitUntilReady>
    1d1a:	88 23       	and	r24, r24
    1d1c:	31 f3       	breq	.-52     	; 0x1cea <Endpoint_Write_Stream_LE+0x32>
    1d1e:	0c c0       	rjmp	.+24     	; 0x1d38 <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1d20:	f7 01       	movw	r30, r14
    1d22:	81 91       	ld	r24, Z+
    1d24:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d26:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1d2a:	01 50       	subi	r16, 0x01	; 1
    1d2c:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1d2e:	ff ef       	ldi	r31, 0xFF	; 255
    1d30:	cf 1a       	sub	r12, r31
    1d32:	df 0a       	sbc	r13, r31
    1d34:	da cf       	rjmp	.-76     	; 0x1cea <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1d36:	80 e0       	ldi	r24, 0x00	; 0
}
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	1f 91       	pop	r17
    1d3e:	0f 91       	pop	r16
    1d40:	ff 90       	pop	r15
    1d42:	ef 90       	pop	r14
    1d44:	df 90       	pop	r13
    1d46:	cf 90       	pop	r12
    1d48:	08 95       	ret

00001d4a <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1d4a:	20 91 0c 02 	lds	r18, 0x020C
    1d4e:	30 91 0d 02 	lds	r19, 0x020D
    1d52:	26 17       	cp	r18, r22
    1d54:	37 07       	cpc	r19, r23
    1d56:	48 f0       	brcs	.+18     	; 0x1d6a <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1d58:	61 15       	cp	r22, r1
    1d5a:	71 05       	cpc	r23, r1
    1d5c:	39 f4       	brne	.+14     	; 0x1d6c <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d5e:	20 91 e8 00 	lds	r18, 0x00E8
    1d62:	2e 77       	andi	r18, 0x7E	; 126
    1d64:	20 93 e8 00 	sts	0x00E8, r18
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <Endpoint_Write_Control_Stream_LE+0x22>
    1d6a:	b9 01       	movw	r22, r18
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1d70:	61 15       	cp	r22, r1
    1d72:	71 05       	cpc	r23, r1
    1d74:	b9 f1       	breq	.+110    	; 0x1de4 <Endpoint_Write_Control_Stream_LE+0x9a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1d76:	80 91 05 02 	lds	r24, 0x0205

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1d7a:	88 23       	and	r24, r24
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <Endpoint_Write_Control_Stream_LE+0x36>
    1d7e:	40 c0       	rjmp	.+128    	; 0x1e00 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1d80:	85 30       	cpi	r24, 0x05	; 5
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <Endpoint_Write_Control_Stream_LE+0x3c>
    1d84:	3f c0       	rjmp	.+126    	; 0x1e04 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d86:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1d8a:	83 fd       	sbrc	r24, 3
    1d8c:	3d c0       	rjmp	.+122    	; 0x1e08 <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d8e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1d92:	82 ff       	sbrs	r24, 2
    1d94:	06 c0       	rjmp	.+12     	; 0x1da2 <Endpoint_Write_Control_Stream_LE+0x58>
    1d96:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1d9a:	82 ff       	sbrs	r24, 2
    1d9c:	26 c0       	rjmp	.+76     	; 0x1dea <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1da2:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1da6:	80 ff       	sbrs	r24, 0
    1da8:	e3 cf       	rjmp	.-58     	; 0x1d70 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1daa:	20 91 f3 00 	lds	r18, 0x00F3
    1dae:	80 91 f2 00 	lds	r24, 0x00F2
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1db6:	61 15       	cp	r22, r1
    1db8:	71 05       	cpc	r23, r1
    1dba:	51 f0       	breq	.+20     	; 0x1dd0 <Endpoint_Write_Control_Stream_LE+0x86>
    1dbc:	88 30       	cpi	r24, 0x08	; 8
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	38 f4       	brcc	.+14     	; 0x1dd0 <Endpoint_Write_Control_Stream_LE+0x86>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1dc2:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1dc4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1dc8:	61 50       	subi	r22, 0x01	; 1
    1dca:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1dcc:	01 96       	adiw	r24, 0x01	; 1
    1dce:	f3 cf       	rjmp	.-26     	; 0x1db6 <Endpoint_Write_Control_Stream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1dd0:	21 e0       	ldi	r18, 0x01	; 1
    1dd2:	08 97       	sbiw	r24, 0x08	; 8
    1dd4:	09 f0       	breq	.+2      	; 0x1dd8 <Endpoint_Write_Control_Stream_LE+0x8e>
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1dd8:	80 91 e8 00 	lds	r24, 0x00E8
    1ddc:	8e 77       	andi	r24, 0x7E	; 126
    1dde:	80 93 e8 00 	sts	0x00E8, r24
    1de2:	c6 cf       	rjmp	.-116    	; 0x1d70 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1de4:	21 11       	cpse	r18, r1
    1de6:	c7 cf       	rjmp	.-114    	; 0x1d76 <Endpoint_Write_Control_Stream_LE+0x2c>
    1de8:	d6 cf       	rjmp	.-84     	; 0x1d96 <Endpoint_Write_Control_Stream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1dea:	80 91 05 02 	lds	r24, 0x0205

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1dee:	88 23       	and	r24, r24
    1df0:	39 f0       	breq	.+14     	; 0x1e00 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1df2:	85 30       	cpi	r24, 0x05	; 5
    1df4:	39 f0       	breq	.+14     	; 0x1e04 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1df6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1dfa:	83 ff       	sbrs	r24, 3
    1dfc:	cc cf       	rjmp	.-104    	; 0x1d96 <Endpoint_Write_Control_Stream_LE+0x4c>
    1dfe:	04 c0       	rjmp	.+8      	; 0x1e08 <Endpoint_Write_Control_Stream_LE+0xbe>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1e04:	83 e0       	ldi	r24, 0x03	; 3
    1e06:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1e0a:	08 95       	ret

00001e0c <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1e0c:	20 91 0c 02 	lds	r18, 0x020C
    1e10:	30 91 0d 02 	lds	r19, 0x020D
    1e14:	26 17       	cp	r18, r22
    1e16:	37 07       	cpc	r19, r23
    1e18:	48 f0       	brcs	.+18     	; 0x1e2c <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1e1a:	61 15       	cp	r22, r1
    1e1c:	71 05       	cpc	r23, r1
    1e1e:	39 f4       	brne	.+14     	; 0x1e2e <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e20:	20 91 e8 00 	lds	r18, 0x00E8
    1e24:	2e 77       	andi	r18, 0x7E	; 126
    1e26:	20 93 e8 00 	sts	0x00E8, r18
    1e2a:	01 c0       	rjmp	.+2      	; 0x1e2e <Endpoint_Write_Control_PStream_LE+0x22>
    1e2c:	b9 01       	movw	r22, r18
    1e2e:	fc 01       	movw	r30, r24
    1e30:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1e32:	61 15       	cp	r22, r1
    1e34:	71 05       	cpc	r23, r1
    1e36:	c1 f1       	breq	.+112    	; 0x1ea8 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1e38:	80 91 05 02 	lds	r24, 0x0205

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1e3c:	88 23       	and	r24, r24
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <Endpoint_Write_Control_PStream_LE+0x36>
    1e40:	41 c0       	rjmp	.+130    	; 0x1ec4 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1e42:	85 30       	cpi	r24, 0x05	; 5
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <Endpoint_Write_Control_PStream_LE+0x3c>
    1e46:	40 c0       	rjmp	.+128    	; 0x1ec8 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e48:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1e4c:	83 fd       	sbrc	r24, 3
    1e4e:	3e c0       	rjmp	.+124    	; 0x1ecc <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1e50:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1e54:	82 ff       	sbrs	r24, 2
    1e56:	06 c0       	rjmp	.+12     	; 0x1e64 <Endpoint_Write_Control_PStream_LE+0x58>
    1e58:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1e5c:	82 ff       	sbrs	r24, 2
    1e5e:	27 c0       	rjmp	.+78     	; 0x1eae <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e64:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1e68:	80 ff       	sbrs	r24, 0
    1e6a:	e3 cf       	rjmp	.-58     	; 0x1e32 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1e6c:	20 91 f3 00 	lds	r18, 0x00F3
    1e70:	80 91 f2 00 	lds	r24, 0x00F2
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1e78:	61 15       	cp	r22, r1
    1e7a:	71 05       	cpc	r23, r1
    1e7c:	59 f0       	breq	.+22     	; 0x1e94 <Endpoint_Write_Control_PStream_LE+0x88>
    1e7e:	88 30       	cpi	r24, 0x08	; 8
    1e80:	91 05       	cpc	r25, r1
    1e82:	40 f4       	brcc	.+16     	; 0x1e94 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1e84:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1e86:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1e8a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1e8c:	61 50       	subi	r22, 0x01	; 1
    1e8e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1e90:	01 96       	adiw	r24, 0x01	; 1
    1e92:	f2 cf       	rjmp	.-28     	; 0x1e78 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1e94:	21 e0       	ldi	r18, 0x01	; 1
    1e96:	08 97       	sbiw	r24, 0x08	; 8
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <Endpoint_Write_Control_PStream_LE+0x90>
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e9c:	80 91 e8 00 	lds	r24, 0x00E8
    1ea0:	8e 77       	andi	r24, 0x7E	; 126
    1ea2:	80 93 e8 00 	sts	0x00E8, r24
    1ea6:	c5 cf       	rjmp	.-118    	; 0x1e32 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1ea8:	21 11       	cpse	r18, r1
    1eaa:	c6 cf       	rjmp	.-116    	; 0x1e38 <Endpoint_Write_Control_PStream_LE+0x2c>
    1eac:	d5 cf       	rjmp	.-86     	; 0x1e58 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1eae:	80 91 05 02 	lds	r24, 0x0205

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1eb2:	88 23       	and	r24, r24
    1eb4:	39 f0       	breq	.+14     	; 0x1ec4 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1eb6:	85 30       	cpi	r24, 0x05	; 5
    1eb8:	39 f0       	breq	.+14     	; 0x1ec8 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1eba:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1ebe:	83 ff       	sbrs	r24, 3
    1ec0:	cb cf       	rjmp	.-106    	; 0x1e58 <Endpoint_Write_Control_PStream_LE+0x4c>
    1ec2:	04 c0       	rjmp	.+8      	; 0x1ecc <Endpoint_Write_Control_PStream_LE+0xc0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1ec4:	82 e0       	ldi	r24, 0x02	; 2
    1ec6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1ec8:	83 e0       	ldi	r24, 0x03	; 3
    1eca:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1ece:	08 95       	ret

00001ed0 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1ed0:	98 2f       	mov	r25, r24
    1ed2:	97 30       	cpi	r25, 0x07	; 7
    1ed4:	58 f5       	brcc	.+86     	; 0x1f2c <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ed6:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1eda:	98 17       	cp	r25, r24
    1edc:	39 f0       	breq	.+14     	; 0x1eec <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1ede:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1ee2:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1ee6:	50 91 f0 00 	lds	r21, 0x00F0
    1eea:	03 c0       	rjmp	.+6      	; 0x1ef2 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1eec:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1eee:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1ef0:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1ef2:	21 ff       	sbrs	r18, 1
    1ef4:	19 c0       	rjmp	.+50     	; 0x1f28 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1ef6:	30 91 eb 00 	lds	r19, 0x00EB
    1efa:	3e 7f       	andi	r19, 0xFE	; 254
    1efc:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1f00:	30 91 ed 00 	lds	r19, 0x00ED
    1f04:	3d 7f       	andi	r19, 0xFD	; 253
    1f06:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1f0a:	30 91 eb 00 	lds	r19, 0x00EB
    1f0e:	31 60       	ori	r19, 0x01	; 1
    1f10:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1f14:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1f18:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1f1c:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1f20:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1f24:	27 ff       	sbrs	r18, 7
    1f26:	07 c0       	rjmp	.+14     	; 0x1f36 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1f28:	9f 5f       	subi	r25, 0xFF	; 255
    1f2a:	d3 cf       	rjmp	.-90     	; 0x1ed2 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f2c:	8f 70       	andi	r24, 0x0F	; 15
    1f2e:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1f36:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1f38:	08 95       	ret

00001f3a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1f3a:	80 91 06 02 	lds	r24, 0x0206
    1f3e:	87 fd       	sbrc	r24, 7
    1f40:	05 c0       	rjmp	.+10     	; 0x1f4c <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f42:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1f46:	80 ff       	sbrs	r24, 0
    1f48:	0e c0       	rjmp	.+28     	; 0x1f66 <Endpoint_ClearStatusStage+0x2c>
    1f4a:	12 c0       	rjmp	.+36     	; 0x1f70 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1f4c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1f50:	82 fd       	sbrc	r24, 2
    1f52:	05 c0       	rjmp	.+10     	; 0x1f5e <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1f54:	80 91 05 02 	lds	r24, 0x0205
    1f58:	81 11       	cpse	r24, r1
    1f5a:	f8 cf       	rjmp	.-16     	; 0x1f4c <Endpoint_ClearStatusStage+0x12>
    1f5c:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f5e:	80 91 e8 00 	lds	r24, 0x00E8
    1f62:	8b 77       	andi	r24, 0x7B	; 123
    1f64:	08 c0       	rjmp	.+16     	; 0x1f76 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1f66:	80 91 05 02 	lds	r24, 0x0205
    1f6a:	81 11       	cpse	r24, r1
    1f6c:	ea cf       	rjmp	.-44     	; 0x1f42 <Endpoint_ClearStatusStage+0x8>
    1f6e:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f70:	80 91 e8 00 	lds	r24, 0x00E8
    1f74:	8e 77       	andi	r24, 0x7E	; 126
    1f76:	80 93 e8 00 	sts	0x00E8, r24
    1f7a:	08 95       	ret

00001f7c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1f7c:	80 91 e4 00 	lds	r24, 0x00E4
    1f80:	90 91 e5 00 	lds	r25, 0x00E5
    1f84:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1f86:	20 91 ec 00 	lds	r18, 0x00EC
    1f8a:	20 ff       	sbrs	r18, 0
    1f8c:	21 c0       	rjmp	.+66     	; 0x1fd0 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f8e:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1f92:	20 fd       	sbrc	r18, 0
    1f94:	21 c0       	rjmp	.+66     	; 0x1fd8 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1f96:	20 91 05 02 	lds	r18, 0x0205

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1f9a:	22 23       	and	r18, r18
    1f9c:	89 f0       	breq	.+34     	; 0x1fc0 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1f9e:	25 30       	cpi	r18, 0x05	; 5
    1fa0:	89 f0       	breq	.+34     	; 0x1fc4 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1fa2:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1fa6:	25 fd       	sbrc	r18, 5
    1fa8:	0f c0       	rjmp	.+30     	; 0x1fc8 <Endpoint_WaitUntilReady+0x4c>
    1faa:	20 91 e4 00 	lds	r18, 0x00E4
    1fae:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1fb2:	28 17       	cp	r18, r24
    1fb4:	39 07       	cpc	r19, r25
    1fb6:	39 f3       	breq	.-50     	; 0x1f86 <Endpoint_WaitUntilReady+0xa>
    1fb8:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1fba:	41 f0       	breq	.+16     	; 0x1fcc <Endpoint_WaitUntilReady+0x50>
    1fbc:	c9 01       	movw	r24, r18
    1fbe:	e3 cf       	rjmp	.-58     	; 0x1f86 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1fc0:	82 e0       	ldi	r24, 0x02	; 2
    1fc2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1fc4:	83 e0       	ldi	r24, 0x03	; 3
    1fc6:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1fcc:	84 e0       	ldi	r24, 0x04	; 4
    1fce:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1fd0:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1fd4:	22 ff       	sbrs	r18, 2
    1fd6:	df cf       	rjmp	.-66     	; 0x1f96 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	08 95       	ret

00001fdc <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1fdc:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1fe0:	0e 94 64 10 	call	0x20c8	; 0x20c8 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1fe4:	e0 ee       	ldi	r30, 0xE0	; 224
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	81 60       	ori	r24, 0x01	; 1
    1fec:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1fee:	e8 ed       	ldi	r30, 0xD8	; 216
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	8f 77       	andi	r24, 0x7F	; 127
    1ff6:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ff8:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1ffa:	a7 ed       	ldi	r26, 0xD7	; 215
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	8c 91       	ld	r24, X
    2000:	8e 7f       	andi	r24, 0xFE	; 254
    2002:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2004:	80 81       	ld	r24, Z
    2006:	8f 7e       	andi	r24, 0xEF	; 239
    2008:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    200a:	10 92 04 02 	sts	0x0204, r1
    200e:	08 95       	ret

00002010 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    2018:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    201c:	0e 94 64 10 	call	0x20c8	; 0x20c8 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    2020:	c8 ed       	ldi	r28, 0xD8	; 216
    2022:	d0 e0       	ldi	r29, 0x00	; 0
    2024:	88 81       	ld	r24, Y
    2026:	8f 77       	andi	r24, 0x7F	; 127
    2028:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    202a:	88 81       	ld	r24, Y
    202c:	80 68       	ori	r24, 0x80	; 128
    202e:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2030:	88 81       	ld	r24, Y
    2032:	8f 7d       	andi	r24, 0xDF	; 223
    2034:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2036:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2038:	10 92 05 02 	sts	0x0205, r1
	USB_Device_ConfigurationNumber  = 0;
    203c:	10 92 01 02 	sts	0x0201, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    2040:	10 92 03 02 	sts	0x0203, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    2044:	10 92 02 02 	sts	0x0202, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    2048:	00 ee       	ldi	r16, 0xE0	; 224
    204a:	10 e0       	ldi	r17, 0x00	; 0
    204c:	f8 01       	movw	r30, r16
    204e:	80 81       	ld	r24, Z
    2050:	8b 7f       	andi	r24, 0xFB	; 251
    2052:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    2054:	88 81       	ld	r24, Y
    2056:	81 60       	ori	r24, 0x01	; 1
    2058:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    205a:	42 e0       	ldi	r20, 0x02	; 2
    205c:	60 e0       	ldi	r22, 0x00	; 0
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2064:	e1 ee       	ldi	r30, 0xE1	; 225
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	8e 7f       	andi	r24, 0xFE	; 254
    206c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    206e:	e2 ee       	ldi	r30, 0xE2	; 226
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	81 60       	ori	r24, 0x01	; 1
    2076:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    2078:	80 81       	ld	r24, Z
    207a:	88 60       	ori	r24, 0x08	; 8
    207c:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    207e:	f8 01       	movw	r30, r16
    2080:	80 81       	ld	r24, Z
    2082:	8e 7f       	andi	r24, 0xFE	; 254
    2084:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    2086:	88 81       	ld	r24, Y
    2088:	80 61       	ori	r24, 0x10	; 16
    208a:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	1f 91       	pop	r17
    2092:	0f 91       	pop	r16
    2094:	08 95       	ret

00002096 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2096:	e8 ed       	ldi	r30, 0xD8	; 216
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	8f 7e       	andi	r24, 0xEF	; 239
    209e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    20a0:	e7 ed       	ldi	r30, 0xD7	; 215
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	81 60       	ori	r24, 0x01	; 1
    20a8:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    20aa:	84 e0       	ldi	r24, 0x04	; 4
    20ac:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	80 93 04 02 	sts	0x0204, r24

	USB_ResetInterface();
    20b4:	0c 94 08 10 	jmp	0x2010	; 0x2010 <USB_ResetInterface>

000020b8 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    20b8:	e8 ed       	ldi	r30, 0xD8	; 216
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	8e 7f       	andi	r24, 0xFE	; 254
    20c0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    20c2:	10 92 e2 00 	sts	0x00E2, r1
    20c6:	08 95       	ret

000020c8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    20c8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    20cc:	10 92 e1 00 	sts	0x00E1, r1
    20d0:	08 95       	ret

000020d2 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    20d2:	1f 92       	push	r1
    20d4:	0f 92       	push	r0
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	0f 92       	push	r0
    20da:	11 24       	eor	r1, r1
    20dc:	2f 93       	push	r18
    20de:	3f 93       	push	r19
    20e0:	4f 93       	push	r20
    20e2:	5f 93       	push	r21
    20e4:	6f 93       	push	r22
    20e6:	7f 93       	push	r23
    20e8:	8f 93       	push	r24
    20ea:	9f 93       	push	r25
    20ec:	af 93       	push	r26
    20ee:	bf 93       	push	r27
    20f0:	ef 93       	push	r30
    20f2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    20f4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    20f8:	82 ff       	sbrs	r24, 2
    20fa:	0b c0       	rjmp	.+22     	; 0x2112 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    20fc:	80 91 e2 00 	lds	r24, 0x00E2
    2100:	82 ff       	sbrs	r24, 2
    2102:	07 c0       	rjmp	.+14     	; 0x2112 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    2104:	80 91 e1 00 	lds	r24, 0x00E1
    2108:	8b 7f       	andi	r24, 0xFB	; 251
    210a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    210e:	0e 94 a1 0c 	call	0x1942	; 0x1942 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    2112:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    2116:	80 ff       	sbrs	r24, 0
    2118:	1f c0       	rjmp	.+62     	; 0x2158 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    211a:	80 91 d8 00 	lds	r24, 0x00D8
    211e:	80 ff       	sbrs	r24, 0
    2120:	1b c0       	rjmp	.+54     	; 0x2158 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    2122:	80 91 da 00 	lds	r24, 0x00DA
    2126:	8e 7f       	andi	r24, 0xFE	; 254
    2128:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    212c:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    2130:	80 ff       	sbrs	r24, 0
    2132:	0d c0       	rjmp	.+26     	; 0x214e <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2134:	80 e1       	ldi	r24, 0x10	; 16
    2136:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2138:	82 e1       	ldi	r24, 0x12	; 18
    213a:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    213c:	09 b4       	in	r0, 0x29	; 41
    213e:	00 fe       	sbrs	r0, 0
    2140:	fd cf       	rjmp	.-6      	; 0x213c <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	80 93 05 02 	sts	0x0205, r24
			EVENT_USB_Device_Connect();
    2148:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <EVENT_USB_Device_Connect>
    214c:	05 c0       	rjmp	.+10     	; 0x2158 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    214e:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    2150:	10 92 05 02 	sts	0x0205, r1
			EVENT_USB_Device_Disconnect();
    2154:	0e 94 8a 0c 	call	0x1914	; 0x1914 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2158:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    215c:	80 ff       	sbrs	r24, 0
    215e:	19 c0       	rjmp	.+50     	; 0x2192 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    2160:	80 91 e2 00 	lds	r24, 0x00E2
    2164:	80 ff       	sbrs	r24, 0
    2166:	15 c0       	rjmp	.+42     	; 0x2192 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2168:	80 91 e2 00 	lds	r24, 0x00E2
    216c:	8e 7f       	andi	r24, 0xFE	; 254
    216e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2172:	80 91 e2 00 	lds	r24, 0x00E2
    2176:	80 61       	ori	r24, 0x10	; 16
    2178:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    217c:	80 91 d8 00 	lds	r24, 0x00D8
    2180:	80 62       	ori	r24, 0x20	; 32
    2182:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2186:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    2188:	85 e0       	ldi	r24, 0x05	; 5
    218a:	80 93 05 02 	sts	0x0205, r24
		EVENT_USB_Device_Suspend();
    218e:	0e 94 95 0c 	call	0x192a	; 0x192a <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    2192:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    2196:	84 ff       	sbrs	r24, 4
    2198:	30 c0       	rjmp	.+96     	; 0x21fa <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    219a:	80 91 e2 00 	lds	r24, 0x00E2
    219e:	84 ff       	sbrs	r24, 4
    21a0:	2c c0       	rjmp	.+88     	; 0x21fa <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    21a2:	80 e1       	ldi	r24, 0x10	; 16
    21a4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    21a6:	82 e1       	ldi	r24, 0x12	; 18
    21a8:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    21aa:	09 b4       	in	r0, 0x29	; 41
    21ac:	00 fe       	sbrs	r0, 0
    21ae:	fd cf       	rjmp	.-6      	; 0x21aa <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    21b0:	80 91 d8 00 	lds	r24, 0x00D8
    21b4:	8f 7d       	andi	r24, 0xDF	; 223
    21b6:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    21ba:	80 91 e1 00 	lds	r24, 0x00E1
    21be:	8f 7e       	andi	r24, 0xEF	; 239
    21c0:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    21c4:	80 91 e2 00 	lds	r24, 0x00E2
    21c8:	8f 7e       	andi	r24, 0xEF	; 239
    21ca:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    21ce:	80 91 e2 00 	lds	r24, 0x00E2
    21d2:	81 60       	ori	r24, 0x01	; 1
    21d4:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    21d8:	80 91 01 02 	lds	r24, 0x0201
    21dc:	88 23       	and	r24, r24
    21de:	11 f0       	breq	.+4      	; 0x21e4 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    21e0:	84 e0       	ldi	r24, 0x04	; 4
    21e2:	07 c0       	rjmp	.+14     	; 0x21f2 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    21e4:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    21e8:	87 ff       	sbrs	r24, 7
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <__vector_10+0x11e>
    21ec:	83 e0       	ldi	r24, 0x03	; 3
    21ee:	01 c0       	rjmp	.+2      	; 0x21f2 <__vector_10+0x120>
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	80 93 05 02 	sts	0x0205, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    21f6:	0e 94 9b 0c 	call	0x1936	; 0x1936 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    21fa:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    21fe:	83 ff       	sbrs	r24, 3
    2200:	29 c0       	rjmp	.+82     	; 0x2254 <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    2202:	80 91 e2 00 	lds	r24, 0x00E2
    2206:	83 ff       	sbrs	r24, 3
    2208:	25 c0       	rjmp	.+74     	; 0x2254 <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    220a:	80 91 e1 00 	lds	r24, 0x00E1
    220e:	87 7f       	andi	r24, 0xF7	; 247
    2210:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    2214:	82 e0       	ldi	r24, 0x02	; 2
    2216:	80 93 05 02 	sts	0x0205, r24
		USB_Device_ConfigurationNumber = 0;
    221a:	10 92 01 02 	sts	0x0201, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    221e:	80 91 e1 00 	lds	r24, 0x00E1
    2222:	8e 7f       	andi	r24, 0xFE	; 254
    2224:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2228:	80 91 e2 00 	lds	r24, 0x00E2
    222c:	8e 7f       	andi	r24, 0xFE	; 254
    222e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2232:	80 91 e2 00 	lds	r24, 0x00E2
    2236:	80 61       	ori	r24, 0x10	; 16
    2238:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    223c:	42 e0       	ldi	r20, 0x02	; 2
    223e:	60 e0       	ldi	r22, 0x00	; 0
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2246:	80 91 f0 00 	lds	r24, 0x00F0
    224a:	88 60       	ori	r24, 0x08	; 8
    224c:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    2250:	0e 94 91 0c 	call	0x1922	; 0x1922 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2254:	ff 91       	pop	r31
    2256:	ef 91       	pop	r30
    2258:	bf 91       	pop	r27
    225a:	af 91       	pop	r26
    225c:	9f 91       	pop	r25
    225e:	8f 91       	pop	r24
    2260:	7f 91       	pop	r23
    2262:	6f 91       	pop	r22
    2264:	5f 91       	pop	r21
    2266:	4f 91       	pop	r20
    2268:	3f 91       	pop	r19
    226a:	2f 91       	pop	r18
    226c:	0f 90       	pop	r0
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	0f 90       	pop	r0
    2272:	1f 90       	pop	r1
    2274:	18 95       	reti

00002276 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    2276:	1f 92       	push	r1
    2278:	0f 92       	push	r0
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	0f 92       	push	r0
    227e:	11 24       	eor	r1, r1
    2280:	2f 93       	push	r18
    2282:	3f 93       	push	r19
    2284:	4f 93       	push	r20
    2286:	5f 93       	push	r21
    2288:	6f 93       	push	r22
    228a:	7f 93       	push	r23
    228c:	8f 93       	push	r24
    228e:	9f 93       	push	r25
    2290:	af 93       	push	r26
    2292:	bf 93       	push	r27
    2294:	cf 93       	push	r28
    2296:	ef 93       	push	r30
    2298:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    229a:	c0 91 e9 00 	lds	r28, 0x00E9
    229e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    22a0:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    22a4:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    22a8:	80 91 f0 00 	lds	r24, 0x00F0
    22ac:	87 7f       	andi	r24, 0xF7	; 247
    22ae:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    22b2:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    22b4:	0e 94 77 11 	call	0x22ee	; 0x22ee <USB_Device_ProcessControlRequest>
    22b8:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    22bc:	80 91 f0 00 	lds	r24, 0x00F0
    22c0:	88 60       	ori	r24, 0x08	; 8
    22c2:	80 93 f0 00 	sts	0x00F0, r24
    22c6:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    22ca:	ff 91       	pop	r31
    22cc:	ef 91       	pop	r30
    22ce:	cf 91       	pop	r28
    22d0:	bf 91       	pop	r27
    22d2:	af 91       	pop	r26
    22d4:	9f 91       	pop	r25
    22d6:	8f 91       	pop	r24
    22d8:	7f 91       	pop	r23
    22da:	6f 91       	pop	r22
    22dc:	5f 91       	pop	r21
    22de:	4f 91       	pop	r20
    22e0:	3f 91       	pop	r19
    22e2:	2f 91       	pop	r18
    22e4:	0f 90       	pop	r0
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	0f 90       	pop	r0
    22ea:	1f 90       	pop	r1
    22ec:	18 95       	reti

000022ee <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    22ee:	1f 93       	push	r17
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	aa 97       	sbiw	r28, 0x2a	; 42
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	e6 e0       	ldi	r30, 0x06	; 6
    2306:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2308:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    230c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    230e:	22 e0       	ldi	r18, 0x02	; 2
    2310:	ee 30       	cpi	r30, 0x0E	; 14
    2312:	f2 07       	cpc	r31, r18
    2314:	c9 f7       	brne	.-14     	; 0x2308 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2316:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    231a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    231e:	83 ff       	sbrs	r24, 3
    2320:	1c c1       	rjmp	.+568    	; 0x255a <USB_Device_ProcessControlRequest+0x26c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2322:	20 91 06 02 	lds	r18, 0x0206

		switch (USB_ControlRequest.bRequest)
    2326:	30 91 07 02 	lds	r19, 0x0207
    232a:	83 2f       	mov	r24, r19
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	8a 30       	cpi	r24, 0x0A	; 10
    2330:	91 05       	cpc	r25, r1
    2332:	08 f0       	brcs	.+2      	; 0x2336 <USB_Device_ProcessControlRequest+0x48>
    2334:	12 c1       	rjmp	.+548    	; 0x255a <USB_Device_ProcessControlRequest+0x26c>
    2336:	fc 01       	movw	r30, r24
    2338:	ea 5a       	subi	r30, 0xAA	; 170
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	0c 94 12 34 	jmp	0x6824	; 0x6824 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2340:	20 38       	cpi	r18, 0x80	; 128
    2342:	81 f0       	breq	.+32     	; 0x2364 <USB_Device_ProcessControlRequest+0x76>
    2344:	22 38       	cpi	r18, 0x82	; 130
    2346:	09 f0       	breq	.+2      	; 0x234a <USB_Device_ProcessControlRequest+0x5c>
    2348:	08 c1       	rjmp	.+528    	; 0x255a <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    234a:	80 91 0a 02 	lds	r24, 0x020A
    234e:	8f 70       	andi	r24, 0x0F	; 15
    2350:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2354:	80 91 eb 00 	lds	r24, 0x00EB
    2358:	85 fb       	bst	r24, 5
    235a:	88 27       	eor	r24, r24
    235c:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    235e:	10 92 e9 00 	sts	0x00E9, r1
    2362:	06 c0       	rjmp	.+12     	; 0x2370 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2364:	80 91 02 02 	lds	r24, 0x0202
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2368:	90 91 03 02 	lds	r25, 0x0203
    236c:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    236e:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2370:	90 91 e8 00 	lds	r25, 0x00E8
    2374:	97 7f       	andi	r25, 0xF7	; 247
    2376:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    237a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    237e:	10 92 f1 00 	sts	0x00F1, r1
    2382:	c5 c0       	rjmp	.+394    	; 0x250e <USB_Device_ProcessControlRequest+0x220>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2384:	82 2f       	mov	r24, r18
    2386:	8d 7f       	andi	r24, 0xFD	; 253
    2388:	09 f0       	breq	.+2      	; 0x238c <USB_Device_ProcessControlRequest+0x9e>
    238a:	e7 c0       	rjmp	.+462    	; 0x255a <USB_Device_ProcessControlRequest+0x26c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    238c:	22 23       	and	r18, r18
    238e:	19 f0       	breq	.+6      	; 0x2396 <USB_Device_ProcessControlRequest+0xa8>
    2390:	22 30       	cpi	r18, 0x02	; 2
    2392:	61 f0       	breq	.+24     	; 0x23ac <USB_Device_ProcessControlRequest+0xbe>
    2394:	e2 c0       	rjmp	.+452    	; 0x255a <USB_Device_ProcessControlRequest+0x26c>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    2396:	80 91 08 02 	lds	r24, 0x0208
    239a:	81 30       	cpi	r24, 0x01	; 1
    239c:	09 f0       	breq	.+2      	; 0x23a0 <USB_Device_ProcessControlRequest+0xb2>
    239e:	dd c0       	rjmp	.+442    	; 0x255a <USB_Device_ProcessControlRequest+0x26c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    23a0:	33 30       	cpi	r19, 0x03	; 3
    23a2:	09 f0       	breq	.+2      	; 0x23a6 <USB_Device_ProcessControlRequest+0xb8>
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	80 93 03 02 	sts	0x0203, r24
    23aa:	28 c0       	rjmp	.+80     	; 0x23fc <USB_Device_ProcessControlRequest+0x10e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    23ac:	80 91 08 02 	lds	r24, 0x0208
    23b0:	81 11       	cpse	r24, r1
    23b2:	24 c0       	rjmp	.+72     	; 0x23fc <USB_Device_ProcessControlRequest+0x10e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    23b4:	20 91 0a 02 	lds	r18, 0x020A
    23b8:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    23ba:	09 f4       	brne	.+2      	; 0x23be <USB_Device_ProcessControlRequest+0xd0>
    23bc:	ce c0       	rjmp	.+412    	; 0x255a <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23be:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    23c2:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    23c6:	80 ff       	sbrs	r24, 0
    23c8:	19 c0       	rjmp	.+50     	; 0x23fc <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    23ca:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    23ce:	33 30       	cpi	r19, 0x03	; 3
    23d0:	11 f4       	brne	.+4      	; 0x23d6 <USB_Device_ProcessControlRequest+0xe8>
    23d2:	80 62       	ori	r24, 0x20	; 32
    23d4:	11 c0       	rjmp	.+34     	; 0x23f8 <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    23d6:	80 61       	ori	r24, 0x10	; 16
    23d8:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	02 2e       	mov	r0, r18
    23e2:	01 c0       	rjmp	.+2      	; 0x23e6 <USB_Device_ProcessControlRequest+0xf8>
    23e4:	88 0f       	add	r24, r24
    23e6:	0a 94       	dec	r0
    23e8:	ea f7       	brpl	.-6      	; 0x23e4 <USB_Device_ProcessControlRequest+0xf6>
    23ea:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    23ee:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    23f2:	80 91 eb 00 	lds	r24, 0x00EB
    23f6:	88 60       	ori	r24, 0x08	; 8
    23f8:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    23fc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2400:	80 91 e8 00 	lds	r24, 0x00E8
    2404:	87 7f       	andi	r24, 0xF7	; 247
    2406:	86 c0       	rjmp	.+268    	; 0x2514 <USB_Device_ProcessControlRequest+0x226>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2408:	21 11       	cpse	r18, r1
    240a:	a7 c0       	rjmp	.+334    	; 0x255a <USB_Device_ProcessControlRequest+0x26c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    240c:	10 91 08 02 	lds	r17, 0x0208
    2410:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2412:	80 91 e3 00 	lds	r24, 0x00E3
    2416:	80 78       	andi	r24, 0x80	; 128
    2418:	81 2b       	or	r24, r17
    241a:	80 93 e3 00 	sts	0x00E3, r24
    241e:	80 91 e8 00 	lds	r24, 0x00E8
    2422:	87 7f       	andi	r24, 0xF7	; 247
    2424:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2428:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    242c:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    2430:	80 ff       	sbrs	r24, 0
    2432:	fc cf       	rjmp	.-8      	; 0x242c <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2434:	80 91 e3 00 	lds	r24, 0x00E3
    2438:	80 68       	ori	r24, 0x80	; 128
    243a:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    243e:	11 23       	and	r17, r17
    2440:	11 f0       	breq	.+4      	; 0x2446 <USB_Device_ProcessControlRequest+0x158>
    2442:	83 e0       	ldi	r24, 0x03	; 3
    2444:	01 c0       	rjmp	.+2      	; 0x2448 <USB_Device_ProcessControlRequest+0x15a>
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	80 93 05 02 	sts	0x0205, r24
    244c:	86 c0       	rjmp	.+268    	; 0x255a <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    244e:	20 58       	subi	r18, 0x80	; 128
    2450:	22 30       	cpi	r18, 0x02	; 2
    2452:	08 f0       	brcs	.+2      	; 0x2456 <USB_Device_ProcessControlRequest+0x168>
    2454:	82 c0       	rjmp	.+260    	; 0x255a <USB_Device_ProcessControlRequest+0x26c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2456:	80 91 08 02 	lds	r24, 0x0208
    245a:	90 91 09 02 	lds	r25, 0x0209
    245e:	8c 3d       	cpi	r24, 0xDC	; 220
    2460:	23 e0       	ldi	r18, 0x03	; 3
    2462:	92 07       	cpc	r25, r18
    2464:	79 f5       	brne	.+94     	; 0x24c4 <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2466:	83 e0       	ldi	r24, 0x03	; 3
    2468:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    246a:	8a e2       	ldi	r24, 0x2A	; 42
    246c:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    246e:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2470:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2472:	de 01       	movw	r26, r28
    2474:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2476:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2478:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    247a:	51 e2       	ldi	r21, 0x21	; 33
    247c:	e3 2f       	mov	r30, r19
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	50 93 57 00 	sts	0x0057, r21
    2484:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    2486:	20 ff       	sbrs	r18, 0
    2488:	03 c0       	rjmp	.+6      	; 0x2490 <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
    248a:	e2 95       	swap	r30
    248c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    248e:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2490:	ef 70       	andi	r30, 0x0F	; 15
    2492:	8e 2f       	mov	r24, r30
    2494:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2496:	ea 30       	cpi	r30, 0x0A	; 10
    2498:	10 f0       	brcs	.+4      	; 0x249e <USB_Device_ProcessControlRequest+0x1b0>
    249a:	c7 96       	adiw	r24, 0x37	; 55
    249c:	01 c0       	rjmp	.+2      	; 0x24a0 <USB_Device_ProcessControlRequest+0x1b2>
    249e:	c0 96       	adiw	r24, 0x30	; 48
    24a0:	8d 93       	st	X+, r24
    24a2:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    24a4:	2f 5f       	subi	r18, 0xFF	; 255
    24a6:	24 31       	cpi	r18, 0x14	; 20
    24a8:	49 f7       	brne	.-46     	; 0x247c <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    24aa:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24ac:	80 91 e8 00 	lds	r24, 0x00E8
    24b0:	87 7f       	andi	r24, 0xF7	; 247
    24b2:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    24b6:	6a e2       	ldi	r22, 0x2A	; 42
    24b8:	70 e0       	ldi	r23, 0x00	; 0
    24ba:	ce 01       	movw	r24, r28
    24bc:	01 96       	adiw	r24, 0x01	; 1
    24be:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <Endpoint_Write_Control_Stream_LE>
    24c2:	14 c0       	rjmp	.+40     	; 0x24ec <USB_Device_ProcessControlRequest+0x1fe>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    24c4:	ae 01       	movw	r20, r28
    24c6:	4f 5f       	subi	r20, 0xFF	; 255
    24c8:	5f 4f       	sbci	r21, 0xFF	; 255
    24ca:	60 91 0a 02 	lds	r22, 0x020A
    24ce:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <CALLBACK_USB_GetDescriptor>
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	09 f4       	brne	.+2      	; 0x24d8 <USB_Device_ProcessControlRequest+0x1ea>
    24d6:	41 c0       	rjmp	.+130    	; 0x255a <USB_Device_ProcessControlRequest+0x26c>
    24d8:	20 91 e8 00 	lds	r18, 0x00E8
    24dc:	27 7f       	andi	r18, 0xF7	; 247
    24de:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    24e2:	bc 01       	movw	r22, r24
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	9a 81       	ldd	r25, Y+2	; 0x02
    24e8:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    24ec:	80 91 e8 00 	lds	r24, 0x00E8
    24f0:	8b 77       	andi	r24, 0x7B	; 123
    24f2:	80 93 e8 00 	sts	0x00E8, r24
    24f6:	31 c0       	rjmp	.+98     	; 0x255a <USB_Device_ProcessControlRequest+0x26c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    24f8:	20 38       	cpi	r18, 0x80	; 128
    24fa:	79 f5       	brne	.+94     	; 0x255a <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    24fc:	80 91 e8 00 	lds	r24, 0x00E8
    2500:	87 7f       	andi	r24, 0xF7	; 247
    2502:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2506:	80 91 01 02 	lds	r24, 0x0201
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    250a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    250e:	80 91 e8 00 	lds	r24, 0x00E8
    2512:	8e 77       	andi	r24, 0x7E	; 126
    2514:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2518:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <Endpoint_ClearStatusStage>
    251c:	1e c0       	rjmp	.+60     	; 0x255a <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    251e:	21 11       	cpse	r18, r1
    2520:	1c c0       	rjmp	.+56     	; 0x255a <USB_Device_ProcessControlRequest+0x26c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2522:	90 91 08 02 	lds	r25, 0x0208
    2526:	92 30       	cpi	r25, 0x02	; 2
    2528:	c0 f4       	brcc	.+48     	; 0x255a <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    252a:	80 91 e8 00 	lds	r24, 0x00E8
    252e:	87 7f       	andi	r24, 0xF7	; 247
    2530:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2534:	90 93 01 02 	sts	0x0201, r25

	Endpoint_ClearStatusStage();
    2538:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    253c:	80 91 01 02 	lds	r24, 0x0201
    2540:	81 11       	cpse	r24, r1
    2542:	04 c0       	rjmp	.+8      	; 0x254c <USB_Device_ProcessControlRequest+0x25e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2544:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2548:	87 ff       	sbrs	r24, 7
    254a:	02 c0       	rjmp	.+4      	; 0x2550 <USB_Device_ProcessControlRequest+0x262>
    254c:	84 e0       	ldi	r24, 0x04	; 4
    254e:	01 c0       	rjmp	.+2      	; 0x2552 <USB_Device_ProcessControlRequest+0x264>
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	80 93 05 02 	sts	0x0205, r24

	EVENT_USB_Device_ConfigurationChanged();
    2556:	0e 94 cf 0c 	call	0x199e	; 0x199e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    255a:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    255e:	83 ff       	sbrs	r24, 3
    2560:	0a c0       	rjmp	.+20     	; 0x2576 <USB_Device_ProcessControlRequest+0x288>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2562:	80 91 e8 00 	lds	r24, 0x00E8
    2566:	87 7f       	andi	r24, 0xF7	; 247
    2568:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    256c:	80 91 eb 00 	lds	r24, 0x00EB
    2570:	80 62       	ori	r24, 0x20	; 32
    2572:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2576:	aa 96       	adiw	r28, 0x2a	; 42
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	df 91       	pop	r29
    2584:	cf 91       	pop	r28
    2586:	1f 91       	pop	r17
    2588:	08 95       	ret

0000258a <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    258a:	90 93 5f 01 	sts	0x015F, r25
    258e:	80 93 5e 01 	sts	0x015E, r24
    2592:	08 95       	ret

00002594 <host_get_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    2594:	80 91 5e 01 	lds	r24, 0x015E
    2598:	90 91 5f 01 	lds	r25, 0x015F
    259c:	08 95       	ret

0000259e <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    259e:	e0 91 5e 01 	lds	r30, 0x015E
    25a2:	f0 91 5f 01 	lds	r31, 0x015F
    25a6:	30 97       	sbiw	r30, 0x00	; 0
    25a8:	21 f0       	breq	.+8      	; 0x25b2 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    25aa:	01 90       	ld	r0, Z+
    25ac:	f0 81       	ld	r31, Z
    25ae:	e0 2d       	mov	r30, r0
    25b0:	09 94       	ijmp
}
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	08 95       	ret

000025b6 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    25b6:	ff 92       	push	r15
    25b8:	0f 93       	push	r16
    25ba:	1f 93       	push	r17
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	8c 01       	movw	r16, r24
    if (!driver) return;
    25c2:	e0 91 5e 01 	lds	r30, 0x015E
    25c6:	f0 91 5f 01 	lds	r31, 0x015F
    25ca:	30 97       	sbiw	r30, 0x00	; 0
    25cc:	99 f1       	breq	.+102    	; 0x2634 <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    25ce:	02 80       	ldd	r0, Z+2	; 0x02
    25d0:	f3 81       	ldd	r31, Z+3	; 0x03
    25d2:	e0 2d       	mov	r30, r0
    25d4:	09 95       	icall

    if (debug_keyboard) {
    25d6:	80 91 bd 01 	lds	r24, 0x01BD
    25da:	82 ff       	sbrs	r24, 2
    25dc:	2b c0       	rjmp	.+86     	; 0x2634 <host_keyboard_send+0x7e>
        dprint("keyboard_report: ");
    25de:	80 ff       	sbrs	r24, 0
    25e0:	04 c0       	rjmp	.+8      	; 0x25ea <host_keyboard_send+0x34>
    25e2:	8c ee       	ldi	r24, 0xEC	; 236
    25e4:	93 e0       	ldi	r25, 0x03	; 3
    25e6:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    25ea:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    25ec:	80 e1       	ldi	r24, 0x10	; 16
    25ee:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    25f0:	06 ee       	ldi	r16, 0xE6	; 230
    25f2:	13 e0       	ldi	r17, 0x03	; 3
    25f4:	80 91 bd 01 	lds	r24, 0x01BD
    25f8:	80 ff       	sbrs	r24, 0
    25fa:	0b c0       	rjmp	.+22     	; 0x2612 <host_keyboard_send+0x5c>
    25fc:	88 81       	ld	r24, Y
    25fe:	1f 92       	push	r1
    2600:	8f 93       	push	r24
    2602:	1f 93       	push	r17
    2604:	0f 93       	push	r16
    2606:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	fa 94       	dec	r15
    2614:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    2616:	f1 10       	cpse	r15, r1
    2618:	ed cf       	rjmp	.-38     	; 0x25f4 <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    261a:	80 91 bd 01 	lds	r24, 0x01BD
    261e:	80 ff       	sbrs	r24, 0
    2620:	09 c0       	rjmp	.+18     	; 0x2634 <host_keyboard_send+0x7e>
    2622:	84 ee       	ldi	r24, 0xE4	; 228
    2624:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    2626:	df 91       	pop	r29
    2628:	cf 91       	pop	r28
    262a:	1f 91       	pop	r17
    262c:	0f 91       	pop	r16
    262e:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2630:	0c 94 b6 08 	jmp	0x116c	; 0x116c <xputs>
    }
}
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	1f 91       	pop	r17
    263a:	0f 91       	pop	r16
    263c:	ff 90       	pop	r15
    263e:	08 95       	ret

00002640 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2640:	e0 91 5e 01 	lds	r30, 0x015E
    2644:	f0 91 5f 01 	lds	r31, 0x015F
    2648:	30 97       	sbiw	r30, 0x00	; 0
    264a:	21 f0       	breq	.+8      	; 0x2654 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    264c:	04 80       	ldd	r0, Z+4	; 0x04
    264e:	f5 81       	ldd	r31, Z+5	; 0x05
    2650:	e0 2d       	mov	r30, r0
    2652:	09 94       	ijmp
    2654:	08 95       	ret

00002656 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    2656:	20 91 5c 01 	lds	r18, 0x015C
    265a:	30 91 5d 01 	lds	r19, 0x015D
    265e:	82 17       	cp	r24, r18
    2660:	93 07       	cpc	r25, r19
    2662:	71 f0       	breq	.+28     	; 0x2680 <host_system_send+0x2a>
    last_system_report = report;
    2664:	90 93 5d 01 	sts	0x015D, r25
    2668:	80 93 5c 01 	sts	0x015C, r24

    if (!driver) return;
    266c:	e0 91 5e 01 	lds	r30, 0x015E
    2670:	f0 91 5f 01 	lds	r31, 0x015F
    2674:	30 97       	sbiw	r30, 0x00	; 0
    2676:	21 f0       	breq	.+8      	; 0x2680 <host_system_send+0x2a>
    (*driver->send_system)(report);
    2678:	06 80       	ldd	r0, Z+6	; 0x06
    267a:	f7 81       	ldd	r31, Z+7	; 0x07
    267c:	e0 2d       	mov	r30, r0
    267e:	09 94       	ijmp
    2680:	08 95       	ret

00002682 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    2682:	20 91 5a 01 	lds	r18, 0x015A
    2686:	30 91 5b 01 	lds	r19, 0x015B
    268a:	82 17       	cp	r24, r18
    268c:	93 07       	cpc	r25, r19
    268e:	71 f0       	breq	.+28     	; 0x26ac <host_consumer_send+0x2a>
    last_consumer_report = report;
    2690:	90 93 5b 01 	sts	0x015B, r25
    2694:	80 93 5a 01 	sts	0x015A, r24

    if (!driver) return;
    2698:	e0 91 5e 01 	lds	r30, 0x015E
    269c:	f0 91 5f 01 	lds	r31, 0x015F
    26a0:	30 97       	sbiw	r30, 0x00	; 0
    26a2:	21 f0       	breq	.+8      	; 0x26ac <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    26a4:	00 84       	ldd	r0, Z+8	; 0x08
    26a6:	f1 85       	ldd	r31, Z+9	; 0x09
    26a8:	e0 2d       	mov	r30, r0
    26aa:	09 94       	ijmp
    26ac:	08 95       	ret

000026ae <keyboard_init>:

extern uint8_t ps2_mouse_enabled;

void keyboard_init(void)
{
    timer_init();
    26ae:	0e 94 22 22 	call	0x4444	; 0x4444 <timer_init>
    matrix_init();
    26b2:	0e 94 7f 09 	call	0x12fe	; 0x12fe <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    26b6:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <bootmagic>
#endif

#ifdef LEDMAP_ENABLE
#ifdef LEDMAP_IN_EEPROM_ENABLE
    ledmap_in_eeprom_init();
    26ba:	0e 94 82 32 	call	0x6504	; 0x6504 <ledmap_in_eeprom_init>
#endif
    ledmap_init();
    26be:	0e 94 ff 30 	call	0x61fe	; 0x61fe <ledmap_init>
#endif

#ifdef SOFTPWM_LED_ENABLE
    softpwm_init();
    26c2:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <softpwm_init>
#ifdef BREATHING_LED_ENABLE
    breathing_led_init();
#endif

#ifdef BACKLIGHT_ENABLE
    backlight_init();
    26c6:	0c 94 c7 2f 	jmp	0x5f8e	; 0x5f8e <backlight_init>

000026ca <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    26ca:	cf 93       	push	r28
    26cc:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    26ce:	80 91 bd 01 	lds	r24, 0x01BD
    26d2:	82 ff       	sbrs	r24, 2
    26d4:	1e c0       	rjmp	.+60     	; 0x2712 <keyboard_set_leds+0x48>
    26d6:	80 ff       	sbrs	r24, 0
    26d8:	04 c0       	rjmp	.+8      	; 0x26e2 <keyboard_set_leds+0x18>
    26da:	85 e0       	ldi	r24, 0x05	; 5
    26dc:	94 e0       	ldi	r25, 0x04	; 4
    26de:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    26e2:	80 91 bd 01 	lds	r24, 0x01BD
    26e6:	80 ff       	sbrs	r24, 0
    26e8:	0c c0       	rjmp	.+24     	; 0x2702 <keyboard_set_leds+0x38>
    26ea:	1f 92       	push	r1
    26ec:	cf 93       	push	r28
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	34 e0       	ldi	r19, 0x04	; 4
    26f2:	3f 93       	push	r19
    26f4:	2f 93       	push	r18
    26f6:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	80 91 bd 01 	lds	r24, 0x01BD
    2706:	80 ff       	sbrs	r24, 0
    2708:	04 c0       	rjmp	.+8      	; 0x2712 <keyboard_set_leds+0x48>
    270a:	8e ef       	ldi	r24, 0xFE	; 254
    270c:	93 e0       	ldi	r25, 0x03	; 3
    270e:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    led_set(leds);
    2712:	8c 2f       	mov	r24, r28
}
    2714:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    2716:	0c 94 61 31 	jmp	0x62c2	; 0x62c2 <led_set>

0000271a <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    271a:	cf 92       	push	r12
    271c:	df 92       	push	r13
    271e:	ef 92       	push	r14
    2720:	ff 92       	push	r15
    2722:	0f 93       	push	r16
    2724:	1f 93       	push	r17
    2726:	cf 93       	push	r28
    2728:	df 93       	push	r29
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	2b 97       	sbiw	r28, 0x0b	; 11
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    273a:	0e 94 97 09 	call	0x132e	; 0x132e <matrix_scan>
    273e:	31 e6       	ldi	r19, 0x61	; 97
    2740:	e3 2e       	mov	r14, r19
    2742:	31 e0       	ldi	r19, 0x01	; 1
    2744:	f3 2e       	mov	r15, r19
    2746:	00 e0       	ldi	r16, 0x00	; 0
    2748:	10 e0       	ldi	r17, 0x00	; 0
    274a:	c0 2e       	mov	r12, r16
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    274c:	80 2f       	mov	r24, r16
    274e:	0e 94 48 0a 	call	0x1490	; 0x1490 <matrix_get_row>
        matrix_change = matrix_row ^ matrix_prev[r];
    2752:	f7 01       	movw	r30, r14
    2754:	d1 90       	ld	r13, Z+
    2756:	7f 01       	movw	r14, r30
    2758:	d8 26       	eor	r13, r24
        if (matrix_change) {
    275a:	b1 f4       	brne	.+44     	; 0x2788 <keyboard_task+0x6e>
    275c:	0f 5f       	subi	r16, 0xFF	; 255
    275e:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2760:	06 30       	cpi	r16, 0x06	; 6
    2762:	11 05       	cpc	r17, r1
    2764:	91 f7       	brne	.-28     	; 0x274a <keyboard_task+0x30>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2766:	8f ef       	ldi	r24, 0xFF	; 255
    2768:	89 83       	std	Y+1, r24	; 0x01
    276a:	8a 83       	std	Y+2, r24	; 0x02
    276c:	1b 82       	std	Y+3, r1	; 0x03
    276e:	0e 94 2b 22 	call	0x4456	; 0x4456 <timer_read>
    2772:	81 60       	ori	r24, 0x01	; 1
    2774:	78 2f       	mov	r23, r24
    2776:	9d 83       	std	Y+5, r25	; 0x05
    2778:	8c 83       	std	Y+4, r24	; 0x04
    277a:	49 81       	ldd	r20, Y+1	; 0x01
    277c:	5a 81       	ldd	r21, Y+2	; 0x02
    277e:	6b 81       	ldd	r22, Y+3	; 0x03
    2780:	8d 81       	ldd	r24, Y+5	; 0x05
    2782:	0e 94 29 19 	call	0x3252	; 0x3252 <action_exec>
    2786:	41 c0       	rjmp	.+130    	; 0x280a <keyboard_task+0xf0>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    2788:	90 91 bd 01 	lds	r25, 0x01BD
    278c:	91 ff       	sbrs	r25, 1
    278e:	04 c0       	rjmp	.+8      	; 0x2798 <keyboard_task+0x7e>
    2790:	8b 87       	std	Y+11, r24	; 0x0b
    2792:	0e 94 4e 0a 	call	0x149c	; 0x149c <matrix_print>
    2796:	8b 85       	ldd	r24, Y+11	; 0x0b
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    279c:	4d 2d       	mov	r20, r13
    279e:	50 e0       	ldi	r21, 0x00	; 0
    27a0:	92 2f       	mov	r25, r18
    27a2:	ba 01       	movw	r22, r20
    27a4:	02 2e       	mov	r0, r18
    27a6:	02 c0       	rjmp	.+4      	; 0x27ac <keyboard_task+0x92>
    27a8:	75 95       	asr	r23
    27aa:	67 95       	ror	r22
    27ac:	0a 94       	dec	r0
    27ae:	e2 f7       	brpl	.-8      	; 0x27a8 <keyboard_task+0x8e>
    27b0:	60 ff       	sbrs	r22, 0
    27b2:	25 c0       	rjmp	.+74     	; 0x27fe <keyboard_task+0xe4>
                    action_exec((keyevent_t){
    27b4:	2e 83       	std	Y+6, r18	; 0x06
    27b6:	cf 82       	std	Y+7, r12	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    27b8:	ee 24       	eor	r14, r14
    27ba:	e3 94       	inc	r14
    27bc:	f1 2c       	mov	r15, r1
    27be:	02 c0       	rjmp	.+4      	; 0x27c4 <keyboard_task+0xaa>
    27c0:	ee 0c       	add	r14, r14
    27c2:	ff 1c       	adc	r15, r15
    27c4:	9a 95       	dec	r25
    27c6:	e2 f7       	brpl	.-8      	; 0x27c0 <keyboard_task+0xa6>
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	8e 21       	and	r24, r14
    27cc:	9f 21       	and	r25, r15
    27ce:	21 e0       	ldi	r18, 0x01	; 1
    27d0:	89 2b       	or	r24, r25
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <keyboard_task+0xbc>
    27d4:	20 e0       	ldi	r18, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    27d6:	28 87       	std	Y+8, r18	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    27d8:	0e 94 2b 22 	call	0x4456	; 0x4456 <timer_read>
    27dc:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    27de:	78 2f       	mov	r23, r24
    27e0:	9a 87       	std	Y+10, r25	; 0x0a
    27e2:	89 87       	std	Y+9, r24	; 0x09
    27e4:	4e 81       	ldd	r20, Y+6	; 0x06
    27e6:	5f 81       	ldd	r21, Y+7	; 0x07
    27e8:	68 85       	ldd	r22, Y+8	; 0x08
    27ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    27ec:	0e 94 29 19 	call	0x3252	; 0x3252 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    27f0:	f8 01       	movw	r30, r16
    27f2:	ef 59       	subi	r30, 0x9F	; 159
    27f4:	fe 4f       	sbci	r31, 0xFE	; 254
    27f6:	80 81       	ld	r24, Z
    27f8:	8e 25       	eor	r24, r14
    27fa:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    27fc:	06 c0       	rjmp	.+12     	; 0x280a <keyboard_task+0xf0>
    27fe:	2f 5f       	subi	r18, 0xFF	; 255
    2800:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    2802:	24 30       	cpi	r18, 0x04	; 4
    2804:	31 05       	cpc	r19, r1
    2806:	61 f6       	brne	.-104    	; 0x27a0 <keyboard_task+0x86>
    2808:	a9 cf       	rjmp	.-174    	; 0x275c <keyboard_task+0x42>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    280a:	0e 94 6f 26 	call	0x4cde	; 0x4cde <mousekey_task>
#ifdef SERIAL_MOUSE_ENABLE
        serial_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    280e:	10 91 60 01 	lds	r17, 0x0160
    2812:	0e 94 cf 12 	call	0x259e	; 0x259e <host_keyboard_leds>
    2816:	18 17       	cp	r17, r24
    2818:	a1 f0       	breq	.+40     	; 0x2842 <keyboard_task+0x128>
        led_status = host_keyboard_leds();
    281a:	0e 94 cf 12 	call	0x259e	; 0x259e <host_keyboard_leds>
    281e:	80 93 60 01 	sts	0x0160, r24
        keyboard_set_leds(led_status);
    }
}
    2822:	2b 96       	adiw	r28, 0x0b	; 11
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	df 91       	pop	r29
    2830:	cf 91       	pop	r28
    2832:	1f 91       	pop	r17
    2834:	0f 91       	pop	r16
    2836:	ff 90       	pop	r15
    2838:	ef 90       	pop	r14
    283a:	df 90       	pop	r13
    283c:	cf 90       	pop	r12
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    283e:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <keyboard_set_leds>
    }
}
    2842:	2b 96       	adiw	r28, 0x0b	; 11
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	de bf       	out	0x3e, r29	; 62
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	cd bf       	out	0x3d, r28	; 61
    284e:	df 91       	pop	r29
    2850:	cf 91       	pop	r28
    2852:	1f 91       	pop	r17
    2854:	0f 91       	pop	r16
    2856:	ff 90       	pop	r15
    2858:	ef 90       	pop	r14
    285a:	df 90       	pop	r13
    285c:	cf 90       	pop	r12
    285e:	08 95       	ret

00002860 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2860:	cf 93       	push	r28
    2862:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2864:	88 23       	and	r24, r24
    2866:	09 f4       	brne	.+2      	; 0x286a <register_code+0xa>
    2868:	c1 c0       	rjmp	.+386    	; 0x29ec <register_code+0x18c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    286a:	82 38       	cpi	r24, 0x82	; 130
    286c:	59 f4       	brne	.+22     	; 0x2884 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    286e:	0e 94 cf 12 	call	0x259e	; 0x259e <host_keyboard_leds>
    2872:	81 fd       	sbrc	r24, 1
    2874:	bb c0       	rjmp	.+374    	; 0x29ec <register_code+0x18c>
#endif
        add_key(KC_CAPSLOCK);
    2876:	89 e3       	ldi	r24, 0x39	; 57
    2878:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <add_key>
        send_keyboard_report();
    287c:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2880:	89 e3       	ldi	r24, 0x39	; 57
    2882:	0c c0       	rjmp	.+24     	; 0x289c <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2884:	83 38       	cpi	r24, 0x83	; 131
    2886:	79 f4       	brne	.+30     	; 0x28a6 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    2888:	0e 94 cf 12 	call	0x259e	; 0x259e <host_keyboard_leds>
    288c:	80 fd       	sbrc	r24, 0
    288e:	ae c0       	rjmp	.+348    	; 0x29ec <register_code+0x18c>
#endif
        add_key(KC_NUMLOCK);
    2890:	83 e5       	ldi	r24, 0x53	; 83
    2892:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <add_key>
        send_keyboard_report();
    2896:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    289a:	83 e5       	ldi	r24, 0x53	; 83
    289c:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    28a0:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    28a2:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    28a6:	84 38       	cpi	r24, 0x84	; 132
    28a8:	59 f4       	brne	.+22     	; 0x28c0 <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    28aa:	0e 94 cf 12 	call	0x259e	; 0x259e <host_keyboard_leds>
    28ae:	82 fd       	sbrc	r24, 2
    28b0:	9d c0       	rjmp	.+314    	; 0x29ec <register_code+0x18c>
#endif
        add_key(KC_SCROLLLOCK);
    28b2:	87 e4       	ldi	r24, 0x47	; 71
    28b4:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <add_key>
        send_keyboard_report();
    28b8:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    28bc:	87 e4       	ldi	r24, 0x47	; 71
    28be:	ee cf       	rjmp	.-36     	; 0x289c <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    28c0:	8c ef       	ldi	r24, 0xFC	; 252
    28c2:	8c 0f       	add	r24, r28
    28c4:	81 3a       	cpi	r24, 0xA1	; 161
    28c6:	48 f4       	brcc	.+18     	; 0x28da <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    28c8:	8c 2f       	mov	r24, r28
    28ca:	0e 94 8d 2c 	call	0x591a	; 0x591a <command_proc>
    28ce:	81 11       	cpse	r24, r1
    28d0:	8d c0       	rjmp	.+282    	; 0x29ec <register_code+0x18c>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    28d2:	8c 2f       	mov	r24, r28
    28d4:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <add_key>
    28d8:	e3 cf       	rjmp	.-58     	; 0x28a0 <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    28da:	80 e2       	ldi	r24, 0x20	; 32
    28dc:	8c 0f       	add	r24, r28
    28de:	88 30       	cpi	r24, 0x08	; 8
    28e0:	48 f4       	brcc	.+18     	; 0x28f4 <register_code+0x94>
        add_mods(MOD_BIT(code));
    28e2:	c7 70       	andi	r28, 0x07	; 7
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	01 c0       	rjmp	.+2      	; 0x28ea <register_code+0x8a>
    28e8:	88 0f       	add	r24, r24
    28ea:	ca 95       	dec	r28
    28ec:	ea f7       	brpl	.-6      	; 0x28e8 <register_code+0x88>
    28ee:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <add_mods>
    28f2:	d6 cf       	rjmp	.-84     	; 0x28a0 <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    28f4:	8b e5       	ldi	r24, 0x5B	; 91
    28f6:	8c 0f       	add	r24, r28
    28f8:	83 30       	cpi	r24, 0x03	; 3
    28fa:	78 f4       	brcc	.+30     	; 0x291a <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    28fc:	c5 3a       	cpi	r28, 0xA5	; 165
    28fe:	29 f0       	breq	.+10     	; 0x290a <register_code+0xaa>
    2900:	c6 3a       	cpi	r28, 0xA6	; 166
    2902:	31 f4       	brne	.+12     	; 0x2910 <register_code+0xb0>
    2904:	82 e8       	ldi	r24, 0x82	; 130
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	05 c0       	rjmp	.+10     	; 0x2914 <register_code+0xb4>
    290a:	81 e8       	ldi	r24, 0x81	; 129
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <register_code+0xb4>
    2910:	83 e8       	ldi	r24, 0x83	; 131
    2912:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2914:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    2916:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    291a:	88 e5       	ldi	r24, 0x58	; 88
    291c:	8c 0f       	add	r24, r28
    291e:	83 31       	cpi	r24, 0x13	; 19
    2920:	08 f0       	brcs	.+2      	; 0x2924 <register_code+0xc4>
    2922:	64 c0       	rjmp	.+200    	; 0x29ec <register_code+0x18c>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2924:	c8 3a       	cpi	r28, 0xA8	; 168
    2926:	39 f1       	breq	.+78     	; 0x2976 <register_code+0x116>
    2928:	c9 3a       	cpi	r28, 0xA9	; 169
    292a:	41 f1       	breq	.+80     	; 0x297c <register_code+0x11c>
    292c:	ca 3a       	cpi	r28, 0xAA	; 170
    292e:	49 f1       	breq	.+82     	; 0x2982 <register_code+0x122>
    2930:	cb 3a       	cpi	r28, 0xAB	; 171
    2932:	51 f1       	breq	.+84     	; 0x2988 <register_code+0x128>
    2934:	cc 3a       	cpi	r28, 0xAC	; 172
    2936:	59 f1       	breq	.+86     	; 0x298e <register_code+0x12e>
    2938:	cd 3a       	cpi	r28, 0xAD	; 173
    293a:	61 f1       	breq	.+88     	; 0x2994 <register_code+0x134>
    293c:	c0 3b       	cpi	r28, 0xB0	; 176
    293e:	69 f1       	breq	.+90     	; 0x299a <register_code+0x13a>
    2940:	ce 3a       	cpi	r28, 0xAE	; 174
    2942:	71 f1       	breq	.+92     	; 0x29a0 <register_code+0x140>
    2944:	cf 3a       	cpi	r28, 0xAF	; 175
    2946:	79 f1       	breq	.+94     	; 0x29a6 <register_code+0x146>
    2948:	c1 3b       	cpi	r28, 0xB1	; 177
    294a:	81 f1       	breq	.+96     	; 0x29ac <register_code+0x14c>
    294c:	c2 3b       	cpi	r28, 0xB2	; 178
    294e:	89 f1       	breq	.+98     	; 0x29b2 <register_code+0x152>
    2950:	c3 3b       	cpi	r28, 0xB3	; 179
    2952:	91 f1       	breq	.+100    	; 0x29b8 <register_code+0x158>
    2954:	c4 3b       	cpi	r28, 0xB4	; 180
    2956:	99 f1       	breq	.+102    	; 0x29be <register_code+0x15e>
    2958:	c5 3b       	cpi	r28, 0xB5	; 181
    295a:	a1 f1       	breq	.+104    	; 0x29c4 <register_code+0x164>
    295c:	c6 3b       	cpi	r28, 0xB6	; 182
    295e:	a9 f1       	breq	.+106    	; 0x29ca <register_code+0x16a>
    2960:	c7 3b       	cpi	r28, 0xB7	; 183
    2962:	b1 f1       	breq	.+108    	; 0x29d0 <register_code+0x170>
    2964:	c8 3b       	cpi	r28, 0xB8	; 184
    2966:	b9 f1       	breq	.+110    	; 0x29d6 <register_code+0x176>
    2968:	c9 3b       	cpi	r28, 0xB9	; 185
    296a:	c1 f1       	breq	.+112    	; 0x29dc <register_code+0x17c>
    296c:	ca 3b       	cpi	r28, 0xBA	; 186
    296e:	c9 f5       	brne	.+114    	; 0x29e2 <register_code+0x182>
    2970:	8a e2       	ldi	r24, 0x2A	; 42
    2972:	92 e0       	ldi	r25, 0x02	; 2
    2974:	38 c0       	rjmp	.+112    	; 0x29e6 <register_code+0x186>
    2976:	82 ee       	ldi	r24, 0xE2	; 226
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	35 c0       	rjmp	.+106    	; 0x29e6 <register_code+0x186>
    297c:	89 ee       	ldi	r24, 0xE9	; 233
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	32 c0       	rjmp	.+100    	; 0x29e6 <register_code+0x186>
    2982:	8a ee       	ldi	r24, 0xEA	; 234
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	2f c0       	rjmp	.+94     	; 0x29e6 <register_code+0x186>
    2988:	85 eb       	ldi	r24, 0xB5	; 181
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	2c c0       	rjmp	.+88     	; 0x29e6 <register_code+0x186>
    298e:	86 eb       	ldi	r24, 0xB6	; 182
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	29 c0       	rjmp	.+82     	; 0x29e6 <register_code+0x186>
    2994:	87 eb       	ldi	r24, 0xB7	; 183
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	26 c0       	rjmp	.+76     	; 0x29e6 <register_code+0x186>
    299a:	8c ec       	ldi	r24, 0xCC	; 204
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	23 c0       	rjmp	.+70     	; 0x29e6 <register_code+0x186>
    29a0:	8d ec       	ldi	r24, 0xCD	; 205
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	20 c0       	rjmp	.+64     	; 0x29e6 <register_code+0x186>
    29a6:	83 e8       	ldi	r24, 0x83	; 131
    29a8:	91 e0       	ldi	r25, 0x01	; 1
    29aa:	1d c0       	rjmp	.+58     	; 0x29e6 <register_code+0x186>
    29ac:	8a e8       	ldi	r24, 0x8A	; 138
    29ae:	91 e0       	ldi	r25, 0x01	; 1
    29b0:	1a c0       	rjmp	.+52     	; 0x29e6 <register_code+0x186>
    29b2:	82 e9       	ldi	r24, 0x92	; 146
    29b4:	91 e0       	ldi	r25, 0x01	; 1
    29b6:	17 c0       	rjmp	.+46     	; 0x29e6 <register_code+0x186>
    29b8:	84 e9       	ldi	r24, 0x94	; 148
    29ba:	91 e0       	ldi	r25, 0x01	; 1
    29bc:	14 c0       	rjmp	.+40     	; 0x29e6 <register_code+0x186>
    29be:	81 e2       	ldi	r24, 0x21	; 33
    29c0:	92 e0       	ldi	r25, 0x02	; 2
    29c2:	11 c0       	rjmp	.+34     	; 0x29e6 <register_code+0x186>
    29c4:	83 e2       	ldi	r24, 0x23	; 35
    29c6:	92 e0       	ldi	r25, 0x02	; 2
    29c8:	0e c0       	rjmp	.+28     	; 0x29e6 <register_code+0x186>
    29ca:	84 e2       	ldi	r24, 0x24	; 36
    29cc:	92 e0       	ldi	r25, 0x02	; 2
    29ce:	0b c0       	rjmp	.+22     	; 0x29e6 <register_code+0x186>
    29d0:	85 e2       	ldi	r24, 0x25	; 37
    29d2:	92 e0       	ldi	r25, 0x02	; 2
    29d4:	08 c0       	rjmp	.+16     	; 0x29e6 <register_code+0x186>
    29d6:	86 e2       	ldi	r24, 0x26	; 38
    29d8:	92 e0       	ldi	r25, 0x02	; 2
    29da:	05 c0       	rjmp	.+10     	; 0x29e6 <register_code+0x186>
    29dc:	87 e2       	ldi	r24, 0x27	; 39
    29de:	92 e0       	ldi	r25, 0x02	; 2
    29e0:	02 c0       	rjmp	.+4      	; 0x29e6 <register_code+0x186>
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    29e6:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    29e8:	0c 94 41 13 	jmp	0x2682	; 0x2682 <host_consumer_send>
    }
}
    29ec:	cf 91       	pop	r28
    29ee:	08 95       	ret

000029f0 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    29f0:	88 23       	and	r24, r24
    29f2:	09 f4       	brne	.+2      	; 0x29f6 <unregister_code+0x6>
    29f4:	4b c0       	rjmp	.+150    	; 0x2a8c <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    29f6:	82 38       	cpi	r24, 0x82	; 130
    29f8:	59 f4       	brne	.+22     	; 0x2a10 <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    29fa:	0e 94 cf 12 	call	0x259e	; 0x259e <host_keyboard_leds>
    29fe:	81 ff       	sbrs	r24, 1
    2a00:	45 c0       	rjmp	.+138    	; 0x2a8c <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    2a02:	89 e3       	ldi	r24, 0x39	; 57
    2a04:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <add_key>
        send_keyboard_report();
    2a08:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2a0c:	89 e3       	ldi	r24, 0x39	; 57
    2a0e:	0c c0       	rjmp	.+24     	; 0x2a28 <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2a10:	83 38       	cpi	r24, 0x83	; 131
    2a12:	71 f4       	brne	.+28     	; 0x2a30 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2a14:	0e 94 cf 12 	call	0x259e	; 0x259e <host_keyboard_leds>
    2a18:	80 ff       	sbrs	r24, 0
    2a1a:	38 c0       	rjmp	.+112    	; 0x2a8c <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    2a1c:	83 e5       	ldi	r24, 0x53	; 83
    2a1e:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <add_key>
        send_keyboard_report();
    2a22:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2a26:	83 e5       	ldi	r24, 0x53	; 83
    2a28:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <del_key>
        send_keyboard_report();
    2a2c:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2a30:	84 38       	cpi	r24, 0x84	; 132
    2a32:	59 f4       	brne	.+22     	; 0x2a4a <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2a34:	0e 94 cf 12 	call	0x259e	; 0x259e <host_keyboard_leds>
    2a38:	82 ff       	sbrs	r24, 2
    2a3a:	28 c0       	rjmp	.+80     	; 0x2a8c <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    2a3c:	87 e4       	ldi	r24, 0x47	; 71
    2a3e:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <add_key>
        send_keyboard_report();
    2a42:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2a46:	87 e4       	ldi	r24, 0x47	; 71
    2a48:	ef cf       	rjmp	.-34     	; 0x2a28 <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2a4a:	9c ef       	ldi	r25, 0xFC	; 252
    2a4c:	98 0f       	add	r25, r24
    2a4e:	91 3a       	cpi	r25, 0xA1	; 161
    2a50:	58 f3       	brcs	.-42     	; 0x2a28 <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2a52:	90 e2       	ldi	r25, 0x20	; 32
    2a54:	98 0f       	add	r25, r24
    2a56:	98 30       	cpi	r25, 0x08	; 8
    2a58:	50 f4       	brcc	.+20     	; 0x2a6e <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    2a5a:	87 70       	andi	r24, 0x07	; 7
    2a5c:	91 e0       	ldi	r25, 0x01	; 1
    2a5e:	01 c0       	rjmp	.+2      	; 0x2a62 <unregister_code+0x72>
    2a60:	99 0f       	add	r25, r25
    2a62:	8a 95       	dec	r24
    2a64:	ea f7       	brpl	.-6      	; 0x2a60 <unregister_code+0x70>
    2a66:	89 2f       	mov	r24, r25
    2a68:	0e 94 c1 1f 	call	0x3f82	; 0x3f82 <del_mods>
    2a6c:	df cf       	rjmp	.-66     	; 0x2a2c <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2a6e:	9b e5       	ldi	r25, 0x5B	; 91
    2a70:	98 0f       	add	r25, r24
    2a72:	93 30       	cpi	r25, 0x03	; 3
    2a74:	20 f4       	brcc	.+8      	; 0x2a7e <unregister_code+0x8e>
        host_system_send(0);
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2a7e:	88 5a       	subi	r24, 0xA8	; 168
    2a80:	83 31       	cpi	r24, 0x13	; 19
    2a82:	20 f4       	brcc	.+8      	; 0x2a8c <unregister_code+0x9c>
        host_consumer_send(0);
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	0c 94 41 13 	jmp	0x2682	; 0x2682 <host_consumer_send>
    2a8c:	08 95       	ret

00002a8e <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2a8e:	88 23       	and	r24, r24
    2a90:	21 f0       	breq	.+8      	; 0x2a9a <register_mods+0xc>
        add_mods(mods);
    2a92:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <add_mods>
        send_keyboard_report();
    2a96:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <send_keyboard_report>
    2a9a:	08 95       	ret

00002a9c <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2a9c:	88 23       	and	r24, r24
    2a9e:	21 f0       	breq	.+8      	; 0x2aa8 <unregister_mods+0xc>
        del_mods(mods);
    2aa0:	0e 94 c1 1f 	call	0x3f82	; 0x3f82 <del_mods>
        send_keyboard_report();
    2aa4:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <send_keyboard_report>
    2aa8:	08 95       	ret

00002aaa <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    2aaa:	cf 92       	push	r12
    2aac:	df 92       	push	r13
    2aae:	ef 92       	push	r14
    2ab0:	ff 92       	push	r15
    2ab2:	0f 93       	push	r16
    2ab4:	1f 93       	push	r17
    2ab6:	cf 93       	push	r28
    2ab8:	df 93       	push	r29
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    2abe:	28 97       	sbiw	r28, 0x08	; 8
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    2acc:	85 e0       	ldi	r24, 0x05	; 5
    2ace:	f8 01       	movw	r30, r16
    2ad0:	de 01       	movw	r26, r28
    2ad2:	11 96       	adiw	r26, 0x01	; 1
    2ad4:	01 90       	ld	r0, Z+
    2ad6:	0d 92       	st	X+, r0
    2ad8:	8a 95       	dec	r24
    2ada:	e1 f7       	brne	.-8      	; 0x2ad4 <process_action+0x2a>
    2adc:	f8 01       	movw	r30, r16
    2ade:	40 81       	ld	r20, Z
    2ae0:	31 81       	ldd	r19, Z+1	; 0x01
    2ae2:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2ae4:	25 81       	ldd	r18, Z+5	; 0x05
    2ae6:	22 95       	swap	r18
    2ae8:	2f 70       	andi	r18, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2aea:	83 81       	ldd	r24, Z+3	; 0x03
    2aec:	94 81       	ldd	r25, Z+4	; 0x04
    2aee:	89 2b       	or	r24, r25
    2af0:	31 f0       	breq	.+12     	; 0x2afe <process_action+0x54>
    2af2:	3f 3f       	cpi	r19, 0xFF	; 255
    2af4:	31 f4       	brne	.+12     	; 0x2b02 <process_action+0x58>
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	4f 3f       	cpi	r20, 0xFF	; 255
    2afa:	19 f4       	brne	.+6      	; 0x2b02 <process_action+0x58>
    2afc:	03 c0       	rjmp	.+6      	; 0x2b04 <process_action+0x5a>
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	01 c0       	rjmp	.+2      	; 0x2b04 <process_action+0x5a>
    2b02:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    2b04:	80 fd       	sbrc	r24, 0
    2b06:	3c c3       	rjmp	.+1656   	; 0x3180 <process_action+0x6d6>

    action_t action = layer_switch_get_action(event.key);
    2b08:	49 83       	std	Y+1, r20	; 0x01
    2b0a:	3a 83       	std	Y+2, r19	; 0x02
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b10:	2f 83       	std	Y+7, r18	; 0x07
    2b12:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2b16:	9e 83       	std	Y+6, r25	; 0x06
    2b18:	88 87       	std	Y+8, r24	; 0x08
    2b1a:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2b1e:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2b22:	4e 81       	ldd	r20, Y+6	; 0x06
    2b24:	e4 2f       	mov	r30, r20
    2b26:	e2 95       	swap	r30
    2b28:	ef 70       	andi	r30, 0x0F	; 15
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	e0 5a       	subi	r30, 0xA0	; 160
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	2f 81       	ldd	r18, Y+7	; 0x07
    2b32:	68 85       	ldd	r22, Y+8	; 0x08
    2b34:	0c 94 12 34 	jmp	0x6824	; 0x6824 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2b38:	84 2f       	mov	r24, r20
    2b3a:	80 7f       	andi	r24, 0xF0	; 240
    2b3c:	14 2f       	mov	r17, r20
    2b3e:	1f 70       	andi	r17, 0x0F	; 15
    2b40:	88 23       	and	r24, r24
    2b42:	11 f0       	breq	.+4      	; 0x2b48 <process_action+0x9e>
    2b44:	12 95       	swap	r17
    2b46:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    2b48:	ff 20       	and	r15, r15
    2b4a:	59 f0       	breq	.+22     	; 0x2b62 <process_action+0xb8>
                    if (mods) {
    2b4c:	11 23       	and	r17, r17
    2b4e:	09 f4       	brne	.+2      	; 0x2b52 <process_action+0xa8>
    2b50:	58 c2       	rjmp	.+1200   	; 0x3002 <process_action+0x558>
                        add_weak_mods(mods);
    2b52:	81 2f       	mov	r24, r17
    2b54:	68 87       	std	Y+8, r22	; 0x08
    2b56:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <add_weak_mods>
                        send_keyboard_report();
    2b5a:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <send_keyboard_report>
    2b5e:	68 85       	ldd	r22, Y+8	; 0x08
    2b60:	50 c2       	rjmp	.+1184   	; 0x3002 <process_action+0x558>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2b62:	86 2f       	mov	r24, r22
    2b64:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <unregister_code>
                    if (mods) {
    2b68:	11 23       	and	r17, r17
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <process_action+0xc4>
    2b6c:	09 c3       	rjmp	.+1554   	; 0x3180 <process_action+0x6d6>
                        del_weak_mods(mods);
    2b6e:	81 2f       	mov	r24, r17
    2b70:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2b74:	28 96       	adiw	r28, 0x08	; 8
    2b76:	0f b6       	in	r0, 0x3f	; 63
    2b78:	f8 94       	cli
    2b7a:	de bf       	out	0x3e, r29	; 62
    2b7c:	0f be       	out	0x3f, r0	; 63
    2b7e:	cd bf       	out	0x3d, r28	; 61
    2b80:	df 91       	pop	r29
    2b82:	cf 91       	pop	r28
    2b84:	1f 91       	pop	r17
    2b86:	0f 91       	pop	r16
    2b88:	ff 90       	pop	r15
    2b8a:	ef 90       	pop	r14
    2b8c:	df 90       	pop	r13
    2b8e:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2b90:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2b94:	34 2f       	mov	r19, r20
    2b96:	30 7f       	andi	r19, 0xF0	; 240
    2b98:	84 2f       	mov	r24, r20
    2b9a:	8f 70       	andi	r24, 0x0F	; 15
    2b9c:	30 32       	cpi	r19, 0x20	; 32
    2b9e:	11 f0       	breq	.+4      	; 0x2ba4 <process_action+0xfa>
    2ba0:	82 95       	swap	r24
    2ba2:	80 7f       	andi	r24, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    2ba4:	66 23       	and	r22, r22
    2ba6:	19 f0       	breq	.+6      	; 0x2bae <process_action+0x104>
    2ba8:	61 30       	cpi	r22, 0x01	; 1
    2baa:	09 f1       	breq	.+66     	; 0x2bee <process_action+0x144>
    2bac:	2a c0       	rjmp	.+84     	; 0x2c02 <process_action+0x158>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2bae:	ff 20       	and	r15, r15
    2bb0:	a1 f0       	breq	.+40     	; 0x2bda <process_action+0x130>
                            if (tap_count == 0) {
    2bb2:	22 23       	and	r18, r18
    2bb4:	81 f1       	breq	.+96     	; 0x2c16 <process_action+0x16c>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2bb6:	21 30       	cpi	r18, 0x01	; 1
    2bb8:	71 f5       	brne	.+92     	; 0x2c16 <process_action+0x16c>
            break;
#endif
        default:
            break;
    }
}
    2bba:	28 96       	adiw	r28, 0x08	; 8
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	de bf       	out	0x3e, r29	; 62
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	cd bf       	out	0x3d, r28	; 61
    2bc6:	df 91       	pop	r29
    2bc8:	cf 91       	pop	r28
    2bca:	1f 91       	pop	r17
    2bcc:	0f 91       	pop	r16
    2bce:	ff 90       	pop	r15
    2bd0:	ef 90       	pop	r14
    2bd2:	df 90       	pop	r13
    2bd4:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2bd6:	0c 94 db 1f 	jmp	0x3fb6	; 0x3fb6 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2bda:	22 23       	and	r18, r18
    2bdc:	19 f0       	breq	.+6      	; 0x2be4 <process_action+0x13a>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2bde:	21 30       	cpi	r18, 0x01	; 1
    2be0:	09 f4       	brne	.+2      	; 0x2be4 <process_action+0x13a>
    2be2:	ce c2       	rjmp	.+1436   	; 0x3180 <process_action+0x6d6>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2be4:	8e 83       	std	Y+6, r24	; 0x06
    2be6:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <clear_oneshot_mods>
                                unregister_mods(mods);
    2bea:	8e 81       	ldd	r24, Y+6	; 0x06
    2bec:	8e c1       	rjmp	.+796    	; 0x2f0a <process_action+0x460>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2bee:	ff 20       	and	r15, r15
    2bf0:	21 f0       	breq	.+8      	; 0x2bfa <process_action+0x150>
                            if (tap_count <= TAPPING_TOGGLE) {
    2bf2:	26 30       	cpi	r18, 0x06	; 6
    2bf4:	08 f0       	brcs	.+2      	; 0x2bf8 <process_action+0x14e>
    2bf6:	c4 c2       	rjmp	.+1416   	; 0x3180 <process_action+0x6d6>
    2bf8:	0e c0       	rjmp	.+28     	; 0x2c16 <process_action+0x16c>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2bfa:	25 30       	cpi	r18, 0x05	; 5
    2bfc:	08 f0       	brcs	.+2      	; 0x2c00 <process_action+0x156>
    2bfe:	c0 c2       	rjmp	.+1408   	; 0x3180 <process_action+0x6d6>
    2c00:	84 c1       	rjmp	.+776    	; 0x2f0a <process_action+0x460>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2c02:	ff 20       	and	r15, r15
    2c04:	c1 f0       	breq	.+48     	; 0x2c36 <process_action+0x18c>
                            if (tap_count > 0) {
    2c06:	22 23       	and	r18, r18
    2c08:	31 f0       	breq	.+12     	; 0x2c16 <process_action+0x16c>
                                if (record->tap.interrupted) {
    2c0a:	f8 01       	movw	r30, r16
    2c0c:	95 81       	ldd	r25, Z+5	; 0x05
    2c0e:	90 ff       	sbrs	r25, 0
    2c10:	f8 c1       	rjmp	.+1008   	; 0x3002 <process_action+0x558>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2c12:	9f 70       	andi	r25, 0x0F	; 15
    2c14:	95 83       	std	Z+5, r25	; 0x05
            break;
#endif
        default:
            break;
    }
}
    2c16:	28 96       	adiw	r28, 0x08	; 8
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	cd bf       	out	0x3d, r28	; 61
    2c22:	df 91       	pop	r29
    2c24:	cf 91       	pop	r28
    2c26:	1f 91       	pop	r17
    2c28:	0f 91       	pop	r16
    2c2a:	ff 90       	pop	r15
    2c2c:	ef 90       	pop	r14
    2c2e:	df 90       	pop	r13
    2c30:	cf 90       	pop	r12
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
                                    register_mods(mods);
    2c32:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <register_mods>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2c36:	22 23       	and	r18, r18
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <process_action+0x192>
    2c3a:	67 c1       	rjmp	.+718    	; 0x2f0a <process_action+0x460>
    2c3c:	f6 c1       	rjmp	.+1004   	; 0x302a <process_action+0x580>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2c3e:	24 2f       	mov	r18, r20
    2c40:	26 95       	lsr	r18
    2c42:	26 95       	lsr	r18
    2c44:	23 70       	andi	r18, 0x03	; 3
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	21 15       	cp	r18, r1
    2c4a:	31 05       	cpc	r19, r1
    2c4c:	21 f0       	breq	.+8      	; 0x2c56 <process_action+0x1ac>
    2c4e:	21 30       	cpi	r18, 0x01	; 1
    2c50:	31 05       	cpc	r19, r1
    2c52:	c9 f0       	breq	.+50     	; 0x2c86 <process_action+0x1dc>
    2c54:	95 c2       	rjmp	.+1322   	; 0x3180 <process_action+0x6d6>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2c56:	ff 20       	and	r15, r15
    2c58:	21 f0       	breq	.+8      	; 0x2c62 <process_action+0x1b8>
                        host_system_send(action.usage.code);
    2c5a:	86 2f       	mov	r24, r22
    2c5c:	94 2f       	mov	r25, r20
    2c5e:	93 70       	andi	r25, 0x03	; 3
    2c60:	02 c0       	rjmp	.+4      	; 0x2c66 <process_action+0x1bc>
                    } else {
                        host_system_send(0);
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2c66:	28 96       	adiw	r28, 0x08	; 8
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28
    2c76:	1f 91       	pop	r17
    2c78:	0f 91       	pop	r16
    2c7a:	ff 90       	pop	r15
    2c7c:	ef 90       	pop	r14
    2c7e:	df 90       	pop	r13
    2c80:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2c82:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2c86:	ff 20       	and	r15, r15
    2c88:	21 f0       	breq	.+8      	; 0x2c92 <process_action+0x1e8>
                        host_consumer_send(action.usage.code);
    2c8a:	86 2f       	mov	r24, r22
    2c8c:	94 2f       	mov	r25, r20
    2c8e:	93 70       	andi	r25, 0x03	; 3
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <process_action+0x1ec>
                    } else {
                        host_consumer_send(0);
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2c96:	28 96       	adiw	r28, 0x08	; 8
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	f8 94       	cli
    2c9c:	de bf       	out	0x3e, r29	; 62
    2c9e:	0f be       	out	0x3f, r0	; 63
    2ca0:	cd bf       	out	0x3d, r28	; 61
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	1f 91       	pop	r17
    2ca8:	0f 91       	pop	r16
    2caa:	ff 90       	pop	r15
    2cac:	ef 90       	pop	r14
    2cae:	df 90       	pop	r13
    2cb0:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    2cb2:	0c 94 41 13 	jmp	0x2682	; 0x2682 <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2cb6:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2cb8:	ff 20       	and	r15, r15
    2cba:	19 f0       	breq	.+6      	; 0x2cc2 <process_action+0x218>
                mousekey_on(action.key.code);
    2cbc:	0e 94 f5 24 	call	0x49ea	; 0x49ea <mousekey_on>
    2cc0:	02 c0       	rjmp	.+4      	; 0x2cc6 <process_action+0x21c>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2cc2:	0e 94 5d 25 	call	0x4aba	; 0x4aba <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    2cc6:	28 96       	adiw	r28, 0x08	; 8
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	ff 90       	pop	r15
    2cdc:	ef 90       	pop	r14
    2cde:	df 90       	pop	r13
    2ce0:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    2ce2:	0c 94 e2 25 	jmp	0x4bc4	; 0x4bc4 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2ce6:	84 2f       	mov	r24, r20
    2ce8:	83 70       	andi	r24, 0x03	; 3
    2cea:	09 f0       	breq	.+2      	; 0x2cee <process_action+0x244>
    2cec:	76 c0       	rjmp	.+236    	; 0x2dda <process_action+0x330>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2cee:	f1 10       	cpse	r15, r1
    2cf0:	47 c2       	rjmp	.+1166   	; 0x3180 <process_action+0x6d6>
                    uint8_t shift = action.layer_bitop.part*4;
    2cf2:	26 2f       	mov	r18, r22
    2cf4:	22 95       	swap	r18
    2cf6:	26 95       	lsr	r18
    2cf8:	27 70       	andi	r18, 0x07	; 7
    2cfa:	22 0f       	add	r18, r18
    2cfc:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2cfe:	86 2f       	mov	r24, r22
    2d00:	8f 70       	andi	r24, 0x0F	; 15
    2d02:	c8 2e       	mov	r12, r24
    2d04:	d1 2c       	mov	r13, r1
    2d06:	e1 2c       	mov	r14, r1
    2d08:	f1 2c       	mov	r15, r1
    2d0a:	02 2e       	mov	r0, r18
    2d0c:	04 c0       	rjmp	.+8      	; 0x2d16 <process_action+0x26c>
    2d0e:	cc 0c       	add	r12, r12
    2d10:	dd 1c       	adc	r13, r13
    2d12:	ee 1c       	adc	r14, r14
    2d14:	ff 1c       	adc	r15, r15
    2d16:	0a 94       	dec	r0
    2d18:	d2 f7       	brpl	.-12     	; 0x2d0e <process_action+0x264>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2d1a:	64 ff       	sbrs	r22, 4
    2d1c:	10 c0       	rjmp	.+32     	; 0x2d3e <process_action+0x294>
    2d1e:	6f e0       	ldi	r22, 0x0F	; 15
    2d20:	70 e0       	ldi	r23, 0x00	; 0
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	04 c0       	rjmp	.+8      	; 0x2d30 <process_action+0x286>
    2d28:	66 0f       	add	r22, r22
    2d2a:	77 1f       	adc	r23, r23
    2d2c:	88 1f       	adc	r24, r24
    2d2e:	99 1f       	adc	r25, r25
    2d30:	2a 95       	dec	r18
    2d32:	d2 f7       	brpl	.-12     	; 0x2d28 <process_action+0x27e>
    2d34:	60 95       	com	r22
    2d36:	70 95       	com	r23
    2d38:	80 95       	com	r24
    2d3a:	90 95       	com	r25
    2d3c:	03 c0       	rjmp	.+6      	; 0x2d44 <process_action+0x29a>
    2d3e:	60 e0       	ldi	r22, 0x00	; 0
    2d40:	70 e0       	ldi	r23, 0x00	; 0
    2d42:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2d44:	24 2f       	mov	r18, r20
    2d46:	26 95       	lsr	r18
    2d48:	26 95       	lsr	r18
    2d4a:	23 70       	andi	r18, 0x03	; 3
    2d4c:	42 2f       	mov	r20, r18
    2d4e:	50 e0       	ldi	r21, 0x00	; 0
    2d50:	42 30       	cpi	r20, 0x02	; 2
    2d52:	51 05       	cpc	r21, r1
    2d54:	d1 f0       	breq	.+52     	; 0x2d8a <process_action+0x2e0>
    2d56:	43 30       	cpi	r20, 0x03	; 3
    2d58:	51 05       	cpc	r21, r1
    2d5a:	59 f1       	breq	.+86     	; 0x2db2 <process_action+0x308>
    2d5c:	6c 29       	or	r22, r12
    2d5e:	7d 29       	or	r23, r13
    2d60:	8e 29       	or	r24, r14
    2d62:	9f 29       	or	r25, r15
    2d64:	41 30       	cpi	r20, 0x01	; 1
    2d66:	51 05       	cpc	r21, r1
    2d68:	41 f1       	breq	.+80     	; 0x2dba <process_action+0x310>
            break;
#endif
        default:
            break;
    }
}
    2d6a:	28 96       	adiw	r28, 0x08	; 8
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	f8 94       	cli
    2d70:	de bf       	out	0x3e, r29	; 62
    2d72:	0f be       	out	0x3f, r0	; 63
    2d74:	cd bf       	out	0x3d, r28	; 61
    2d76:	df 91       	pop	r29
    2d78:	cf 91       	pop	r28
    2d7a:	1f 91       	pop	r17
    2d7c:	0f 91       	pop	r16
    2d7e:	ff 90       	pop	r15
    2d80:	ef 90       	pop	r14
    2d82:	df 90       	pop	r13
    2d84:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2d86:	0c 94 3a 1d 	jmp	0x3a74	; 0x3a74 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2d8a:	6c 29       	or	r22, r12
    2d8c:	7d 29       	or	r23, r13
    2d8e:	8e 29       	or	r24, r14
    2d90:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2d92:	28 96       	adiw	r28, 0x08	; 8
    2d94:	0f b6       	in	r0, 0x3f	; 63
    2d96:	f8 94       	cli
    2d98:	de bf       	out	0x3e, r29	; 62
    2d9a:	0f be       	out	0x3f, r0	; 63
    2d9c:	cd bf       	out	0x3d, r28	; 61
    2d9e:	df 91       	pop	r29
    2da0:	cf 91       	pop	r28
    2da2:	1f 91       	pop	r17
    2da4:	0f 91       	pop	r16
    2da6:	ff 90       	pop	r15
    2da8:	ef 90       	pop	r14
    2daa:	df 90       	pop	r13
    2dac:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2dae:	0c 94 4c 1d 	jmp	0x3a98	; 0x3a98 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2db2:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <default_layer_and>
    2db6:	c7 01       	movw	r24, r14
    2db8:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2dba:	28 96       	adiw	r28, 0x08	; 8
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	f8 94       	cli
    2dc0:	de bf       	out	0x3e, r29	; 62
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	cd bf       	out	0x3d, r28	; 61
    2dc6:	df 91       	pop	r29
    2dc8:	cf 91       	pop	r28
    2dca:	1f 91       	pop	r17
    2dcc:	0f 91       	pop	r16
    2dce:	ff 90       	pop	r15
    2dd0:	ef 90       	pop	r14
    2dd2:	df 90       	pop	r13
    2dd4:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2dd6:	0c 94 28 1d 	jmp	0x3a50	; 0x3a50 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2dda:	ff 20       	and	r15, r15
    2ddc:	19 f0       	breq	.+6      	; 0x2de4 <process_action+0x33a>
    2dde:	84 2f       	mov	r24, r20
    2de0:	81 70       	andi	r24, 0x01	; 1
    2de2:	01 c0       	rjmp	.+2      	; 0x2de6 <process_action+0x33c>
    2de4:	86 95       	lsr	r24
    2de6:	88 23       	and	r24, r24
    2de8:	09 f4       	brne	.+2      	; 0x2dec <process_action+0x342>
    2dea:	ca c1       	rjmp	.+916    	; 0x3180 <process_action+0x6d6>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2dec:	26 2f       	mov	r18, r22
    2dee:	22 95       	swap	r18
    2df0:	26 95       	lsr	r18
    2df2:	27 70       	andi	r18, 0x07	; 7
    2df4:	22 0f       	add	r18, r18
    2df6:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2df8:	86 2f       	mov	r24, r22
    2dfa:	8f 70       	andi	r24, 0x0F	; 15
    2dfc:	c8 2e       	mov	r12, r24
    2dfe:	d1 2c       	mov	r13, r1
    2e00:	e1 2c       	mov	r14, r1
    2e02:	f1 2c       	mov	r15, r1
    2e04:	02 2e       	mov	r0, r18
    2e06:	04 c0       	rjmp	.+8      	; 0x2e10 <process_action+0x366>
    2e08:	cc 0c       	add	r12, r12
    2e0a:	dd 1c       	adc	r13, r13
    2e0c:	ee 1c       	adc	r14, r14
    2e0e:	ff 1c       	adc	r15, r15
    2e10:	0a 94       	dec	r0
    2e12:	d2 f7       	brpl	.-12     	; 0x2e08 <process_action+0x35e>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2e14:	64 ff       	sbrs	r22, 4
    2e16:	10 c0       	rjmp	.+32     	; 0x2e38 <process_action+0x38e>
    2e18:	6f e0       	ldi	r22, 0x0F	; 15
    2e1a:	70 e0       	ldi	r23, 0x00	; 0
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	04 c0       	rjmp	.+8      	; 0x2e2a <process_action+0x380>
    2e22:	66 0f       	add	r22, r22
    2e24:	77 1f       	adc	r23, r23
    2e26:	88 1f       	adc	r24, r24
    2e28:	99 1f       	adc	r25, r25
    2e2a:	2a 95       	dec	r18
    2e2c:	d2 f7       	brpl	.-12     	; 0x2e22 <process_action+0x378>
    2e2e:	60 95       	com	r22
    2e30:	70 95       	com	r23
    2e32:	80 95       	com	r24
    2e34:	90 95       	com	r25
    2e36:	03 c0       	rjmp	.+6      	; 0x2e3e <process_action+0x394>
    2e38:	60 e0       	ldi	r22, 0x00	; 0
    2e3a:	70 e0       	ldi	r23, 0x00	; 0
    2e3c:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2e3e:	24 2f       	mov	r18, r20
    2e40:	26 95       	lsr	r18
    2e42:	26 95       	lsr	r18
    2e44:	23 70       	andi	r18, 0x03	; 3
    2e46:	42 2f       	mov	r20, r18
    2e48:	50 e0       	ldi	r21, 0x00	; 0
    2e4a:	42 30       	cpi	r20, 0x02	; 2
    2e4c:	51 05       	cpc	r21, r1
    2e4e:	d1 f0       	breq	.+52     	; 0x2e84 <process_action+0x3da>
    2e50:	43 30       	cpi	r20, 0x03	; 3
    2e52:	51 05       	cpc	r21, r1
    2e54:	59 f1       	breq	.+86     	; 0x2eac <process_action+0x402>
    2e56:	6c 29       	or	r22, r12
    2e58:	7d 29       	or	r23, r13
    2e5a:	8e 29       	or	r24, r14
    2e5c:	9f 29       	or	r25, r15
    2e5e:	41 30       	cpi	r20, 0x01	; 1
    2e60:	51 05       	cpc	r21, r1
    2e62:	41 f1       	breq	.+80     	; 0x2eb4 <process_action+0x40a>
            break;
#endif
        default:
            break;
    }
}
    2e64:	28 96       	adiw	r28, 0x08	; 8
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	f8 94       	cli
    2e6a:	de bf       	out	0x3e, r29	; 62
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	cd bf       	out	0x3d, r28	; 61
    2e70:	df 91       	pop	r29
    2e72:	cf 91       	pop	r28
    2e74:	1f 91       	pop	r17
    2e76:	0f 91       	pop	r16
    2e78:	ff 90       	pop	r15
    2e7a:	ef 90       	pop	r14
    2e7c:	df 90       	pop	r13
    2e7e:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2e80:	0c 94 d9 1d 	jmp	0x3bb2	; 0x3bb2 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2e84:	6c 29       	or	r22, r12
    2e86:	7d 29       	or	r23, r13
    2e88:	8e 29       	or	r24, r14
    2e8a:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2e8c:	28 96       	adiw	r28, 0x08	; 8
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	ff 90       	pop	r15
    2ea2:	ef 90       	pop	r14
    2ea4:	df 90       	pop	r13
    2ea6:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2ea8:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2eac:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <layer_and>
    2eb0:	c7 01       	movw	r24, r14
    2eb2:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2eb4:	28 96       	adiw	r28, 0x08	; 8
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	de bf       	out	0x3e, r29	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	cd bf       	out	0x3d, r28	; 61
    2ec0:	df 91       	pop	r29
    2ec2:	cf 91       	pop	r28
    2ec4:	1f 91       	pop	r17
    2ec6:	0f 91       	pop	r16
    2ec8:	ff 90       	pop	r15
    2eca:	ef 90       	pop	r14
    2ecc:	df 90       	pop	r13
    2ece:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2ed0:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2ed4:	60 3f       	cpi	r22, 0xF0	; 240
    2ed6:	49 f1       	breq	.+82     	; 0x2f2a <process_action+0x480>
    2ed8:	18 f4       	brcc	.+6      	; 0x2ee0 <process_action+0x436>
    2eda:	60 3e       	cpi	r22, 0xE0	; 224
    2edc:	48 f4       	brcc	.+18     	; 0x2ef0 <process_action+0x446>
    2ede:	8c c0       	rjmp	.+280    	; 0x2ff8 <process_action+0x54e>
    2ee0:	62 3f       	cpi	r22, 0xF2	; 242
    2ee2:	09 f4       	brne	.+2      	; 0x2ee6 <process_action+0x43c>
    2ee4:	51 c0       	rjmp	.+162    	; 0x2f88 <process_action+0x4de>
    2ee6:	e0 f1       	brcs	.+120    	; 0x2f60 <process_action+0x4b6>
    2ee8:	63 3f       	cpi	r22, 0xF3	; 243
    2eea:	09 f4       	brne	.+2      	; 0x2eee <process_action+0x444>
    2eec:	61 c0       	rjmp	.+194    	; 0x2fb0 <process_action+0x506>
    2eee:	84 c0       	rjmp	.+264    	; 0x2ff8 <process_action+0x54e>
    2ef0:	16 2f       	mov	r17, r22
    2ef2:	1f 70       	andi	r17, 0x0F	; 15
    2ef4:	84 2f       	mov	r24, r20
    2ef6:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2ef8:	ff 20       	and	r15, r15
    2efa:	21 f0       	breq	.+8      	; 0x2f04 <process_action+0x45a>
                        layer_on(action.layer_tap.val);
    2efc:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2f00:	81 2f       	mov	r24, r17
    2f02:	89 ce       	rjmp	.-750    	; 0x2c16 <process_action+0x16c>
                    } else {
                        layer_off(action.layer_tap.val);
    2f04:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2f08:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2f0a:	28 96       	adiw	r28, 0x08	; 8
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	f8 94       	cli
    2f10:	de bf       	out	0x3e, r29	; 62
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	cd bf       	out	0x3d, r28	; 61
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	1f 91       	pop	r17
    2f1c:	0f 91       	pop	r16
    2f1e:	ff 90       	pop	r15
    2f20:	ef 90       	pop	r14
    2f22:	df 90       	pop	r13
    2f24:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2f26:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2f2a:	ff 20       	and	r15, r15
    2f2c:	a9 f0       	breq	.+42     	; 0x2f58 <process_action+0x4ae>
                        if (tap_count < TAPPING_TOGGLE) {
    2f2e:	25 30       	cpi	r18, 0x05	; 5
    2f30:	08 f0       	brcs	.+2      	; 0x2f34 <process_action+0x48a>
    2f32:	26 c1       	rjmp	.+588    	; 0x3180 <process_action+0x6d6>
                            layer_invert(action.layer_tap.val);
    2f34:	84 2f       	mov	r24, r20
    2f36:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2f38:	28 96       	adiw	r28, 0x08	; 8
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	f8 94       	cli
    2f3e:	de bf       	out	0x3e, r29	; 62
    2f40:	0f be       	out	0x3f, r0	; 63
    2f42:	cd bf       	out	0x3d, r28	; 61
    2f44:	df 91       	pop	r29
    2f46:	cf 91       	pop	r28
    2f48:	1f 91       	pop	r17
    2f4a:	0f 91       	pop	r16
    2f4c:	ff 90       	pop	r15
    2f4e:	ef 90       	pop	r14
    2f50:	df 90       	pop	r13
    2f52:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2f54:	0c 94 ac 1d 	jmp	0x3b58	; 0x3b58 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2f58:	26 30       	cpi	r18, 0x06	; 6
    2f5a:	08 f0       	brcs	.+2      	; 0x2f5e <process_action+0x4b4>
    2f5c:	11 c1       	rjmp	.+546    	; 0x3180 <process_action+0x6d6>
    2f5e:	ea cf       	rjmp	.-44     	; 0x2f34 <process_action+0x48a>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2f60:	ff 20       	and	r15, r15
    2f62:	a1 f0       	breq	.+40     	; 0x2f8c <process_action+0x4e2>
    2f64:	84 2f       	mov	r24, r20
    2f66:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2f68:	28 96       	adiw	r28, 0x08	; 8
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	df 91       	pop	r29
    2f76:	cf 91       	pop	r28
    2f78:	1f 91       	pop	r17
    2f7a:	0f 91       	pop	r16
    2f7c:	ff 90       	pop	r15
    2f7e:	ef 90       	pop	r14
    2f80:	df 90       	pop	r13
    2f82:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2f84:	0c 94 72 1d 	jmp	0x3ae4	; 0x3ae4 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2f88:	ff 20       	and	r15, r15
    2f8a:	61 f3       	breq	.-40     	; 0x2f64 <process_action+0x4ba>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2f8c:	84 2f       	mov	r24, r20
    2f8e:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2f90:	28 96       	adiw	r28, 0x08	; 8
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	de bf       	out	0x3e, r29	; 62
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	cd bf       	out	0x3d, r28	; 61
    2f9c:	df 91       	pop	r29
    2f9e:	cf 91       	pop	r28
    2fa0:	1f 91       	pop	r17
    2fa2:	0f 91       	pop	r16
    2fa4:	ff 90       	pop	r15
    2fa6:	ef 90       	pop	r14
    2fa8:	df 90       	pop	r13
    2faa:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2fac:	0c 94 8d 1d 	jmp	0x3b1a	; 0x3b1a <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2fb0:	ff 20       	and	r15, r15
    2fb2:	91 f0       	breq	.+36     	; 0x2fd8 <process_action+0x52e>
    2fb4:	84 2f       	mov	r24, r20
    2fb6:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2fb8:	28 96       	adiw	r28, 0x08	; 8
    2fba:	0f b6       	in	r0, 0x3f	; 63
    2fbc:	f8 94       	cli
    2fbe:	de bf       	out	0x3e, r29	; 62
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	cd bf       	out	0x3d, r28	; 61
    2fc4:	df 91       	pop	r29
    2fc6:	cf 91       	pop	r28
    2fc8:	1f 91       	pop	r17
    2fca:	0f 91       	pop	r16
    2fcc:	ff 90       	pop	r15
    2fce:	ef 90       	pop	r14
    2fd0:	df 90       	pop	r13
    2fd2:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2fd4:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2fd8:	28 96       	adiw	r28, 0x08	; 8
    2fda:	0f b6       	in	r0, 0x3f	; 63
    2fdc:	f8 94       	cli
    2fde:	de bf       	out	0x3e, r29	; 62
    2fe0:	0f be       	out	0x3f, r0	; 63
    2fe2:	cd bf       	out	0x3d, r28	; 61
    2fe4:	df 91       	pop	r29
    2fe6:	cf 91       	pop	r28
    2fe8:	1f 91       	pop	r17
    2fea:	0f 91       	pop	r16
    2fec:	ff 90       	pop	r15
    2fee:	ef 90       	pop	r14
    2ff0:	df 90       	pop	r13
    2ff2:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2ff4:	0c 94 5e 1d 	jmp	0x3abc	; 0x3abc <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2ff8:	ff 20       	and	r15, r15
    2ffa:	a1 f0       	breq	.+40     	; 0x3024 <process_action+0x57a>
                        if (tap_count > 0) {
    2ffc:	22 23       	and	r18, r18
    2ffe:	09 f4       	brne	.+2      	; 0x3002 <process_action+0x558>
    3000:	b1 cf       	rjmp	.-158    	; 0x2f64 <process_action+0x4ba>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    3002:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    3004:	28 96       	adiw	r28, 0x08	; 8
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	f8 94       	cli
    300a:	de bf       	out	0x3e, r29	; 62
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	cd bf       	out	0x3d, r28	; 61
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	1f 91       	pop	r17
    3016:	0f 91       	pop	r16
    3018:	ff 90       	pop	r15
    301a:	ef 90       	pop	r14
    301c:	df 90       	pop	r13
    301e:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    3020:	0c 94 30 14 	jmp	0x2860	; 0x2860 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    3024:	22 23       	and	r18, r18
    3026:	09 f4       	brne	.+2      	; 0x302a <process_action+0x580>
    3028:	b1 cf       	rjmp	.-158    	; 0x2f8c <process_action+0x4e2>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    302a:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    302c:	28 96       	adiw	r28, 0x08	; 8
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	f8 94       	cli
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	df 91       	pop	r29
    303a:	cf 91       	pop	r28
    303c:	1f 91       	pop	r17
    303e:	0f 91       	pop	r16
    3040:	ff 90       	pop	r15
    3042:	ef 90       	pop	r14
    3044:	df 90       	pop	r13
    3046:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    3048:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    304c:	4f 70       	andi	r20, 0x0F	; 15
    304e:	c8 01       	movw	r24, r16
    3050:	0e 94 30 21 	call	0x4260	; 0x4260 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    3054:	28 96       	adiw	r28, 0x08	; 8
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	de bf       	out	0x3e, r29	; 62
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	cd bf       	out	0x3d, r28	; 61
    3060:	df 91       	pop	r29
    3062:	cf 91       	pop	r28
    3064:	1f 91       	pop	r17
    3066:	0f 91       	pop	r16
    3068:	ff 90       	pop	r15
    306a:	ef 90       	pop	r14
    306c:	df 90       	pop	r13
    306e:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    3070:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <action_macro_play>
            break;
#endif
#ifdef BACKLIGHT_ENABLE
        case ACT_BACKLIGHT:
            if (!event.pressed) {
    3074:	f1 10       	cpse	r15, r1
    3076:	84 c0       	rjmp	.+264    	; 0x3180 <process_action+0x6d6>
                /* Backwards compatibility */
                if (action.backlight.level != 0 && action.backlight.opt != BACKLIGHT_LEVEL) {
    3078:	66 23       	and	r22, r22
    307a:	41 f0       	breq	.+16     	; 0x308c <process_action+0x5e2>
    307c:	84 2f       	mov	r24, r20
    307e:	8f 70       	andi	r24, 0x0F	; 15
    3080:	84 30       	cpi	r24, 0x04	; 4
    3082:	21 f0       	breq	.+8      	; 0x308c <process_action+0x5e2>
                    action.backlight.opt = action.backlight.level;
    3084:	40 7f       	andi	r20, 0xF0	; 240
    3086:	86 2f       	mov	r24, r22
    3088:	8f 70       	andi	r24, 0x0F	; 15
    308a:	48 2b       	or	r20, r24
                }
                switch (action.backlight.opt) {
    308c:	94 2f       	mov	r25, r20
    308e:	9f 70       	andi	r25, 0x0F	; 15
    3090:	49 2f       	mov	r20, r25
    3092:	50 e0       	ldi	r21, 0x00	; 0
    3094:	42 30       	cpi	r20, 0x02	; 2
    3096:	51 05       	cpc	r21, r1
    3098:	09 f4       	brne	.+2      	; 0x309c <process_action+0x5f2>
    309a:	40 c0       	rjmp	.+128    	; 0x311c <process_action+0x672>
    309c:	bc f4       	brge	.+46     	; 0x30cc <process_action+0x622>
    309e:	41 15       	cp	r20, r1
    30a0:	51 05       	cpc	r21, r1
    30a2:	61 f1       	breq	.+88     	; 0x30fc <process_action+0x652>
    30a4:	41 30       	cpi	r20, 0x01	; 1
    30a6:	51 05       	cpc	r21, r1
    30a8:	09 f0       	breq	.+2      	; 0x30ac <process_action+0x602>
    30aa:	6a c0       	rjmp	.+212    	; 0x3180 <process_action+0x6d6>
            break;
#endif
        default:
            break;
    }
}
    30ac:	28 96       	adiw	r28, 0x08	; 8
    30ae:	0f b6       	in	r0, 0x3f	; 63
    30b0:	f8 94       	cli
    30b2:	de bf       	out	0x3e, r29	; 62
    30b4:	0f be       	out	0x3f, r0	; 63
    30b6:	cd bf       	out	0x3d, r28	; 61
    30b8:	df 91       	pop	r29
    30ba:	cf 91       	pop	r28
    30bc:	1f 91       	pop	r17
    30be:	0f 91       	pop	r16
    30c0:	ff 90       	pop	r15
    30c2:	ef 90       	pop	r14
    30c4:	df 90       	pop	r13
    30c6:	cf 90       	pop	r12
                switch (action.backlight.opt) {
                    case BACKLIGHT_INCREASE:
                        backlight_increase();
                        break;
                    case BACKLIGHT_DECREASE:
                        backlight_decrease();
    30c8:	0c 94 04 30 	jmp	0x6008	; 0x6008 <backlight_decrease>
            if (!event.pressed) {
                /* Backwards compatibility */
                if (action.backlight.level != 0 && action.backlight.opt != BACKLIGHT_LEVEL) {
                    action.backlight.opt = action.backlight.level;
                }
                switch (action.backlight.opt) {
    30cc:	43 30       	cpi	r20, 0x03	; 3
    30ce:	51 05       	cpc	r21, r1
    30d0:	a9 f1       	breq	.+106    	; 0x313c <process_action+0x692>
    30d2:	44 30       	cpi	r20, 0x04	; 4
    30d4:	51 05       	cpc	r21, r1
    30d6:	09 f0       	breq	.+2      	; 0x30da <process_action+0x630>
    30d8:	53 c0       	rjmp	.+166    	; 0x3180 <process_action+0x6d6>
                        break;
                    case BACKLIGHT_STEP:
                        backlight_step();
                        break;
                    case BACKLIGHT_LEVEL:
                        backlight_level(action.backlight.level);
    30da:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    30dc:	28 96       	adiw	r28, 0x08	; 8
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	f8 94       	cli
    30e2:	de bf       	out	0x3e, r29	; 62
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	cd bf       	out	0x3d, r28	; 61
    30e8:	df 91       	pop	r29
    30ea:	cf 91       	pop	r28
    30ec:	1f 91       	pop	r17
    30ee:	0f 91       	pop	r16
    30f0:	ff 90       	pop	r15
    30f2:	ef 90       	pop	r14
    30f4:	df 90       	pop	r13
    30f6:	cf 90       	pop	r12
                        break;
                    case BACKLIGHT_STEP:
                        backlight_step();
                        break;
                    case BACKLIGHT_LEVEL:
                        backlight_level(action.backlight.level);
    30f8:	0c 94 9a 30 	jmp	0x6134	; 0x6134 <backlight_level>
            break;
#endif
        default:
            break;
    }
}
    30fc:	28 96       	adiw	r28, 0x08	; 8
    30fe:	0f b6       	in	r0, 0x3f	; 63
    3100:	f8 94       	cli
    3102:	de bf       	out	0x3e, r29	; 62
    3104:	0f be       	out	0x3f, r0	; 63
    3106:	cd bf       	out	0x3d, r28	; 61
    3108:	df 91       	pop	r29
    310a:	cf 91       	pop	r28
    310c:	1f 91       	pop	r17
    310e:	0f 91       	pop	r16
    3110:	ff 90       	pop	r15
    3112:	ef 90       	pop	r14
    3114:	df 90       	pop	r13
    3116:	cf 90       	pop	r12
                if (action.backlight.level != 0 && action.backlight.opt != BACKLIGHT_LEVEL) {
                    action.backlight.opt = action.backlight.level;
                }
                switch (action.backlight.opt) {
                    case BACKLIGHT_INCREASE:
                        backlight_increase();
    3118:	0c 94 d8 2f 	jmp	0x5fb0	; 0x5fb0 <backlight_increase>
            break;
#endif
        default:
            break;
    }
}
    311c:	28 96       	adiw	r28, 0x08	; 8
    311e:	0f b6       	in	r0, 0x3f	; 63
    3120:	f8 94       	cli
    3122:	de bf       	out	0x3e, r29	; 62
    3124:	0f be       	out	0x3f, r0	; 63
    3126:	cd bf       	out	0x3d, r28	; 61
    3128:	df 91       	pop	r29
    312a:	cf 91       	pop	r28
    312c:	1f 91       	pop	r17
    312e:	0f 91       	pop	r16
    3130:	ff 90       	pop	r15
    3132:	ef 90       	pop	r14
    3134:	df 90       	pop	r13
    3136:	cf 90       	pop	r12
                        break;
                    case BACKLIGHT_DECREASE:
                        backlight_decrease();
                        break;
                    case BACKLIGHT_TOGGLE:
                        backlight_toggle();
    3138:	0c 94 30 30 	jmp	0x6060	; 0x6060 <backlight_toggle>
            break;
#endif
        default:
            break;
    }
}
    313c:	28 96       	adiw	r28, 0x08	; 8
    313e:	0f b6       	in	r0, 0x3f	; 63
    3140:	f8 94       	cli
    3142:	de bf       	out	0x3e, r29	; 62
    3144:	0f be       	out	0x3f, r0	; 63
    3146:	cd bf       	out	0x3d, r28	; 61
    3148:	df 91       	pop	r29
    314a:	cf 91       	pop	r28
    314c:	1f 91       	pop	r17
    314e:	0f 91       	pop	r16
    3150:	ff 90       	pop	r15
    3152:	ef 90       	pop	r14
    3154:	df 90       	pop	r13
    3156:	cf 90       	pop	r12
                        break;
                    case BACKLIGHT_TOGGLE:
                        backlight_toggle();
                        break;
                    case BACKLIGHT_STEP:
                        backlight_step();
    3158:	0c 94 62 30 	jmp	0x60c4	; 0x60c4 <backlight_step>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    315c:	4f 70       	andi	r20, 0x0F	; 15
    315e:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    3160:	28 96       	adiw	r28, 0x08	; 8
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	f8 94       	cli
    3166:	de bf       	out	0x3e, r29	; 62
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	cd bf       	out	0x3d, r28	; 61
    316c:	df 91       	pop	r29
    316e:	cf 91       	pop	r28
    3170:	1f 91       	pop	r17
    3172:	0f 91       	pop	r16
    3174:	ff 90       	pop	r15
    3176:	ef 90       	pop	r14
    3178:	df 90       	pop	r13
    317a:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    317c:	0c 94 33 21 	jmp	0x4266	; 0x4266 <action_function>
            break;
#endif
        default:
            break;
    }
}
    3180:	28 96       	adiw	r28, 0x08	; 8
    3182:	0f b6       	in	r0, 0x3f	; 63
    3184:	f8 94       	cli
    3186:	de bf       	out	0x3e, r29	; 62
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	cd bf       	out	0x3d, r28	; 61
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	ff 90       	pop	r15
    3196:	ef 90       	pop	r14
    3198:	df 90       	pop	r13
    319a:	cf 90       	pop	r12
    319c:	08 95       	ret

0000319e <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    319e:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <clear_weak_mods>
    clear_keys();
    31a2:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <clear_keys>
    send_keyboard_report();
    31a6:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    31aa:	0e 94 10 27 	call	0x4e20	; 0x4e20 <mousekey_clear>
    mousekey_send();
    31ae:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	0e 94 2b 13 	call	0x2656	; 0x2656 <host_system_send>
    host_consumer_send(0);
    31ba:	80 e0       	ldi	r24, 0x00	; 0
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	0c 94 41 13 	jmp	0x2682	; 0x2682 <host_consumer_send>

000031c2 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    31c2:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <clear_mods>
    clear_keyboard_but_mods();
    31c6:	0c 94 cf 18 	jmp	0x319e	; 0x319e <clear_keyboard_but_mods>

000031ca <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    31ca:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <layer_switch_get_action>

    switch (action.kind.id) {
    31ce:	29 2f       	mov	r18, r25
    31d0:	22 95       	swap	r18
    31d2:	2f 70       	andi	r18, 0x0F	; 15
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	2c 30       	cpi	r18, 0x0C	; 12
    31d8:	31 05       	cpc	r19, r1
    31da:	4c f4       	brge	.+18     	; 0x31ee <is_tap_key+0x24>
    31dc:	2a 30       	cpi	r18, 0x0A	; 10
    31de:	31 05       	cpc	r19, r1
    31e0:	6c f4       	brge	.+26     	; 0x31fc <is_tap_key+0x32>
    31e2:	22 50       	subi	r18, 0x02	; 2
    31e4:	31 09       	sbc	r19, r1
    31e6:	22 30       	cpi	r18, 0x02	; 2
    31e8:	31 05       	cpc	r19, r1
    31ea:	90 f4       	brcc	.+36     	; 0x3210 <is_tap_key+0x46>
    31ec:	07 c0       	rjmp	.+14     	; 0x31fc <is_tap_key+0x32>
    31ee:	2c 30       	cpi	r18, 0x0C	; 12
    31f0:	31 05       	cpc	r19, r1
    31f2:	51 f0       	breq	.+20     	; 0x3208 <is_tap_key+0x3e>
    31f4:	2f 30       	cpi	r18, 0x0F	; 15
    31f6:	31 05       	cpc	r19, r1
    31f8:	39 f0       	breq	.+14     	; 0x3208 <is_tap_key+0x3e>
    31fa:	0a c0       	rjmp	.+20     	; 0x3210 <is_tap_key+0x46>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    31fc:	80 3e       	cpi	r24, 0xE0	; 224
    31fe:	10 f0       	brcs	.+4      	; 0x3204 <is_tap_key+0x3a>
    3200:	80 3f       	cpi	r24, 0xF0	; 240
    3202:	31 f4       	brne	.+12     	; 0x3210 <is_tap_key+0x46>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    3208:	93 fb       	bst	r25, 3
    320a:	88 27       	eor	r24, r24
    320c:	80 f9       	bld	r24, 0
    320e:	08 95       	ret
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
    3210:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    3212:	08 95       	ret

00003214 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    3214:	cf 93       	push	r28
    3216:	df 93       	push	r29
    3218:	00 d0       	rcall	.+0      	; 0x321a <debug_event+0x6>
    321a:	00 d0       	rcall	.+0      	; 0x321c <debug_event+0x8>
    321c:	1f 92       	push	r1
    321e:	cd b7       	in	r28, 0x3d	; 61
    3220:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    3222:	0f 90       	pop	r0
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	0f 90       	pop	r0
    322c:	df 91       	pop	r29
    322e:	cf 91       	pop	r28
    3230:	08 95       	ret

00003232 <debug_record>:

void debug_record(keyrecord_t record)
{
    3232:	cf 93       	push	r28
    3234:	df 93       	push	r29
    3236:	00 d0       	rcall	.+0      	; 0x3238 <debug_record+0x6>
    3238:	00 d0       	rcall	.+0      	; 0x323a <debug_record+0x8>
    323a:	00 d0       	rcall	.+0      	; 0x323c <debug_record+0xa>
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    3240:	26 96       	adiw	r28, 0x06	; 6
    3242:	0f b6       	in	r0, 0x3f	; 63
    3244:	f8 94       	cli
    3246:	de bf       	out	0x3e, r29	; 62
    3248:	0f be       	out	0x3f, r0	; 63
    324a:	cd bf       	out	0x3d, r28	; 61
    324c:	df 91       	pop	r29
    324e:	cf 91       	pop	r28
    3250:	08 95       	ret

00003252 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
    325a:	2b 97       	sbiw	r28, 0x0b	; 11
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	f8 94       	cli
    3260:	de bf       	out	0x3e, r29	; 62
    3262:	0f be       	out	0x3f, r0	; 63
    3264:	cd bf       	out	0x3d, r28	; 61
    3266:	4f 83       	std	Y+7, r20	; 0x07
    3268:	58 87       	std	Y+8, r21	; 0x08
    326a:	69 87       	std	Y+9, r22	; 0x09
    326c:	7a 87       	std	Y+10, r23	; 0x0a
    326e:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    3270:	de 01       	movw	r26, r28
    3272:	11 96       	adiw	r26, 0x01	; 1
    3274:	86 e0       	ldi	r24, 0x06	; 6
    3276:	fd 01       	movw	r30, r26
    3278:	11 92       	st	Z+, r1
    327a:	8a 95       	dec	r24
    327c:	e9 f7       	brne	.-6      	; 0x3278 <action_exec+0x26>
    327e:	85 e0       	ldi	r24, 0x05	; 5
    3280:	fe 01       	movw	r30, r28
    3282:	37 96       	adiw	r30, 0x07	; 7
    3284:	01 90       	ld	r0, Z+
    3286:	0d 92       	st	X+, r0
    3288:	8a 95       	dec	r24
    328a:	e1 f7       	brne	.-8      	; 0x3284 <action_exec+0x32>

    action_keyevent(event);
    328c:	4f 81       	ldd	r20, Y+7	; 0x07
    328e:	58 85       	ldd	r21, Y+8	; 0x08
    3290:	69 85       	ldd	r22, Y+9	; 0x09
    3292:	7a 85       	ldd	r23, Y+10	; 0x0a
    3294:	8b 85       	ldd	r24, Y+11	; 0x0b
    3296:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <action_keyevent>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    329a:	49 81       	ldd	r20, Y+1	; 0x01
    329c:	5a 81       	ldd	r21, Y+2	; 0x02
    329e:	6b 81       	ldd	r22, Y+3	; 0x03
    32a0:	7c 81       	ldd	r23, Y+4	; 0x04
    32a2:	8d 81       	ldd	r24, Y+5	; 0x05
    32a4:	9e 81       	ldd	r25, Y+6	; 0x06
    32a6:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    32aa:	2b 96       	adiw	r28, 0x0b	; 11
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	f8 94       	cli
    32b0:	de bf       	out	0x3e, r29	; 62
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	cd bf       	out	0x3d, r28	; 61
    32b6:	df 91       	pop	r29
    32b8:	cf 91       	pop	r28
    32ba:	08 95       	ret

000032bc <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    32bc:	1f 93       	push	r17
    32be:	cf 93       	push	r28
    32c0:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    32c2:	c0 91 67 01 	lds	r28, 0x0167
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    32c6:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    32c8:	80 91 68 01 	lds	r24, 0x0168
    32cc:	c8 17       	cp	r28, r24
    32ce:	99 f0       	breq	.+38     	; 0x32f6 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    32d0:	d0 e0       	ldi	r29, 0x00	; 0
    32d2:	1c 9f       	mul	r17, r28
    32d4:	f0 01       	movw	r30, r0
    32d6:	1d 9f       	mul	r17, r29
    32d8:	f0 0d       	add	r31, r0
    32da:	11 24       	eor	r1, r1
    32dc:	e7 59       	subi	r30, 0x97	; 151
    32de:	fe 4f       	sbci	r31, 0xFE	; 254
    32e0:	40 81       	ld	r20, Z
    32e2:	51 81       	ldd	r21, Z+1	; 0x01
    32e4:	62 81       	ldd	r22, Z+2	; 0x02
    32e6:	73 81       	ldd	r23, Z+3	; 0x03
    32e8:	84 81       	ldd	r24, Z+4	; 0x04
    32ea:	95 81       	ldd	r25, Z+5	; 0x05
    32ec:	0e 94 19 19 	call	0x3232	; 0x3232 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    32f0:	21 96       	adiw	r28, 0x01	; 1
    32f2:	c7 70       	andi	r28, 0x07	; 7
    32f4:	e9 cf       	rjmp	.-46     	; 0x32c8 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    32f6:	df 91       	pop	r29
    32f8:	cf 91       	pop	r28
    32fa:	1f 91       	pop	r17
    32fc:	08 95       	ret

000032fe <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    32fe:	40 91 99 01 	lds	r20, 0x0199
    3302:	50 91 9a 01 	lds	r21, 0x019A
    3306:	60 91 9b 01 	lds	r22, 0x019B
    330a:	70 91 9c 01 	lds	r23, 0x019C
    330e:	80 91 9d 01 	lds	r24, 0x019D
    3312:	90 91 9e 01 	lds	r25, 0x019E
    3316:	0c 94 19 19 	jmp	0x3232	; 0x3232 <debug_record>

0000331a <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    331a:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    331c:	80 91 9e 01 	lds	r24, 0x019E
    3320:	82 95       	swap	r24
    3322:	8f 70       	andi	r24, 0x0F	; 15
    3324:	09 f0       	breq	.+2      	; 0x3328 <waiting_buffer_scan_tap+0xe>
    3326:	5f c0       	rjmp	.+190    	; 0x33e6 <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    3328:	80 91 9b 01 	lds	r24, 0x019B
    332c:	88 23       	and	r24, r24
    332e:	09 f4       	brne	.+2      	; 0x3332 <waiting_buffer_scan_tap+0x18>
    3330:	5a c0       	rjmp	.+180    	; 0x33e6 <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3332:	20 91 67 01 	lds	r18, 0x0167
    3336:	a0 91 68 01 	lds	r26, 0x0168
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    333a:	60 91 99 01 	lds	r22, 0x0199
    333e:	70 91 9a 01 	lds	r23, 0x019A
    3342:	80 91 9c 01 	lds	r24, 0x019C
    3346:	90 91 9d 01 	lds	r25, 0x019D
    334a:	31 e0       	ldi	r19, 0x01	; 1
    334c:	6f 3f       	cpi	r22, 0xFF	; 255
    334e:	09 f0       	breq	.+2      	; 0x3352 <waiting_buffer_scan_tap+0x38>
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	b3 2f       	mov	r27, r19
    3354:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3356:	2a 17       	cp	r18, r26
    3358:	09 f4       	brne	.+2      	; 0x335c <waiting_buffer_scan_tap+0x42>
    335a:	45 c0       	rjmp	.+138    	; 0x33e6 <waiting_buffer_scan_tap+0xcc>
    335c:	00 97       	sbiw	r24, 0x00	; 0
    335e:	21 f0       	breq	.+8      	; 0x3368 <waiting_buffer_scan_tap+0x4e>
    3360:	7f 3f       	cpi	r23, 0xFF	; 255
    3362:	21 f4       	brne	.+8      	; 0x336c <waiting_buffer_scan_tap+0x52>
    3364:	4b 2f       	mov	r20, r27
    3366:	03 c0       	rjmp	.+6      	; 0x336e <waiting_buffer_scan_tap+0x54>
    3368:	41 e0       	ldi	r20, 0x01	; 1
    336a:	01 c0       	rjmp	.+2      	; 0x336e <waiting_buffer_scan_tap+0x54>
    336c:	40 e0       	ldi	r20, 0x00	; 0
    336e:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3370:	40 fd       	sbrc	r20, 0
    3372:	35 c0       	rjmp	.+106    	; 0x33de <waiting_buffer_scan_tap+0xc4>
    3374:	c2 9f       	mul	r28, r18
    3376:	f0 01       	movw	r30, r0
    3378:	c3 9f       	mul	r28, r19
    337a:	f0 0d       	add	r31, r0
    337c:	11 24       	eor	r1, r1
    337e:	e7 59       	subi	r30, 0x97	; 151
    3380:	fe 4f       	sbci	r31, 0xFE	; 254
    3382:	41 81       	ldd	r20, Z+1	; 0x01
    3384:	74 13       	cpse	r23, r20
    3386:	2b c0       	rjmp	.+86     	; 0x33de <waiting_buffer_scan_tap+0xc4>
    3388:	40 81       	ld	r20, Z
    338a:	64 13       	cpse	r22, r20
    338c:	28 c0       	rjmp	.+80     	; 0x33de <waiting_buffer_scan_tap+0xc4>
    338e:	42 81       	ldd	r20, Z+2	; 0x02
    3390:	41 11       	cpse	r20, r1
    3392:	25 c0       	rjmp	.+74     	; 0x33de <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    3394:	43 81       	ldd	r20, Z+3	; 0x03
    3396:	54 81       	ldd	r21, Z+4	; 0x04
    3398:	48 17       	cp	r20, r24
    339a:	59 07       	cpc	r21, r25
    339c:	10 f4       	brcc	.+4      	; 0x33a2 <waiting_buffer_scan_tap+0x88>
    339e:	41 50       	subi	r20, 0x01	; 1
    33a0:	51 09       	sbc	r21, r1
    33a2:	48 1b       	sub	r20, r24
    33a4:	59 0b       	sbc	r21, r25
    33a6:	48 3c       	cpi	r20, 0xC8	; 200
    33a8:	51 05       	cpc	r21, r1
    33aa:	c8 f4       	brcc	.+50     	; 0x33de <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    33ac:	80 91 9e 01 	lds	r24, 0x019E
    33b0:	8f 70       	andi	r24, 0x0F	; 15
    33b2:	80 61       	ori	r24, 0x10	; 16
    33b4:	80 93 9e 01 	sts	0x019E, r24
            waiting_buffer[i].tap.count = 1;
    33b8:	86 e0       	ldi	r24, 0x06	; 6
    33ba:	82 9f       	mul	r24, r18
    33bc:	f0 01       	movw	r30, r0
    33be:	83 9f       	mul	r24, r19
    33c0:	f0 0d       	add	r31, r0
    33c2:	11 24       	eor	r1, r1
    33c4:	e2 59       	subi	r30, 0x92	; 146
    33c6:	fe 4f       	sbci	r31, 0xFE	; 254
    33c8:	80 81       	ld	r24, Z
    33ca:	8f 70       	andi	r24, 0x0F	; 15
    33cc:	80 61       	ori	r24, 0x10	; 16
    33ce:	80 83       	st	Z, r24
            process_action(&tapping_key);
    33d0:	89 e9       	ldi	r24, 0x99	; 153
    33d2:	91 e0       	ldi	r25, 0x01	; 1
    33d4:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    33d8:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    33da:	0c 94 5e 19 	jmp	0x32bc	; 0x32bc <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    33de:	2f 5f       	subi	r18, 0xFF	; 255
    33e0:	3f 4f       	sbci	r19, 0xFF	; 255
    33e2:	27 70       	andi	r18, 0x07	; 7
    33e4:	b8 cf       	rjmp	.-144    	; 0x3356 <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    33e6:	cf 91       	pop	r28
    33e8:	08 95       	ret

000033ea <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    33ea:	cf 92       	push	r12
    33ec:	df 92       	push	r13
    33ee:	ef 92       	push	r14
    33f0:	ff 92       	push	r15
    33f2:	0f 93       	push	r16
    33f4:	1f 93       	push	r17
    33f6:	cf 93       	push	r28
    33f8:	df 93       	push	r29
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
    33fe:	62 97       	sbiw	r28, 0x12	; 18
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	f8 94       	cli
    3404:	de bf       	out	0x3e, r29	; 62
    3406:	0f be       	out	0x3f, r0	; 63
    3408:	cd bf       	out	0x3d, r28	; 61
    340a:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    340c:	85 e0       	ldi	r24, 0x05	; 5
    340e:	f8 01       	movw	r30, r16
    3410:	de 01       	movw	r26, r28
    3412:	1d 96       	adiw	r26, 0x0d	; 13
    3414:	01 90       	ld	r0, Z+
    3416:	0d 92       	st	X+, r0
    3418:	8a 95       	dec	r24
    341a:	e1 f7       	brne	.-8      	; 0x3414 <process_tapping+0x2a>
    341c:	d8 01       	movw	r26, r16
    341e:	4c 91       	ld	r20, X
    3420:	11 96       	adiw	r26, 0x01	; 1
    3422:	5c 91       	ld	r21, X
    3424:	11 97       	sbiw	r26, 0x01	; 1
    3426:	12 96       	adiw	r26, 0x02	; 2
    3428:	6c 91       	ld	r22, X
    342a:	12 97       	sbiw	r26, 0x02	; 2
    342c:	13 96       	adiw	r26, 0x03	; 3
    342e:	ed 90       	ld	r14, X+
    3430:	fc 90       	ld	r15, X
    3432:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    3434:	70 91 99 01 	lds	r23, 0x0199
    3438:	e0 91 9a 01 	lds	r30, 0x019A
    343c:	20 91 9c 01 	lds	r18, 0x019C
    3440:	30 91 9d 01 	lds	r19, 0x019D
    3444:	21 15       	cp	r18, r1
    3446:	31 05       	cpc	r19, r1
    3448:	31 f0       	breq	.+12     	; 0x3456 <process_tapping+0x6c>
    344a:	ef 3f       	cpi	r30, 0xFF	; 255
    344c:	31 f4       	brne	.+12     	; 0x345a <process_tapping+0x70>
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	7f 3f       	cpi	r23, 0xFF	; 255
    3452:	19 f4       	brne	.+6      	; 0x345a <process_tapping+0x70>
    3454:	03 c0       	rjmp	.+6      	; 0x345c <process_tapping+0x72>
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	01 c0       	rjmp	.+2      	; 0x345c <process_tapping+0x72>
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	b8 2f       	mov	r27, r24
    345e:	b1 70       	andi	r27, 0x01	; 1
    3460:	cb 2e       	mov	r12, r27
    3462:	80 fd       	sbrc	r24, 0
    3464:	6c c1       	rjmp	.+728    	; 0x373e <process_tapping+0x354>
    3466:	d0 90 9b 01 	lds	r13, 0x019B
    346a:	dd 20       	and	r13, r13
    346c:	09 f4       	brne	.+2      	; 0x3470 <process_tapping+0x86>
    346e:	f5 c0       	rjmp	.+490    	; 0x365a <process_tapping+0x270>
    3470:	f0 91 9e 01 	lds	r31, 0x019E
        if (WITHIN_TAPPING_TERM(event)) {
    3474:	e2 16       	cp	r14, r18
    3476:	f3 06       	cpc	r15, r19
    3478:	38 f0       	brcs	.+14     	; 0x3488 <process_tapping+0x9e>
    347a:	c7 01       	movw	r24, r14
    347c:	82 1b       	sub	r24, r18
    347e:	93 0b       	sbc	r25, r19
    3480:	88 3c       	cpi	r24, 0xC8	; 200
    3482:	91 05       	cpc	r25, r1
    3484:	48 f0       	brcs	.+18     	; 0x3498 <process_tapping+0xae>
    3486:	9b c0       	rjmp	.+310    	; 0x35be <process_tapping+0x1d4>
    3488:	20 95       	com	r18
    348a:	30 95       	com	r19
    348c:	2e 0d       	add	r18, r14
    348e:	3f 1d       	adc	r19, r15
    3490:	28 3c       	cpi	r18, 0xC8	; 200
    3492:	31 05       	cpc	r19, r1
    3494:	08 f0       	brcs	.+2      	; 0x3498 <process_tapping+0xae>
    3496:	93 c0       	rjmp	.+294    	; 0x35be <process_tapping+0x1d4>
            if (tapping_key.tap.count == 0) {
    3498:	8f 2f       	mov	r24, r31
    349a:	80 7f       	andi	r24, 0xF0	; 240
    349c:	09 f0       	breq	.+2      	; 0x34a0 <process_tapping+0xb6>
    349e:	52 c0       	rjmp	.+164    	; 0x3544 <process_tapping+0x15a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    34a0:	e5 13       	cpse	r30, r21
    34a2:	14 c0       	rjmp	.+40     	; 0x34cc <process_tapping+0xe2>
    34a4:	74 13       	cpse	r23, r20
    34a6:	12 c0       	rjmp	.+36     	; 0x34cc <process_tapping+0xe2>
    34a8:	d6 2e       	mov	r13, r22
    34aa:	61 11       	cpse	r22, r1
    34ac:	0f c0       	rjmp	.+30     	; 0x34cc <process_tapping+0xe2>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    34ae:	ff 70       	andi	r31, 0x0F	; 15
    34b0:	f0 61       	ori	r31, 0x10	; 16
    34b2:	f0 93 9e 01 	sts	0x019E, r31
                    debug_tapping_key();
    34b6:	0e 94 7f 19 	call	0x32fe	; 0x32fe <debug_tapping_key>
                    process_action(&tapping_key);
    34ba:	89 e9       	ldi	r24, 0x99	; 153
    34bc:	91 e0       	ldi	r25, 0x01	; 1
    34be:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    34c2:	80 91 9e 01 	lds	r24, 0x019E
    34c6:	f8 01       	movw	r30, r16
    34c8:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    34ca:	6c c1       	rjmp	.+728    	; 0x37a4 <process_tapping+0x3ba>
    34cc:	ef 28       	or	r14, r15
    34ce:	31 f0       	breq	.+12     	; 0x34dc <process_tapping+0xf2>
    34d0:	5f 3f       	cpi	r21, 0xFF	; 255
    34d2:	31 f4       	brne	.+12     	; 0x34e0 <process_tapping+0xf6>
    34d4:	81 e0       	ldi	r24, 0x01	; 1
    34d6:	4f 3f       	cpi	r20, 0xFF	; 255
    34d8:	19 f4       	brne	.+6      	; 0x34e0 <process_tapping+0xf6>
    34da:	03 c0       	rjmp	.+6      	; 0x34e2 <process_tapping+0xf8>
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	01 c0       	rjmp	.+2      	; 0x34e2 <process_tapping+0xf8>
    34e0:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    34e2:	80 fd       	sbrc	r24, 0
    34e4:	03 c0       	rjmp	.+6      	; 0x34ec <process_tapping+0x102>
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	86 27       	eor	r24, r22
    34ea:	01 c0       	rjmp	.+2      	; 0x34ee <process_tapping+0x104>
    34ec:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    34ee:	f8 2f       	mov	r31, r24
    34f0:	f1 70       	andi	r31, 0x01	; 1
    34f2:	ff 2e       	mov	r15, r31
    34f4:	80 ff       	sbrs	r24, 0
    34f6:	1c c0       	rjmp	.+56     	; 0x3530 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    34f8:	80 91 67 01 	lds	r24, 0x0167
    34fc:	20 91 68 01 	lds	r18, 0x0168
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3500:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3502:	82 17       	cp	r24, r18
    3504:	09 f4       	brne	.+2      	; 0x3508 <process_tapping+0x11e>
    3506:	28 c1       	rjmp	.+592    	; 0x3758 <process_tapping+0x36e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	38 9f       	mul	r19, r24
    350c:	f0 01       	movw	r30, r0
    350e:	39 9f       	mul	r19, r25
    3510:	f0 0d       	add	r31, r0
    3512:	11 24       	eor	r1, r1
    3514:	e7 59       	subi	r30, 0x97	; 151
    3516:	fe 4f       	sbci	r31, 0xFE	; 254
    3518:	71 81       	ldd	r23, Z+1	; 0x01
    351a:	57 13       	cpse	r21, r23
    351c:	06 c0       	rjmp	.+12     	; 0x352a <process_tapping+0x140>
    351e:	70 81       	ld	r23, Z
    3520:	47 13       	cpse	r20, r23
    3522:	03 c0       	rjmp	.+6      	; 0x352a <process_tapping+0x140>
    3524:	72 81       	ldd	r23, Z+2	; 0x02
    3526:	67 13       	cpse	r22, r23
    3528:	03 c0       	rjmp	.+6      	; 0x3530 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    352a:	01 96       	adiw	r24, 0x01	; 1
    352c:	87 70       	andi	r24, 0x07	; 7
    352e:	e9 cf       	rjmp	.-46     	; 0x3502 <process_tapping+0x118>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    3530:	d6 2e       	mov	r13, r22
    3532:	66 23       	and	r22, r22
    3534:	09 f4       	brne	.+2      	; 0x3538 <process_tapping+0x14e>
    3536:	36 c1       	rjmp	.+620    	; 0x37a4 <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    3538:	80 91 9e 01 	lds	r24, 0x019E
    353c:	81 60       	ori	r24, 0x01	; 1
    353e:	80 93 9e 01 	sts	0x019E, r24
    3542:	53 c0       	rjmp	.+166    	; 0x35ea <process_tapping+0x200>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3544:	e5 13       	cpse	r30, r21
    3546:	08 c0       	rjmp	.+16     	; 0x3558 <process_tapping+0x16e>
    3548:	74 13       	cpse	r23, r20
    354a:	06 c0       	rjmp	.+12     	; 0x3558 <process_tapping+0x16e>
    354c:	61 11       	cpse	r22, r1
    354e:	04 c0       	rjmp	.+8      	; 0x3558 <process_tapping+0x16e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    3550:	d8 01       	movw	r26, r16
    3552:	15 96       	adiw	r26, 0x05	; 5
    3554:	fc 93       	st	X, r31
    3556:	ae c0       	rjmp	.+348    	; 0x36b4 <process_tapping+0x2ca>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3558:	4d 87       	std	Y+13, r20	; 0x0d
    355a:	5e 87       	std	Y+14, r21	; 0x0e
    355c:	8d 85       	ldd	r24, Y+13	; 0x0d
    355e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3560:	6a 8b       	std	Y+18, r22	; 0x12
    3562:	0e 94 e5 18 	call	0x31ca	; 0x31ca <is_tap_key>
    3566:	6a 89       	ldd	r22, Y+18	; 0x12
    3568:	88 23       	and	r24, r24
    356a:	29 f1       	breq	.+74     	; 0x35b6 <process_tapping+0x1cc>
    356c:	d6 2e       	mov	r13, r22
    356e:	66 23       	and	r22, r22
    3570:	11 f1       	breq	.+68     	; 0x35b6 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    3572:	20 91 9e 01 	lds	r18, 0x019E
    3576:	82 2f       	mov	r24, r18
    3578:	82 95       	swap	r24
    357a:	8f 70       	andi	r24, 0x0F	; 15
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	02 97       	sbiw	r24, 0x02	; 2
    3580:	0c f4       	brge	.+2      	; 0x3584 <process_tapping+0x19a>
    3582:	60 c0       	rjmp	.+192    	; 0x3644 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3584:	80 91 99 01 	lds	r24, 0x0199
    3588:	90 91 9a 01 	lds	r25, 0x019A
    358c:	98 87       	std	Y+8, r25	; 0x08
    358e:	8f 83       	std	Y+7, r24	; 0x07
    3590:	19 86       	std	Y+9, r1	; 0x09
    3592:	fb 86       	std	Y+11, r15	; 0x0b
    3594:	ea 86       	std	Y+10, r14	; 0x0a
    3596:	2c 87       	std	Y+12, r18	; 0x0c
    3598:	ce 01       	movw	r24, r28
    359a:	07 96       	adiw	r24, 0x07	; 7
    359c:	51 c0       	rjmp	.+162    	; 0x3640 <process_tapping+0x256>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    359e:	e5 17       	cp	r30, r21
    35a0:	31 f1       	breq	.+76     	; 0x35ee <process_tapping+0x204>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    35a2:	4d 87       	std	Y+13, r20	; 0x0d
    35a4:	5e 87       	std	Y+14, r21	; 0x0e
    35a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35aa:	6a 8b       	std	Y+18, r22	; 0x12
    35ac:	0e 94 e5 18 	call	0x31ca	; 0x31ca <is_tap_key>
    35b0:	6a 89       	ldd	r22, Y+18	; 0x12
    35b2:	81 11       	cpse	r24, r1
    35b4:	2e c0       	rjmp	.+92     	; 0x3612 <process_tapping+0x228>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    35b6:	c8 01       	movw	r24, r16
    35b8:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <process_action>
    35bc:	a4 c0       	rjmp	.+328    	; 0x3706 <process_tapping+0x31c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    35be:	8f 2f       	mov	r24, r31
    35c0:	80 7f       	andi	r24, 0xF0	; 240
    35c2:	69 f7       	brne	.-38     	; 0x359e <process_tapping+0x1b4>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    35c4:	7e 2d       	mov	r23, r14
    35c6:	f9 8a       	std	Y+17, r15	; 0x11
    35c8:	e8 8a       	std	Y+16, r14	; 0x10
    35ca:	89 89       	ldd	r24, Y+17	; 0x11
    35cc:	0e 94 0a 19 	call	0x3214	; 0x3214 <debug_event>
                process_action(&tapping_key);
    35d0:	89 e9       	ldi	r24, 0x99	; 153
    35d2:	91 e0       	ldi	r25, 0x01	; 1
    35d4:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <process_action>
                tapping_key = (keyrecord_t){};
    35d8:	e9 e9       	ldi	r30, 0x99	; 153
    35da:	f1 e0       	ldi	r31, 0x01	; 1
    35dc:	86 e0       	ldi	r24, 0x06	; 6
    35de:	df 01       	movw	r26, r30
    35e0:	1d 92       	st	X+, r1
    35e2:	8a 95       	dec	r24
    35e4:	e9 f7       	brne	.-6      	; 0x35e0 <process_tapping+0x1f6>
                debug_tapping_key();
    35e6:	0e 94 7f 19 	call	0x32fe	; 0x32fe <debug_tapping_key>
                return false;
    35ea:	d1 2c       	mov	r13, r1
    35ec:	db c0       	rjmp	.+438    	; 0x37a4 <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    35ee:	74 13       	cpse	r23, r20
    35f0:	d8 cf       	rjmp	.-80     	; 0x35a2 <process_tapping+0x1b8>
    35f2:	61 11       	cpse	r22, r1
    35f4:	d6 cf       	rjmp	.-84     	; 0x35a2 <process_tapping+0x1b8>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    35f6:	d8 01       	movw	r26, r16
    35f8:	15 96       	adiw	r26, 0x05	; 5
    35fa:	fc 93       	st	X, r31
                    process_action(keyp);
    35fc:	c8 01       	movw	r24, r16
    35fe:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <process_action>
                    tapping_key = (keyrecord_t){};
    3602:	e9 e9       	ldi	r30, 0x99	; 153
    3604:	f1 e0       	ldi	r31, 0x01	; 1
    3606:	86 e0       	ldi	r24, 0x06	; 6
    3608:	df 01       	movw	r26, r30
    360a:	1d 92       	st	X+, r1
    360c:	8a 95       	dec	r24
    360e:	e9 f7       	brne	.-6      	; 0x360a <process_tapping+0x220>
                    return true;
    3610:	c9 c0       	rjmp	.+402    	; 0x37a4 <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3612:	d6 2e       	mov	r13, r22
    3614:	66 23       	and	r22, r22
    3616:	79 f2       	breq	.-98     	; 0x35b6 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    3618:	20 91 9e 01 	lds	r18, 0x019E
    361c:	82 2f       	mov	r24, r18
    361e:	82 95       	swap	r24
    3620:	8f 70       	andi	r24, 0x0F	; 15
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	02 97       	sbiw	r24, 0x02	; 2
    3626:	74 f0       	brlt	.+28     	; 0x3644 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3628:	80 91 99 01 	lds	r24, 0x0199
    362c:	90 91 9a 01 	lds	r25, 0x019A
    3630:	9a 83       	std	Y+2, r25	; 0x02
    3632:	89 83       	std	Y+1, r24	; 0x01
    3634:	1b 82       	std	Y+3, r1	; 0x03
    3636:	fd 82       	std	Y+5, r15	; 0x05
    3638:	ec 82       	std	Y+4, r14	; 0x04
    363a:	2e 83       	std	Y+6, r18	; 0x06
    363c:	ce 01       	movw	r24, r28
    363e:	01 96       	adiw	r24, 0x01	; 1
    3640:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    3644:	86 e0       	ldi	r24, 0x06	; 6
    3646:	f8 01       	movw	r30, r16
    3648:	a9 e9       	ldi	r26, 0x99	; 153
    364a:	b1 e0       	ldi	r27, 0x01	; 1
    364c:	01 90       	ld	r0, Z+
    364e:	0d 92       	st	X+, r0
    3650:	8a 95       	dec	r24
    3652:	e1 f7       	brne	.-8      	; 0x364c <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    3654:	0e 94 8d 19 	call	0x331a	; 0x331a <waiting_buffer_scan_tap>
    3658:	6f c0       	rjmp	.+222    	; 0x3738 <process_tapping+0x34e>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    365a:	e2 16       	cp	r14, r18
    365c:	f3 06       	cpc	r15, r19
    365e:	28 f0       	brcs	.+10     	; 0x366a <process_tapping+0x280>
    3660:	c7 01       	movw	r24, r14
    3662:	82 1b       	sub	r24, r18
    3664:	93 0b       	sbc	r25, r19
    3666:	9c 01       	movw	r18, r24
    3668:	04 c0       	rjmp	.+8      	; 0x3672 <process_tapping+0x288>
    366a:	20 95       	com	r18
    366c:	30 95       	com	r19
    366e:	2e 0d       	add	r18, r14
    3670:	3f 1d       	adc	r19, r15
    3672:	28 3c       	cpi	r18, 0xC8	; 200
    3674:	31 05       	cpc	r19, r1
    3676:	08 f0       	brcs	.+2      	; 0x367a <process_tapping+0x290>
    3678:	52 c0       	rjmp	.+164    	; 0x371e <process_tapping+0x334>
            if (event.pressed) {
    367a:	d6 2e       	mov	r13, r22
    367c:	66 23       	and	r22, r22
    367e:	09 f4       	brne	.+2      	; 0x3682 <process_tapping+0x298>
    3680:	9a cf       	rjmp	.-204    	; 0x35b6 <process_tapping+0x1cc>
                if (IS_TAPPING_KEY(event.key)) {
    3682:	e5 13       	cpse	r30, r21
    3684:	2c c0       	rjmp	.+88     	; 0x36de <process_tapping+0x2f4>
    3686:	74 13       	cpse	r23, r20
    3688:	2a c0       	rjmp	.+84     	; 0x36de <process_tapping+0x2f4>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    368a:	80 91 9e 01 	lds	r24, 0x019E
    368e:	80 fd       	sbrc	r24, 0
    3690:	1d c0       	rjmp	.+58     	; 0x36cc <process_tapping+0x2e2>
    3692:	98 2f       	mov	r25, r24
    3694:	92 95       	swap	r25
    3696:	9f 70       	andi	r25, 0x0F	; 15
    3698:	c9 f0       	breq	.+50     	; 0x36cc <process_tapping+0x2e2>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    369a:	d8 01       	movw	r26, r16
    369c:	15 96       	adiw	r26, 0x05	; 5
    369e:	8c 93       	st	X, r24
    36a0:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    36a2:	9f 30       	cpi	r25, 0x0F	; 15
    36a4:	39 f0       	breq	.+14     	; 0x36b4 <process_tapping+0x2ca>
    36a6:	9f 5f       	subi	r25, 0xFF	; 255
    36a8:	92 95       	swap	r25
    36aa:	90 7f       	andi	r25, 0xF0	; 240
    36ac:	8f 70       	andi	r24, 0x0F	; 15
    36ae:	89 2b       	or	r24, r25
    36b0:	15 96       	adiw	r26, 0x05	; 5
    36b2:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    36b4:	c8 01       	movw	r24, r16
    36b6:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <process_action>
                        tapping_key = *keyp;
    36ba:	86 e0       	ldi	r24, 0x06	; 6
    36bc:	f8 01       	movw	r30, r16
    36be:	a9 e9       	ldi	r26, 0x99	; 153
    36c0:	b1 e0       	ldi	r27, 0x01	; 1
    36c2:	01 90       	ld	r0, Z+
    36c4:	0d 92       	st	X+, r0
    36c6:	8a 95       	dec	r24
    36c8:	e1 f7       	brne	.-8      	; 0x36c2 <process_tapping+0x2d8>
    36ca:	36 c0       	rjmp	.+108    	; 0x3738 <process_tapping+0x34e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    36cc:	86 e0       	ldi	r24, 0x06	; 6
    36ce:	f8 01       	movw	r30, r16
    36d0:	a9 e9       	ldi	r26, 0x99	; 153
    36d2:	b1 e0       	ldi	r27, 0x01	; 1
    36d4:	01 90       	ld	r0, Z+
    36d6:	0d 92       	st	X+, r0
    36d8:	8a 95       	dec	r24
    36da:	e1 f7       	brne	.-8      	; 0x36d4 <process_tapping+0x2ea>
                        return true;
    36dc:	63 c0       	rjmp	.+198    	; 0x37a4 <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    36de:	4d 87       	std	Y+13, r20	; 0x0d
    36e0:	5e 87       	std	Y+14, r21	; 0x0e
    36e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    36e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e6:	0e 94 e5 18 	call	0x31ca	; 0x31ca <is_tap_key>
    36ea:	88 23       	and	r24, r24
    36ec:	79 f0       	breq	.+30     	; 0x370c <process_tapping+0x322>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    36ee:	86 e0       	ldi	r24, 0x06	; 6
    36f0:	f8 01       	movw	r30, r16
    36f2:	a9 e9       	ldi	r26, 0x99	; 153
    36f4:	b1 e0       	ldi	r27, 0x01	; 1
    36f6:	01 90       	ld	r0, Z+
    36f8:	0d 92       	st	X+, r0
    36fa:	8a 95       	dec	r24
    36fc:	e1 f7       	brne	.-8      	; 0x36f6 <process_tapping+0x30c>
                    waiting_buffer_scan_tap();
    36fe:	0e 94 8d 19 	call	0x331a	; 0x331a <waiting_buffer_scan_tap>
                    debug_tapping_key();
    3702:	0e 94 7f 19 	call	0x32fe	; 0x32fe <debug_tapping_key>
                    return true;
    3706:	dd 24       	eor	r13, r13
    3708:	d3 94       	inc	r13
    370a:	4c c0       	rjmp	.+152    	; 0x37a4 <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    370c:	80 91 9e 01 	lds	r24, 0x019E
    3710:	81 60       	ori	r24, 0x01	; 1
    3712:	80 93 9e 01 	sts	0x019E, r24
                    process_action(keyp);
    3716:	c8 01       	movw	r24, r16
    3718:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <process_action>
                    return true;
    371c:	43 c0       	rjmp	.+134    	; 0x37a4 <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    371e:	7e 2d       	mov	r23, r14
    3720:	f9 8a       	std	Y+17, r15	; 0x11
    3722:	e8 8a       	std	Y+16, r14	; 0x10
    3724:	89 89       	ldd	r24, Y+17	; 0x11
    3726:	0e 94 0a 19 	call	0x3214	; 0x3214 <debug_event>
            tapping_key = (keyrecord_t){};
    372a:	e9 e9       	ldi	r30, 0x99	; 153
    372c:	f1 e0       	ldi	r31, 0x01	; 1
    372e:	86 e0       	ldi	r24, 0x06	; 6
    3730:	df 01       	movw	r26, r30
    3732:	1d 92       	st	X+, r1
    3734:	8a 95       	dec	r24
    3736:	e9 f7       	brne	.-6      	; 0x3732 <process_tapping+0x348>
            debug_tapping_key();
    3738:	0e 94 7f 19 	call	0x32fe	; 0x32fe <debug_tapping_key>
            return false;
    373c:	33 c0       	rjmp	.+102    	; 0x37a4 <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    373e:	66 23       	and	r22, r22
    3740:	09 f4       	brne	.+2      	; 0x3744 <process_tapping+0x35a>
    3742:	39 cf       	rjmp	.-398    	; 0x35b6 <process_tapping+0x1cc>
    3744:	4d 87       	std	Y+13, r20	; 0x0d
    3746:	5e 87       	std	Y+14, r21	; 0x0e
    3748:	8d 85       	ldd	r24, Y+13	; 0x0d
    374a:	9e 85       	ldd	r25, Y+14	; 0x0e
    374c:	0e 94 e5 18 	call	0x31ca	; 0x31ca <is_tap_key>
    3750:	88 23       	and	r24, r24
    3752:	09 f4       	brne	.+2      	; 0x3756 <process_tapping+0x36c>
    3754:	30 cf       	rjmp	.-416    	; 0x35b6 <process_tapping+0x1cc>
    3756:	cb cf       	rjmp	.-106    	; 0x36ee <process_tapping+0x304>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    3758:	4d 87       	std	Y+13, r20	; 0x0d
    375a:	5e 87       	std	Y+14, r21	; 0x0e
    375c:	8d 85       	ldd	r24, Y+13	; 0x0d
    375e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3760:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <layer_switch_get_action>
                    switch (action.kind.id) {
    3764:	29 2f       	mov	r18, r25
    3766:	22 95       	swap	r18
    3768:	2f 70       	andi	r18, 0x0F	; 15
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	22 30       	cpi	r18, 0x02	; 2
    376e:	31 05       	cpc	r19, r1
    3770:	2c f4       	brge	.+10     	; 0x377c <process_tapping+0x392>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3772:	9f 70       	andi	r25, 0x0F	; 15
    3774:	41 f0       	breq	.+16     	; 0x3786 <process_tapping+0x39c>
    3776:	81 11       	cpse	r24, r1
    3778:	06 c0       	rjmp	.+12     	; 0x3786 <process_tapping+0x39c>
    377a:	0c c0       	rjmp	.+24     	; 0x3794 <process_tapping+0x3aa>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    377c:	24 30       	cpi	r18, 0x04	; 4
    377e:	31 05       	cpc	r19, r1
    3780:	2c f4       	brge	.+10     	; 0x378c <process_tapping+0x3a2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3782:	9f 70       	andi	r25, 0x0F	; 15
    3784:	49 f4       	brne	.+18     	; 0x3798 <process_tapping+0x3ae>
                            if (IS_MOD(action.key.code)) return false;
    3786:	80 5e       	subi	r24, 0xE0	; 224
    3788:	88 30       	cpi	r24, 0x08	; 8
    378a:	20 f0       	brcs	.+8      	; 0x3794 <process_tapping+0x3aa>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    378c:	c8 01       	movw	r24, r16
    378e:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <process_action>
                    return true;
    3792:	cf 2c       	mov	r12, r15
    3794:	dc 2c       	mov	r13, r12
    3796:	06 c0       	rjmp	.+12     	; 0x37a4 <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3798:	d8 01       	movw	r26, r16
    379a:	15 96       	adiw	r26, 0x05	; 5
    379c:	9c 91       	ld	r25, X
    379e:	90 7f       	andi	r25, 0xF0	; 240
    37a0:	91 f7       	brne	.-28     	; 0x3786 <process_tapping+0x39c>
    37a2:	f8 cf       	rjmp	.-16     	; 0x3794 <process_tapping+0x3aa>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    37a4:	8d 2d       	mov	r24, r13
    37a6:	62 96       	adiw	r28, 0x12	; 18
    37a8:	0f b6       	in	r0, 0x3f	; 63
    37aa:	f8 94       	cli
    37ac:	de bf       	out	0x3e, r29	; 62
    37ae:	0f be       	out	0x3f, r0	; 63
    37b0:	cd bf       	out	0x3d, r28	; 61
    37b2:	df 91       	pop	r29
    37b4:	cf 91       	pop	r28
    37b6:	1f 91       	pop	r17
    37b8:	0f 91       	pop	r16
    37ba:	ff 90       	pop	r15
    37bc:	ef 90       	pop	r14
    37be:	df 90       	pop	r13
    37c0:	cf 90       	pop	r12
    37c2:	08 95       	ret

000037c4 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    37c4:	1f 93       	push	r17
    37c6:	cf 93       	push	r28
    37c8:	df 93       	push	r29
    37ca:	cd b7       	in	r28, 0x3d	; 61
    37cc:	de b7       	in	r29, 0x3e	; 62
    37ce:	2c 97       	sbiw	r28, 0x0c	; 12
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	f8 94       	cli
    37d4:	de bf       	out	0x3e, r29	; 62
    37d6:	0f be       	out	0x3f, r0	; 63
    37d8:	cd bf       	out	0x3d, r28	; 61
    37da:	4f 83       	std	Y+7, r20	; 0x07
    37dc:	58 87       	std	Y+8, r21	; 0x08
    37de:	69 87       	std	Y+9, r22	; 0x09
    37e0:	7a 87       	std	Y+10, r23	; 0x0a
    37e2:	8b 87       	std	Y+11, r24	; 0x0b
    37e4:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    37e6:	ce 01       	movw	r24, r28
    37e8:	07 96       	adiw	r24, 0x07	; 7
    37ea:	0e 94 f5 19 	call	0x33ea	; 0x33ea <process_tapping>
    37ee:	88 23       	and	r24, r24
    37f0:	c1 f0       	breq	.+48     	; 0x3822 <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    37f2:	2f 81       	ldd	r18, Y+7	; 0x07
    37f4:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    37f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    37f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    37fa:	89 2b       	or	r24, r25
    37fc:	31 f0       	breq	.+12     	; 0x380a <action_tapping_process+0x46>
    37fe:	3f 3f       	cpi	r19, 0xFF	; 255
    3800:	11 f0       	breq	.+4      	; 0x3806 <action_tapping_process+0x42>
    3802:	80 e0       	ldi	r24, 0x00	; 0
    3804:	03 c0       	rjmp	.+6      	; 0x380c <action_tapping_process+0x48>
    3806:	2f 3f       	cpi	r18, 0xFF	; 255
    3808:	e1 f7       	brne	.-8      	; 0x3802 <action_tapping_process+0x3e>
    380a:	81 e0       	ldi	r24, 0x01	; 1
    380c:	81 11       	cpse	r24, r1
    380e:	47 c0       	rjmp	.+142    	; 0x389e <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    3810:	4f 81       	ldd	r20, Y+7	; 0x07
    3812:	58 85       	ldd	r21, Y+8	; 0x08
    3814:	69 85       	ldd	r22, Y+9	; 0x09
    3816:	7a 85       	ldd	r23, Y+10	; 0x0a
    3818:	8b 85       	ldd	r24, Y+11	; 0x0b
    381a:	9c 85       	ldd	r25, Y+12	; 0x0c
    381c:	0e 94 19 19 	call	0x3232	; 0x3232 <debug_record>
    3820:	3e c0       	rjmp	.+124    	; 0x389e <action_tapping_process+0xda>
    3822:	86 e0       	ldi	r24, 0x06	; 6
    3824:	fe 01       	movw	r30, r28
    3826:	37 96       	adiw	r30, 0x07	; 7
    3828:	de 01       	movw	r26, r28
    382a:	11 96       	adiw	r26, 0x01	; 1
    382c:	01 90       	ld	r0, Z+
    382e:	0d 92       	st	X+, r0
    3830:	8a 95       	dec	r24
    3832:	e1 f7       	brne	.-8      	; 0x382c <action_tapping_process+0x68>
    3834:	ff 81       	ldd	r31, Y+7	; 0x07
    3836:	e8 85       	ldd	r30, Y+8	; 0x08
    3838:	4a 85       	ldd	r20, Y+10	; 0x0a
    383a:	5b 85       	ldd	r21, Y+11	; 0x0b
    383c:	41 15       	cp	r20, r1
    383e:	51 05       	cpc	r21, r1
    3840:	31 f0       	breq	.+12     	; 0x384e <action_tapping_process+0x8a>
    3842:	ef 3f       	cpi	r30, 0xFF	; 255
    3844:	31 f4       	brne	.+12     	; 0x3852 <action_tapping_process+0x8e>
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	ff 3f       	cpi	r31, 0xFF	; 255
    384a:	19 f4       	brne	.+6      	; 0x3852 <action_tapping_process+0x8e>
    384c:	03 c0       	rjmp	.+6      	; 0x3854 <action_tapping_process+0x90>
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	01 c0       	rjmp	.+2      	; 0x3854 <action_tapping_process+0x90>
    3852:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    3854:	80 fd       	sbrc	r24, 0
    3856:	23 c0       	rjmp	.+70     	; 0x389e <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3858:	20 91 68 01 	lds	r18, 0x0168
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	c9 01       	movw	r24, r18
    3860:	01 96       	adiw	r24, 0x01	; 1
    3862:	87 70       	andi	r24, 0x07	; 7
    3864:	99 27       	eor	r25, r25
    3866:	60 91 67 01 	lds	r22, 0x0167
    386a:	70 e0       	ldi	r23, 0x00	; 0
    386c:	86 17       	cp	r24, r22
    386e:	97 07       	cpc	r25, r23
    3870:	f1 f1       	breq	.+124    	; 0x38ee <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3872:	f9 83       	std	Y+1, r31	; 0x01
    3874:	ea 83       	std	Y+2, r30	; 0x02
    3876:	5d 83       	std	Y+5, r21	; 0x05
    3878:	4c 83       	std	Y+4, r20	; 0x04
    387a:	96 e0       	ldi	r25, 0x06	; 6
    387c:	92 9f       	mul	r25, r18
    387e:	d0 01       	movw	r26, r0
    3880:	93 9f       	mul	r25, r19
    3882:	b0 0d       	add	r27, r0
    3884:	11 24       	eor	r1, r1
    3886:	a7 59       	subi	r26, 0x97	; 151
    3888:	be 4f       	sbci	r27, 0xFE	; 254
    388a:	fe 01       	movw	r30, r28
    388c:	31 96       	adiw	r30, 0x01	; 1
    388e:	01 90       	ld	r0, Z+
    3890:	0d 92       	st	X+, r0
    3892:	9a 95       	dec	r25
    3894:	e1 f7       	brne	.-8      	; 0x388e <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3896:	80 93 68 01 	sts	0x0168, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    389a:	0e 94 5e 19 	call	0x32bc	; 0x32bc <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    389e:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    38a0:	80 91 67 01 	lds	r24, 0x0167
    38a4:	90 91 68 01 	lds	r25, 0x0168
    38a8:	89 17       	cp	r24, r25
    38aa:	79 f1       	breq	.+94     	; 0x390a <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    38ac:	18 9f       	mul	r17, r24
    38ae:	c0 01       	movw	r24, r0
    38b0:	11 24       	eor	r1, r1
    38b2:	87 59       	subi	r24, 0x97	; 151
    38b4:	9e 4f       	sbci	r25, 0xFE	; 254
    38b6:	0e 94 f5 19 	call	0x33ea	; 0x33ea <process_tapping>
    38ba:	88 23       	and	r24, r24
    38bc:	31 f1       	breq	.+76     	; 0x390a <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    38be:	e0 91 67 01 	lds	r30, 0x0167
    38c2:	1e 9f       	mul	r17, r30
    38c4:	f0 01       	movw	r30, r0
    38c6:	11 24       	eor	r1, r1
    38c8:	e7 59       	subi	r30, 0x97	; 151
    38ca:	fe 4f       	sbci	r31, 0xFE	; 254
    38cc:	40 81       	ld	r20, Z
    38ce:	51 81       	ldd	r21, Z+1	; 0x01
    38d0:	62 81       	ldd	r22, Z+2	; 0x02
    38d2:	73 81       	ldd	r23, Z+3	; 0x03
    38d4:	84 81       	ldd	r24, Z+4	; 0x04
    38d6:	95 81       	ldd	r25, Z+5	; 0x05
    38d8:	0e 94 19 19 	call	0x3232	; 0x3232 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    38dc:	80 91 67 01 	lds	r24, 0x0167
    38e0:	90 e0       	ldi	r25, 0x00	; 0
    38e2:	01 96       	adiw	r24, 0x01	; 1
    38e4:	87 70       	andi	r24, 0x07	; 7
    38e6:	99 27       	eor	r25, r25
    38e8:	80 93 67 01 	sts	0x0167, r24
    38ec:	d9 cf       	rjmp	.-78     	; 0x38a0 <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    38ee:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    38f2:	10 92 68 01 	sts	0x0168, r1
    waiting_buffer_tail = 0;
    38f6:	10 92 67 01 	sts	0x0167, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    38fa:	e9 e9       	ldi	r30, 0x99	; 153
    38fc:	f1 e0       	ldi	r31, 0x01	; 1
    38fe:	86 e0       	ldi	r24, 0x06	; 6
    3900:	df 01       	movw	r26, r30
    3902:	1d 92       	st	X+, r1
    3904:	8a 95       	dec	r24
    3906:	e9 f7       	brne	.-6      	; 0x3902 <action_tapping_process+0x13e>
    3908:	ca cf       	rjmp	.-108    	; 0x389e <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    390a:	2c 96       	adiw	r28, 0x0c	; 12
    390c:	0f b6       	in	r0, 0x3f	; 63
    390e:	f8 94       	cli
    3910:	de bf       	out	0x3e, r29	; 62
    3912:	0f be       	out	0x3f, r0	; 63
    3914:	cd bf       	out	0x3d, r28	; 61
    3916:	df 91       	pop	r29
    3918:	cf 91       	pop	r28
    391a:	1f 91       	pop	r17
    391c:	08 95       	ret

0000391e <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    391e:	ef 92       	push	r14
    3920:	ff 92       	push	r15
    3922:	0f 93       	push	r16
    3924:	1f 93       	push	r17
    3926:	cf 93       	push	r28
    3928:	df 93       	push	r29
    392a:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    392c:	00 97       	sbiw	r24, 0x00	; 0
    392e:	09 f4       	brne	.+2      	; 0x3932 <action_macro_play+0x14>
    3930:	6d c0       	rjmp	.+218    	; 0x3a0c <action_macro_play+0xee>
    3932:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3934:	ee 24       	eor	r14, r14
    3936:	e3 94       	inc	r14
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3938:	ef 01       	movw	r28, r30
    393a:	21 96       	adiw	r28, 0x01	; 1
    393c:	84 91       	lpm	r24, Z
    393e:	84 37       	cpi	r24, 0x74	; 116
    3940:	40 f4       	brcc	.+16     	; 0x3952 <action_macro_play+0x34>
    3942:	84 30       	cpi	r24, 0x04	; 4
    3944:	08 f0       	brcs	.+2      	; 0x3948 <action_macro_play+0x2a>
    3946:	53 c0       	rjmp	.+166    	; 0x39ee <action_macro_play+0xd0>
    3948:	81 30       	cpi	r24, 0x01	; 1
    394a:	81 f0       	breq	.+32     	; 0x396c <action_macro_play+0x4e>
    394c:	82 30       	cpi	r24, 0x02	; 2
    394e:	21 f1       	breq	.+72     	; 0x3998 <action_macro_play+0x7a>
    3950:	5d c0       	rjmp	.+186    	; 0x3a0c <action_macro_play+0xee>
    3952:	85 37       	cpi	r24, 0x75	; 117
    3954:	09 f4       	brne	.+2      	; 0x3958 <action_macro_play+0x3a>
    3956:	45 c0       	rjmp	.+138    	; 0x39e2 <action_macro_play+0xc4>
    3958:	b0 f1       	brcs	.+108    	; 0x39c6 <action_macro_play+0xa8>
    395a:	9c e7       	ldi	r25, 0x7C	; 124
    395c:	98 0f       	add	r25, r24
    395e:	90 37       	cpi	r25, 0x70	; 112
    3960:	08 f0       	brcs	.+2      	; 0x3964 <action_macro_play+0x46>
    3962:	54 c0       	rjmp	.+168    	; 0x3a0c <action_macro_play+0xee>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3964:	8f 77       	andi	r24, 0x7F	; 127
    3966:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <unregister_code>
                break;
    396a:	43 c0       	rjmp	.+134    	; 0x39f2 <action_macro_play+0xd4>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    396c:	8f 01       	movw	r16, r30
    396e:	0e 5f       	subi	r16, 0xFE	; 254
    3970:	1f 4f       	sbci	r17, 0xFF	; 255
    3972:	fe 01       	movw	r30, r28
    3974:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3976:	90 e2       	ldi	r25, 0x20	; 32
    3978:	98 0f       	add	r25, r24
    397a:	98 30       	cpi	r25, 0x08	; 8
    397c:	50 f4       	brcc	.+20     	; 0x3992 <action_macro_play+0x74>
                    add_weak_mods(MOD_BIT(macro));
    397e:	87 70       	andi	r24, 0x07	; 7
    3980:	fe 2d       	mov	r31, r14
    3982:	01 c0       	rjmp	.+2      	; 0x3986 <action_macro_play+0x68>
    3984:	ff 0f       	add	r31, r31
    3986:	8a 95       	dec	r24
    3988:	ea f7       	brpl	.-6      	; 0x3984 <action_macro_play+0x66>
    398a:	8f 2f       	mov	r24, r31
    398c:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <add_weak_mods>
    3990:	15 c0       	rjmp	.+42     	; 0x39bc <action_macro_play+0x9e>
                } else {
                    register_code(macro);
    3992:	0e 94 30 14 	call	0x2860	; 0x2860 <register_code>
    3996:	12 c0       	rjmp	.+36     	; 0x39bc <action_macro_play+0x9e>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3998:	8f 01       	movw	r16, r30
    399a:	0e 5f       	subi	r16, 0xFE	; 254
    399c:	1f 4f       	sbci	r17, 0xFF	; 255
    399e:	fe 01       	movw	r30, r28
    39a0:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    39a2:	90 e2       	ldi	r25, 0x20	; 32
    39a4:	98 0f       	add	r25, r24
    39a6:	98 30       	cpi	r25, 0x08	; 8
    39a8:	58 f4       	brcc	.+22     	; 0x39c0 <action_macro_play+0xa2>
                    del_weak_mods(MOD_BIT(macro));
    39aa:	87 70       	andi	r24, 0x07	; 7
    39ac:	fe 2d       	mov	r31, r14
    39ae:	01 c0       	rjmp	.+2      	; 0x39b2 <action_macro_play+0x94>
    39b0:	ff 0f       	add	r31, r31
    39b2:	8a 95       	dec	r24
    39b4:	ea f7       	brpl	.-6      	; 0x39b0 <action_macro_play+0x92>
    39b6:	8f 2f       	mov	r24, r31
    39b8:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <del_weak_mods>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    39bc:	e8 01       	movw	r28, r16
    39be:	19 c0       	rjmp	.+50     	; 0x39f2 <action_macro_play+0xd4>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                } else {
                    unregister_code(macro);
    39c0:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <unregister_code>
    39c4:	fb cf       	rjmp	.-10     	; 0x39bc <action_macro_play+0x9e>
                }
                break;
            case WAIT:
                MACRO_READ();
    39c6:	cf 01       	movw	r24, r30
    39c8:	02 96       	adiw	r24, 0x02	; 2
    39ca:	fe 01       	movw	r30, r28
    39cc:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    39ce:	cc 23       	and	r28, r28
    39d0:	61 f0       	breq	.+24     	; 0x39ea <action_macro_play+0xcc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    39d2:	ef e9       	ldi	r30, 0x9F	; 159
    39d4:	ff e0       	ldi	r31, 0x0F	; 15
    39d6:	31 97       	sbiw	r30, 0x01	; 1
    39d8:	f1 f7       	brne	.-4      	; 0x39d6 <action_macro_play+0xb8>
    39da:	00 c0       	rjmp	.+0      	; 0x39dc <action_macro_play+0xbe>
    39dc:	00 00       	nop
    39de:	c1 50       	subi	r28, 0x01	; 1
    39e0:	f6 cf       	rjmp	.-20     	; 0x39ce <action_macro_play+0xb0>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    39e2:	cf 01       	movw	r24, r30
    39e4:	02 96       	adiw	r24, 0x02	; 2
    39e6:	fe 01       	movw	r30, r28
    39e8:	f4 90       	lpm	r15, Z
    39ea:	ec 01       	movw	r28, r24
                dprintf("INTERVAL(%u)\n", interval);
                break;
    39ec:	02 c0       	rjmp	.+4      	; 0x39f2 <action_macro_play+0xd4>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    39ee:	0e 94 30 14 	call	0x2860	; 0x2860 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    39f2:	8f 2d       	mov	r24, r15
    39f4:	88 23       	and	r24, r24
    39f6:	41 f0       	breq	.+16     	; 0x3a08 <action_macro_play+0xea>
    39f8:	ef e9       	ldi	r30, 0x9F	; 159
    39fa:	ff e0       	ldi	r31, 0x0F	; 15
    39fc:	31 97       	sbiw	r30, 0x01	; 1
    39fe:	f1 f7       	brne	.-4      	; 0x39fc <action_macro_play+0xde>
    3a00:	00 c0       	rjmp	.+0      	; 0x3a02 <action_macro_play+0xe4>
    3a02:	00 00       	nop
    3a04:	81 50       	subi	r24, 0x01	; 1
    3a06:	f6 cf       	rjmp	.-20     	; 0x39f4 <action_macro_play+0xd6>
    3a08:	fe 01       	movw	r30, r28
    3a0a:	96 cf       	rjmp	.-212    	; 0x3938 <action_macro_play+0x1a>
    }
}
    3a0c:	df 91       	pop	r29
    3a0e:	cf 91       	pop	r28
    3a10:	1f 91       	pop	r17
    3a12:	0f 91       	pop	r16
    3a14:	ff 90       	pop	r15
    3a16:	ef 90       	pop	r14
    3a18:	08 95       	ret

00003a1a <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3a1a:	60 93 a3 01 	sts	0x01A3, r22
    3a1e:	70 93 a4 01 	sts	0x01A4, r23
    3a22:	80 93 a5 01 	sts	0x01A5, r24
    3a26:	90 93 a6 01 	sts	0x01A6, r25
    default_layer_debug(); debug("\n");
#ifdef LEDMAP_ENABLE
    default_layer_state_change(state);
    3a2a:	0e 94 af 31 	call	0x635e	; 0x635e <default_layer_state_change>
#endif
    clear_keyboard_but_mods(); // To avoid stuck keys
    3a2e:	0c 94 cf 18 	jmp	0x319e	; 0x319e <clear_keyboard_but_mods>

00003a32 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3a32:	60 93 9f 01 	sts	0x019F, r22
    3a36:	70 93 a0 01 	sts	0x01A0, r23
    3a3a:	80 93 a1 01 	sts	0x01A1, r24
    3a3e:	90 93 a2 01 	sts	0x01A2, r25
    layer_debug(); dprintln();
#ifdef LEDMAP_ENABLE
    layer_state_change(state);
    3a42:	0e 94 07 32 	call	0x640e	; 0x640e <layer_state_change>
#endif
    clear_keyboard_but_mods(); // To avoid stuck keys
    3a46:	0c 94 cf 18 	jmp	0x319e	; 0x319e <clear_keyboard_but_mods>

00003a4a <default_layer_debug>:
#endif
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    3a4a:	08 95       	ret

00003a4c <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    3a4c:	0c 94 0d 1d 	jmp	0x3a1a	; 0x3a1a <default_layer_state_set>

00003a50 <default_layer_or>:
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    3a50:	0f 93       	push	r16
    3a52:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    3a54:	00 91 a3 01 	lds	r16, 0x01A3
    3a58:	10 91 a4 01 	lds	r17, 0x01A4
    3a5c:	20 91 a5 01 	lds	r18, 0x01A5
    3a60:	30 91 a6 01 	lds	r19, 0x01A6
    3a64:	60 2b       	or	r22, r16
    3a66:	71 2b       	or	r23, r17
    3a68:	82 2b       	or	r24, r18
    3a6a:	93 2b       	or	r25, r19
}
    3a6c:	1f 91       	pop	r17
    3a6e:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    3a70:	0c 94 0d 1d 	jmp	0x3a1a	; 0x3a1a <default_layer_state_set>

00003a74 <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    3a74:	0f 93       	push	r16
    3a76:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    3a78:	00 91 a3 01 	lds	r16, 0x01A3
    3a7c:	10 91 a4 01 	lds	r17, 0x01A4
    3a80:	20 91 a5 01 	lds	r18, 0x01A5
    3a84:	30 91 a6 01 	lds	r19, 0x01A6
    3a88:	60 23       	and	r22, r16
    3a8a:	71 23       	and	r23, r17
    3a8c:	82 23       	and	r24, r18
    3a8e:	93 23       	and	r25, r19
}
    3a90:	1f 91       	pop	r17
    3a92:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    3a94:	0c 94 0d 1d 	jmp	0x3a1a	; 0x3a1a <default_layer_state_set>

00003a98 <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    3a98:	0f 93       	push	r16
    3a9a:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3a9c:	00 91 a3 01 	lds	r16, 0x01A3
    3aa0:	10 91 a4 01 	lds	r17, 0x01A4
    3aa4:	20 91 a5 01 	lds	r18, 0x01A5
    3aa8:	30 91 a6 01 	lds	r19, 0x01A6
    3aac:	60 27       	eor	r22, r16
    3aae:	71 27       	eor	r23, r17
    3ab0:	82 27       	eor	r24, r18
    3ab2:	93 27       	eor	r25, r19
}
    3ab4:	1f 91       	pop	r17
    3ab6:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    3ab8:	0c 94 0d 1d 	jmp	0x3a1a	; 0x3a1a <default_layer_state_set>

00003abc <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    3abc:	60 e0       	ldi	r22, 0x00	; 0
    3abe:	70 e0       	ldi	r23, 0x00	; 0
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <layer_state_set>

00003ac6 <layer_move>:
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    3ac6:	41 e0       	ldi	r20, 0x01	; 1
    3ac8:	50 e0       	ldi	r21, 0x00	; 0
    3aca:	60 e0       	ldi	r22, 0x00	; 0
    3acc:	70 e0       	ldi	r23, 0x00	; 0
    3ace:	04 c0       	rjmp	.+8      	; 0x3ad8 <layer_move+0x12>
    3ad0:	44 0f       	add	r20, r20
    3ad2:	55 1f       	adc	r21, r21
    3ad4:	66 1f       	adc	r22, r22
    3ad6:	77 1f       	adc	r23, r23
    3ad8:	8a 95       	dec	r24
    3ada:	d2 f7       	brpl	.-12     	; 0x3ad0 <layer_move+0xa>
    3adc:	cb 01       	movw	r24, r22
    3ade:	ba 01       	movw	r22, r20
    3ae0:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <layer_state_set>

00003ae4 <layer_on>:
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3ae4:	41 e0       	ldi	r20, 0x01	; 1
    3ae6:	50 e0       	ldi	r21, 0x00	; 0
    3ae8:	60 e0       	ldi	r22, 0x00	; 0
    3aea:	70 e0       	ldi	r23, 0x00	; 0
    3aec:	04 c0       	rjmp	.+8      	; 0x3af6 <layer_on+0x12>
    3aee:	44 0f       	add	r20, r20
    3af0:	55 1f       	adc	r21, r21
    3af2:	66 1f       	adc	r22, r22
    3af4:	77 1f       	adc	r23, r23
    3af6:	8a 95       	dec	r24
    3af8:	d2 f7       	brpl	.-12     	; 0x3aee <layer_on+0xa>
    3afa:	80 91 9f 01 	lds	r24, 0x019F
    3afe:	90 91 a0 01 	lds	r25, 0x01A0
    3b02:	a0 91 a1 01 	lds	r26, 0x01A1
    3b06:	b0 91 a2 01 	lds	r27, 0x01A2
    3b0a:	48 2b       	or	r20, r24
    3b0c:	59 2b       	or	r21, r25
    3b0e:	6a 2b       	or	r22, r26
    3b10:	7b 2b       	or	r23, r27
    3b12:	cb 01       	movw	r24, r22
    3b14:	ba 01       	movw	r22, r20
    3b16:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <layer_state_set>

00003b1a <layer_off>:
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3b1a:	41 e0       	ldi	r20, 0x01	; 1
    3b1c:	50 e0       	ldi	r21, 0x00	; 0
    3b1e:	60 e0       	ldi	r22, 0x00	; 0
    3b20:	70 e0       	ldi	r23, 0x00	; 0
    3b22:	04 c0       	rjmp	.+8      	; 0x3b2c <layer_off+0x12>
    3b24:	44 0f       	add	r20, r20
    3b26:	55 1f       	adc	r21, r21
    3b28:	66 1f       	adc	r22, r22
    3b2a:	77 1f       	adc	r23, r23
    3b2c:	8a 95       	dec	r24
    3b2e:	d2 f7       	brpl	.-12     	; 0x3b24 <layer_off+0xa>
    3b30:	40 95       	com	r20
    3b32:	50 95       	com	r21
    3b34:	60 95       	com	r22
    3b36:	70 95       	com	r23
    3b38:	80 91 9f 01 	lds	r24, 0x019F
    3b3c:	90 91 a0 01 	lds	r25, 0x01A0
    3b40:	a0 91 a1 01 	lds	r26, 0x01A1
    3b44:	b0 91 a2 01 	lds	r27, 0x01A2
    3b48:	48 23       	and	r20, r24
    3b4a:	59 23       	and	r21, r25
    3b4c:	6a 23       	and	r22, r26
    3b4e:	7b 23       	and	r23, r27
    3b50:	cb 01       	movw	r24, r22
    3b52:	ba 01       	movw	r22, r20
    3b54:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <layer_state_set>

00003b58 <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3b58:	41 e0       	ldi	r20, 0x01	; 1
    3b5a:	50 e0       	ldi	r21, 0x00	; 0
    3b5c:	60 e0       	ldi	r22, 0x00	; 0
    3b5e:	70 e0       	ldi	r23, 0x00	; 0
    3b60:	04 c0       	rjmp	.+8      	; 0x3b6a <layer_invert+0x12>
    3b62:	44 0f       	add	r20, r20
    3b64:	55 1f       	adc	r21, r21
    3b66:	66 1f       	adc	r22, r22
    3b68:	77 1f       	adc	r23, r23
    3b6a:	8a 95       	dec	r24
    3b6c:	d2 f7       	brpl	.-12     	; 0x3b62 <layer_invert+0xa>
    3b6e:	80 91 9f 01 	lds	r24, 0x019F
    3b72:	90 91 a0 01 	lds	r25, 0x01A0
    3b76:	a0 91 a1 01 	lds	r26, 0x01A1
    3b7a:	b0 91 a2 01 	lds	r27, 0x01A2
    3b7e:	48 27       	eor	r20, r24
    3b80:	59 27       	eor	r21, r25
    3b82:	6a 27       	eor	r22, r26
    3b84:	7b 27       	eor	r23, r27
    3b86:	cb 01       	movw	r24, r22
    3b88:	ba 01       	movw	r22, r20
    3b8a:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <layer_state_set>

00003b8e <layer_or>:
}

void layer_or(uint32_t state)
{
    3b8e:	0f 93       	push	r16
    3b90:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3b92:	00 91 9f 01 	lds	r16, 0x019F
    3b96:	10 91 a0 01 	lds	r17, 0x01A0
    3b9a:	20 91 a1 01 	lds	r18, 0x01A1
    3b9e:	30 91 a2 01 	lds	r19, 0x01A2
    3ba2:	60 2b       	or	r22, r16
    3ba4:	71 2b       	or	r23, r17
    3ba6:	82 2b       	or	r24, r18
    3ba8:	93 2b       	or	r25, r19
}
    3baa:	1f 91       	pop	r17
    3bac:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    3bae:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <layer_state_set>

00003bb2 <layer_and>:
}
void layer_and(uint32_t state)
{
    3bb2:	0f 93       	push	r16
    3bb4:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3bb6:	00 91 9f 01 	lds	r16, 0x019F
    3bba:	10 91 a0 01 	lds	r17, 0x01A0
    3bbe:	20 91 a1 01 	lds	r18, 0x01A1
    3bc2:	30 91 a2 01 	lds	r19, 0x01A2
    3bc6:	60 23       	and	r22, r16
    3bc8:	71 23       	and	r23, r17
    3bca:	82 23       	and	r24, r18
    3bcc:	93 23       	and	r25, r19
}
    3bce:	1f 91       	pop	r17
    3bd0:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    3bd2:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <layer_state_set>

00003bd6 <layer_xor>:
}
void layer_xor(uint32_t state)
{
    3bd6:	0f 93       	push	r16
    3bd8:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3bda:	00 91 9f 01 	lds	r16, 0x019F
    3bde:	10 91 a0 01 	lds	r17, 0x01A0
    3be2:	20 91 a1 01 	lds	r18, 0x01A1
    3be6:	30 91 a2 01 	lds	r19, 0x01A2
    3bea:	60 27       	eor	r22, r16
    3bec:	71 27       	eor	r23, r17
    3bee:	82 27       	eor	r24, r18
    3bf0:	93 27       	eor	r25, r19
}
    3bf2:	1f 91       	pop	r17
    3bf4:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    3bf6:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <layer_state_set>

00003bfa <layer_debug>:
}

void layer_debug(void)
{
    3bfa:	08 95       	ret

00003bfc <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3bfc:	cf 92       	push	r12
    3bfe:	df 92       	push	r13
    3c00:	ef 92       	push	r14
    3c02:	ff 92       	push	r15
    3c04:	0f 93       	push	r16
    3c06:	1f 93       	push	r17
    3c08:	cf 93       	push	r28
    3c0a:	df 93       	push	r29
    3c0c:	ec 01       	movw	r28, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3c0e:	c0 90 a3 01 	lds	r12, 0x01A3
    3c12:	d0 90 a4 01 	lds	r13, 0x01A4
    3c16:	e0 90 a5 01 	lds	r14, 0x01A5
    3c1a:	f0 90 a6 01 	lds	r15, 0x01A6
    3c1e:	80 91 9f 01 	lds	r24, 0x019F
    3c22:	90 91 a0 01 	lds	r25, 0x01A0
    3c26:	a0 91 a1 01 	lds	r26, 0x01A1
    3c2a:	b0 91 a2 01 	lds	r27, 0x01A2
    3c2e:	c8 2a       	or	r12, r24
    3c30:	d9 2a       	or	r13, r25
    3c32:	ea 2a       	or	r14, r26
    3c34:	fb 2a       	or	r15, r27
    3c36:	0f e1       	ldi	r16, 0x1F	; 31
    3c38:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3c3a:	b7 01       	movw	r22, r14
    3c3c:	a6 01       	movw	r20, r12
    3c3e:	00 2e       	mov	r0, r16
    3c40:	04 c0       	rjmp	.+8      	; 0x3c4a <layer_switch_get_action+0x4e>
    3c42:	76 95       	lsr	r23
    3c44:	67 95       	ror	r22
    3c46:	57 95       	ror	r21
    3c48:	47 95       	ror	r20
    3c4a:	0a 94       	dec	r0
    3c4c:	d2 f7       	brpl	.-12     	; 0x3c42 <layer_switch_get_action+0x46>
    3c4e:	40 ff       	sbrs	r20, 0
    3c50:	07 c0       	rjmp	.+14     	; 0x3c60 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    3c52:	be 01       	movw	r22, r28
    3c54:	80 2f       	mov	r24, r16
    3c56:	0e 94 bd 20 	call	0x417a	; 0x417a <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    3c5a:	81 30       	cpi	r24, 0x01	; 1
    3c5c:	91 05       	cpc	r25, r1
    3c5e:	39 f4       	brne	.+14     	; 0x3c6e <layer_switch_get_action+0x72>
    3c60:	01 50       	subi	r16, 0x01	; 1
    3c62:	11 09       	sbc	r17, r1
    3c64:	50 f7       	brcc	.-44     	; 0x3c3a <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3c66:	be 01       	movw	r22, r28
    3c68:	80 e0       	ldi	r24, 0x00	; 0
    3c6a:	0e 94 bd 20 	call	0x417a	; 0x417a <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    3c6e:	df 91       	pop	r29
    3c70:	cf 91       	pop	r28
    3c72:	1f 91       	pop	r17
    3c74:	0f 91       	pop	r16
    3c76:	ff 90       	pop	r15
    3c78:	ef 90       	pop	r14
    3c7a:	df 90       	pop	r13
    3c7c:	cf 90       	pop	r12
    3c7e:	08 95       	ret

00003c80 <add_key>:
    host_keyboard_send(keyboard_report);
}

/* key */
void add_key(uint8_t key)
{
    3c80:	cf 92       	push	r12
    3c82:	df 92       	push	r13
    3c84:	ef 92       	push	r14
    3c86:	ff 92       	push	r15
    3c88:	0f 93       	push	r16
    3c8a:	1f 93       	push	r17
    3c8c:	cf 93       	push	r28
    3c8e:	df 93       	push	r29
    3c90:	f8 2e       	mov	r15, r24
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    3c92:	80 91 0c 01 	lds	r24, 0x010C
    3c96:	88 23       	and	r24, r24
    3c98:	49 f1       	breq	.+82     	; 0x3cec <add_key+0x6c>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3c9a:	8f 2d       	mov	r24, r15
    3c9c:	86 95       	lsr	r24
    3c9e:	86 95       	lsr	r24
    3ca0:	86 95       	lsr	r24
    3ca2:	8f 30       	cpi	r24, 0x0F	; 15
    3ca4:	90 f4       	brcc	.+36     	; 0x3cca <add_key+0x4a>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3ca6:	e0 91 0d 01 	lds	r30, 0x010D
    3caa:	f0 91 0e 01 	lds	r31, 0x010E
    3cae:	e8 0f       	add	r30, r24
    3cb0:	f1 1d       	adc	r31, r1
    3cb2:	8f 2d       	mov	r24, r15
    3cb4:	87 70       	andi	r24, 0x07	; 7
    3cb6:	21 e0       	ldi	r18, 0x01	; 1
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	01 c0       	rjmp	.+2      	; 0x3cbe <add_key+0x3e>
    3cbc:	22 0f       	add	r18, r18
    3cbe:	8a 95       	dec	r24
    3cc0:	ea f7       	brpl	.-6      	; 0x3cbc <add_key+0x3c>
    3cc2:	81 81       	ldd	r24, Z+1	; 0x01
    3cc4:	82 2b       	or	r24, r18
    3cc6:	81 83       	std	Z+1, r24	; 0x01
    3cc8:	a3 c0       	rjmp	.+326    	; 0x3e10 <add_key+0x190>
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3cca:	80 91 bd 01 	lds	r24, 0x01BD
    3cce:	80 ff       	sbrs	r24, 0
    3cd0:	9f c0       	rjmp	.+318    	; 0x3e10 <add_key+0x190>
    3cd2:	1f 92       	push	r1
    3cd4:	ff 92       	push	r15
    3cd6:	86 e3       	ldi	r24, 0x36	; 54
    3cd8:	94 e0       	ldi	r25, 0x04	; 4
    3cda:	9f 93       	push	r25
    3cdc:	8f 93       	push	r24
    3cde:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    3ce2:	0f 90       	pop	r0
    3ce4:	0f 90       	pop	r0
    3ce6:	0f 90       	pop	r0
    3ce8:	0f 90       	pop	r0
    3cea:	92 c0       	rjmp	.+292    	; 0x3e10 <add_key+0x190>

/* local functions */
static inline void add_key_byte(uint8_t code)
{
#ifdef USB_6KRO_ENABLE
    int8_t i = cb_head;
    3cec:	e0 90 ba 01 	lds	r14, 0x01BA
    int8_t empty = -1;
    if (cb_count) {
    3cf0:	40 91 b8 01 	lds	r20, 0x01B8
    3cf4:	e0 91 0d 01 	lds	r30, 0x010D
    3cf8:	f0 91 0e 01 	lds	r31, 0x010E
    3cfc:	44 23       	and	r20, r20
    3cfe:	09 f4       	brne	.+2      	; 0x3d02 <add_key+0x82>
    3d00:	72 c0       	rjmp	.+228    	; 0x3de6 <add_key+0x166>
            }
            if (empty == -1 && keyboard_report->keys[i] == 0) {
                empty = i;
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    3d02:	20 91 b9 01 	lds	r18, 0x01B9
    3d06:	8e 2d       	mov	r24, r14
    3d08:	3f ef       	ldi	r19, 0xFF	; 255
                return;
            }
            if (empty == -1 && keyboard_report->keys[i] == 0) {
                empty = i;
            }
            i = RO_INC(i);
    3d0a:	06 e0       	ldi	r16, 0x06	; 6
    3d0c:	10 e0       	ldi	r17, 0x00	; 0
#ifdef USB_6KRO_ENABLE
    int8_t i = cb_head;
    int8_t empty = -1;
    if (cb_count) {
        do {
            if (keyboard_report->keys[i] == code) {
    3d0e:	a8 2f       	mov	r26, r24
    3d10:	bb 27       	eor	r27, r27
    3d12:	a7 fd       	sbrc	r26, 7
    3d14:	b0 95       	com	r27
    3d16:	ef 01       	movw	r28, r30
    3d18:	ca 0f       	add	r28, r26
    3d1a:	db 1f       	adc	r29, r27
    3d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d1e:	9f 15       	cp	r25, r15
    3d20:	09 f4       	brne	.+2      	; 0x3d24 <add_key+0xa4>
    3d22:	76 c0       	rjmp	.+236    	; 0x3e10 <add_key+0x190>
                return;
            }
            if (empty == -1 && keyboard_report->keys[i] == 0) {
    3d24:	3f 3f       	cpi	r19, 0xFF	; 255
    3d26:	19 f4       	brne	.+6      	; 0x3d2e <add_key+0xae>
    3d28:	91 11       	cpse	r25, r1
    3d2a:	01 c0       	rjmp	.+2      	; 0x3d2e <add_key+0xae>
                empty = i;
    3d2c:	38 2f       	mov	r19, r24
            }
            i = RO_INC(i);
    3d2e:	cd 01       	movw	r24, r26
    3d30:	01 96       	adiw	r24, 0x01	; 1
    3d32:	c6 e0       	ldi	r28, 0x06	; 6
    3d34:	d0 e0       	ldi	r29, 0x00	; 0
    3d36:	b8 01       	movw	r22, r16
    3d38:	0e 94 fe 33 	call	0x67fc	; 0x67fc <__divmodhi4>
        } while (i != cb_tail);
    3d3c:	82 13       	cpse	r24, r18
    3d3e:	e7 cf       	rjmp	.-50     	; 0x3d0e <add_key+0x8e>
        if (i == cb_tail) {
            if (cb_tail == cb_head) {
    3d40:	2e 11       	cpse	r18, r14
    3d42:	51 c0       	rjmp	.+162    	; 0x3de6 <add_key+0x166>
                // buffer is full
                if (empty == -1) {
    3d44:	3f 3f       	cpi	r19, 0xFF	; 255
    3d46:	71 f4       	brne	.+28     	; 0x3d64 <add_key+0xe4>
                    // pop head when has no empty space
                    cb_head = RO_INC(cb_head);
    3d48:	82 2f       	mov	r24, r18
    3d4a:	99 27       	eor	r25, r25
    3d4c:	87 fd       	sbrc	r24, 7
    3d4e:	90 95       	com	r25
    3d50:	01 96       	adiw	r24, 0x01	; 1
    3d52:	be 01       	movw	r22, r28
    3d54:	0e 94 fe 33 	call	0x67fc	; 0x67fc <__divmodhi4>
    3d58:	80 93 ba 01 	sts	0x01BA, r24
                    cb_count--;
    3d5c:	41 50       	subi	r20, 0x01	; 1
    3d5e:	40 93 b8 01 	sts	0x01B8, r20
    3d62:	41 c0       	rjmp	.+130    	; 0x3de6 <add_key+0x166>
                }
                else {
                    // left shift when has empty space
                    uint8_t offset = 1;
                    i = RO_INC(empty);
    3d64:	83 2f       	mov	r24, r19
    3d66:	99 27       	eor	r25, r25
    3d68:	87 fd       	sbrc	r24, 7
    3d6a:	90 95       	com	r25
    3d6c:	01 96       	adiw	r24, 0x01	; 1
    3d6e:	be 01       	movw	r22, r28
    3d70:	0e 94 fe 33 	call	0x67fc	; 0x67fc <__divmodhi4>
                    cb_head = RO_INC(cb_head);
                    cb_count--;
                }
                else {
                    // left shift when has empty space
                    uint8_t offset = 1;
    3d74:	ee 24       	eor	r14, r14
    3d76:	e3 94       	inc	r14
                    i = RO_INC(empty);
                    do {
                        if (keyboard_report->keys[i] != 0) {
                            keyboard_report->keys[empty] = keyboard_report->keys[i];
                            keyboard_report->keys[i] = 0;
                            empty = RO_INC(empty);
    3d78:	c6 e0       	ldi	r28, 0x06	; 6
    3d7a:	d0 e0       	ldi	r29, 0x00	; 0
                else {
                    // left shift when has empty space
                    uint8_t offset = 1;
                    i = RO_INC(empty);
                    do {
                        if (keyboard_report->keys[i] != 0) {
    3d7c:	08 2f       	mov	r16, r24
    3d7e:	11 27       	eor	r17, r17
    3d80:	07 fd       	sbrc	r16, 7
    3d82:	10 95       	com	r17
    3d84:	6f 01       	movw	r12, r30
    3d86:	c0 0e       	add	r12, r16
    3d88:	d1 1e       	adc	r13, r17
    3d8a:	d6 01       	movw	r26, r12
    3d8c:	12 96       	adiw	r26, 0x02	; 2
    3d8e:	6c 91       	ld	r22, X
    3d90:	66 23       	and	r22, r22
    3d92:	a1 f0       	breq	.+40     	; 0x3dbc <add_key+0x13c>
                            keyboard_report->keys[empty] = keyboard_report->keys[i];
    3d94:	43 2f       	mov	r20, r19
    3d96:	55 27       	eor	r21, r21
    3d98:	47 fd       	sbrc	r20, 7
    3d9a:	50 95       	com	r21
    3d9c:	cf 01       	movw	r24, r30
    3d9e:	84 0f       	add	r24, r20
    3da0:	95 1f       	adc	r25, r21
    3da2:	dc 01       	movw	r26, r24
    3da4:	12 96       	adiw	r26, 0x02	; 2
    3da6:	6c 93       	st	X, r22
                            keyboard_report->keys[i] = 0;
    3da8:	d6 01       	movw	r26, r12
    3daa:	12 96       	adiw	r26, 0x02	; 2
    3dac:	1c 92       	st	X, r1
                            empty = RO_INC(empty);
    3dae:	ca 01       	movw	r24, r20
    3db0:	01 96       	adiw	r24, 0x01	; 1
    3db2:	be 01       	movw	r22, r28
    3db4:	0e 94 fe 33 	call	0x67fc	; 0x67fc <__divmodhi4>
    3db8:	38 2f       	mov	r19, r24
    3dba:	01 c0       	rjmp	.+2      	; 0x3dbe <add_key+0x13e>
                        }
                        else {
                            offset++;
    3dbc:	e3 94       	inc	r14
                        }
                        i = RO_INC(i);
    3dbe:	c8 01       	movw	r24, r16
    3dc0:	01 96       	adiw	r24, 0x01	; 1
    3dc2:	be 01       	movw	r22, r28
    3dc4:	0e 94 fe 33 	call	0x67fc	; 0x67fc <__divmodhi4>
                    } while (i != cb_tail);
    3dc8:	82 13       	cpse	r24, r18
    3dca:	d8 cf       	rjmp	.-80     	; 0x3d7c <add_key+0xfc>
                    cb_tail = RO_SUB(cb_tail, offset);
    3dcc:	82 2f       	mov	r24, r18
    3dce:	99 27       	eor	r25, r25
    3dd0:	87 fd       	sbrc	r24, 7
    3dd2:	90 95       	com	r25
    3dd4:	8e 19       	sub	r24, r14
    3dd6:	91 09       	sbc	r25, r1
    3dd8:	06 96       	adiw	r24, 0x06	; 6
    3dda:	66 e0       	ldi	r22, 0x06	; 6
    3ddc:	70 e0       	ldi	r23, 0x00	; 0
    3dde:	0e 94 fe 33 	call	0x67fc	; 0x67fc <__divmodhi4>
    3de2:	80 93 b9 01 	sts	0x01B9, r24
                }
            }
        }
    }
    // add to tail
    keyboard_report->keys[cb_tail] = code;
    3de6:	20 91 b9 01 	lds	r18, 0x01B9
    3dea:	33 27       	eor	r19, r19
    3dec:	27 fd       	sbrc	r18, 7
    3dee:	30 95       	com	r19
    3df0:	e2 0f       	add	r30, r18
    3df2:	f3 1f       	adc	r31, r19
    3df4:	f2 82       	std	Z+2, r15	; 0x02
    cb_tail = RO_INC(cb_tail);
    3df6:	c9 01       	movw	r24, r18
    3df8:	01 96       	adiw	r24, 0x01	; 1
    3dfa:	66 e0       	ldi	r22, 0x06	; 6
    3dfc:	70 e0       	ldi	r23, 0x00	; 0
    3dfe:	0e 94 fe 33 	call	0x67fc	; 0x67fc <__divmodhi4>
    3e02:	80 93 b9 01 	sts	0x01B9, r24
    cb_count++;
    3e06:	80 91 b8 01 	lds	r24, 0x01B8
    3e0a:	8f 5f       	subi	r24, 0xFF	; 255
    3e0c:	80 93 b8 01 	sts	0x01B8, r24
        add_key_bit(key);
        return;
    }
#endif
    add_key_byte(key);
}
    3e10:	df 91       	pop	r29
    3e12:	cf 91       	pop	r28
    3e14:	1f 91       	pop	r17
    3e16:	0f 91       	pop	r16
    3e18:	ff 90       	pop	r15
    3e1a:	ef 90       	pop	r14
    3e1c:	df 90       	pop	r13
    3e1e:	cf 90       	pop	r12
    3e20:	08 95       	ret

00003e22 <del_key>:

void del_key(uint8_t key)
{
    3e22:	df 92       	push	r13
    3e24:	ef 92       	push	r14
    3e26:	ff 92       	push	r15
    3e28:	0f 93       	push	r16
    3e2a:	1f 93       	push	r17
    3e2c:	cf 93       	push	r28
    3e2e:	df 93       	push	r29
    3e30:	48 2f       	mov	r20, r24
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    3e32:	80 91 0c 01 	lds	r24, 0x010C
    3e36:	88 23       	and	r24, r24
    3e38:	51 f1       	breq	.+84     	; 0x3e8e <del_key+0x6c>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3e3a:	84 2f       	mov	r24, r20
    3e3c:	86 95       	lsr	r24
    3e3e:	86 95       	lsr	r24
    3e40:	86 95       	lsr	r24
    3e42:	8f 30       	cpi	r24, 0x0F	; 15
    3e44:	98 f4       	brcc	.+38     	; 0x3e6c <del_key+0x4a>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    3e46:	e0 91 0d 01 	lds	r30, 0x010D
    3e4a:	f0 91 0e 01 	lds	r31, 0x010E
    3e4e:	e8 0f       	add	r30, r24
    3e50:	f1 1d       	adc	r31, r1
    3e52:	47 70       	andi	r20, 0x07	; 7
    3e54:	21 e0       	ldi	r18, 0x01	; 1
    3e56:	30 e0       	ldi	r19, 0x00	; 0
    3e58:	04 2e       	mov	r0, r20
    3e5a:	01 c0       	rjmp	.+2      	; 0x3e5e <del_key+0x3c>
    3e5c:	22 0f       	add	r18, r18
    3e5e:	0a 94       	dec	r0
    3e60:	ea f7       	brpl	.-6      	; 0x3e5c <del_key+0x3a>
    3e62:	20 95       	com	r18
    3e64:	81 81       	ldd	r24, Z+1	; 0x01
    3e66:	28 23       	and	r18, r24
    3e68:	21 83       	std	Z+1, r18	; 0x01
    3e6a:	6f c0       	rjmp	.+222    	; 0x3f4a <del_key+0x128>
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3e6c:	80 91 bd 01 	lds	r24, 0x01BD
    3e70:	80 ff       	sbrs	r24, 0
    3e72:	6b c0       	rjmp	.+214    	; 0x3f4a <del_key+0x128>
    3e74:	1f 92       	push	r1
    3e76:	4f 93       	push	r20
    3e78:	88 e1       	ldi	r24, 0x18	; 24
    3e7a:	94 e0       	ldi	r25, 0x04	; 4
    3e7c:	9f 93       	push	r25
    3e7e:	8f 93       	push	r24
    3e80:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    3e84:	0f 90       	pop	r0
    3e86:	0f 90       	pop	r0
    3e88:	0f 90       	pop	r0
    3e8a:	0f 90       	pop	r0
    3e8c:	5e c0       	rjmp	.+188    	; 0x3f4a <del_key+0x128>
}

static inline void del_key_byte(uint8_t code)
{
#ifdef USB_6KRO_ENABLE
    uint8_t i = cb_head;
    3e8e:	e0 91 ba 01 	lds	r30, 0x01BA
    if (cb_count) {
    3e92:	d0 90 b8 01 	lds	r13, 0x01B8
    3e96:	dd 20       	and	r13, r13
    3e98:	09 f4       	brne	.+2      	; 0x3e9c <del_key+0x7a>
    3e9a:	57 c0       	rjmp	.+174    	; 0x3f4a <del_key+0x128>
        do {
            if (keyboard_report->keys[i] == code) {
    3e9c:	c0 91 0d 01 	lds	r28, 0x010D
    3ea0:	d0 91 0e 01 	lds	r29, 0x010E
                    } while (cb_tail != cb_head);
                }
                break;
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    3ea4:	00 91 b9 01 	lds	r16, 0x01B9
    3ea8:	11 27       	eor	r17, r17
    3eaa:	07 fd       	sbrc	r16, 7
    3eac:	10 95       	com	r17
                        }
                    } while (cb_tail != cb_head);
                }
                break;
            }
            i = RO_INC(i);
    3eae:	86 e0       	ldi	r24, 0x06	; 6
    3eb0:	e8 2e       	mov	r14, r24
    3eb2:	f1 2c       	mov	r15, r1
{
#ifdef USB_6KRO_ENABLE
    uint8_t i = cb_head;
    if (cb_count) {
        do {
            if (keyboard_report->keys[i] == code) {
    3eb4:	f0 e0       	ldi	r31, 0x00	; 0
    3eb6:	de 01       	movw	r26, r28
    3eb8:	ae 0f       	add	r26, r30
    3eba:	bf 1f       	adc	r27, r31
    3ebc:	9d 01       	movw	r18, r26
    3ebe:	2e 5f       	subi	r18, 0xFE	; 254
    3ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec2:	12 96       	adiw	r26, 0x02	; 2
    3ec4:	8c 91       	ld	r24, X
    3ec6:	84 13       	cpse	r24, r20
    3ec8:	36 c0       	rjmp	.+108    	; 0x3f36 <del_key+0x114>
                keyboard_report->keys[i] = 0;
    3eca:	d9 01       	movw	r26, r18
    3ecc:	1c 92       	st	X, r1
                cb_count--;
    3ece:	da 94       	dec	r13
    3ed0:	d0 92 b8 01 	sts	0x01B8, r13
                if (cb_count == 0) {
    3ed4:	d1 10       	cpse	r13, r1
    3ed6:	04 c0       	rjmp	.+8      	; 0x3ee0 <del_key+0xbe>
                    // reset head and tail
                    cb_tail = cb_head = 0;
    3ed8:	10 92 ba 01 	sts	0x01BA, r1
    3edc:	10 92 b9 01 	sts	0x01B9, r1
                }
                if (i == RO_DEC(cb_tail)) {
    3ee0:	20 91 b9 01 	lds	r18, 0x01B9
    3ee4:	82 2f       	mov	r24, r18
    3ee6:	99 27       	eor	r25, r25
    3ee8:	87 fd       	sbrc	r24, 7
    3eea:	90 95       	com	r25
    3eec:	05 96       	adiw	r24, 0x05	; 5
    3eee:	66 e0       	ldi	r22, 0x06	; 6
    3ef0:	70 e0       	ldi	r23, 0x00	; 0
    3ef2:	0e 94 fe 33 	call	0x67fc	; 0x67fc <__divmodhi4>
    3ef6:	e8 17       	cp	r30, r24
    3ef8:	f9 07       	cpc	r31, r25
    3efa:	39 f5       	brne	.+78     	; 0x3f4a <del_key+0x128>
                    do {
                        cb_tail = RO_DEC(cb_tail);
                        if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
                            break;
                        }
                    } while (cb_tail != cb_head);
    3efc:	40 91 ba 01 	lds	r20, 0x01BA
                    cb_tail = cb_head = 0;
                }
                if (i == RO_DEC(cb_tail)) {
                    // left shift when next to tail
                    do {
                        cb_tail = RO_DEC(cb_tail);
    3f00:	e6 e0       	ldi	r30, 0x06	; 6
    3f02:	f0 e0       	ldi	r31, 0x00	; 0
    3f04:	82 2f       	mov	r24, r18
    3f06:	99 27       	eor	r25, r25
    3f08:	87 fd       	sbrc	r24, 7
    3f0a:	90 95       	com	r25
    3f0c:	05 96       	adiw	r24, 0x05	; 5
    3f0e:	bf 01       	movw	r22, r30
    3f10:	0e 94 fe 33 	call	0x67fc	; 0x67fc <__divmodhi4>
    3f14:	9c 01       	movw	r18, r24
                        if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
    3f16:	05 96       	adiw	r24, 0x05	; 5
    3f18:	bf 01       	movw	r22, r30
    3f1a:	0e 94 fe 33 	call	0x67fc	; 0x67fc <__divmodhi4>
    3f1e:	8c 0f       	add	r24, r28
    3f20:	9d 1f       	adc	r25, r29
    3f22:	dc 01       	movw	r26, r24
    3f24:	12 96       	adiw	r26, 0x02	; 2
    3f26:	8c 91       	ld	r24, X
    3f28:	81 11       	cpse	r24, r1
    3f2a:	02 c0       	rjmp	.+4      	; 0x3f30 <del_key+0x10e>
                            break;
                        }
                    } while (cb_tail != cb_head);
    3f2c:	24 13       	cpse	r18, r20
    3f2e:	ea cf       	rjmp	.-44     	; 0x3f04 <del_key+0xe2>
    3f30:	20 93 b9 01 	sts	0x01B9, r18
    3f34:	0a c0       	rjmp	.+20     	; 0x3f4a <del_key+0x128>
                }
                break;
            }
            i = RO_INC(i);
    3f36:	cf 01       	movw	r24, r30
    3f38:	01 96       	adiw	r24, 0x01	; 1
    3f3a:	b7 01       	movw	r22, r14
    3f3c:	0e 94 fe 33 	call	0x67fc	; 0x67fc <__divmodhi4>
    3f40:	e8 2f       	mov	r30, r24
        } while (i != cb_tail);
    3f42:	80 17       	cp	r24, r16
    3f44:	91 07       	cpc	r25, r17
    3f46:	09 f0       	breq	.+2      	; 0x3f4a <del_key+0x128>
    3f48:	b5 cf       	rjmp	.-150    	; 0x3eb4 <del_key+0x92>
        del_key_bit(key);
        return;
    }
#endif
    del_key_byte(key);
}
    3f4a:	df 91       	pop	r29
    3f4c:	cf 91       	pop	r28
    3f4e:	1f 91       	pop	r17
    3f50:	0f 91       	pop	r16
    3f52:	ff 90       	pop	r15
    3f54:	ef 90       	pop	r14
    3f56:	df 90       	pop	r13
    3f58:	08 95       	ret

00003f5a <clear_keys>:

void clear_keys(void)
{
    3f5a:	81 e0       	ldi	r24, 0x01	; 1
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3f5e:	e0 91 0d 01 	lds	r30, 0x010D
    3f62:	f0 91 0e 01 	lds	r31, 0x010E
    3f66:	e8 0f       	add	r30, r24
    3f68:	f9 1f       	adc	r31, r25
    3f6a:	10 82       	st	Z, r1
    3f6c:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3f6e:	80 31       	cpi	r24, 0x10	; 16
    3f70:	91 05       	cpc	r25, r1
    3f72:	a9 f7       	brne	.-22     	; 0x3f5e <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3f74:	08 95       	ret

00003f76 <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
    3f76:	90 91 bc 01 	lds	r25, 0x01BC
    3f7a:	98 2b       	or	r25, r24
    3f7c:	90 93 bc 01 	sts	0x01BC, r25
    3f80:	08 95       	ret

00003f82 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3f82:	80 95       	com	r24
    3f84:	90 91 bc 01 	lds	r25, 0x01BC
    3f88:	98 23       	and	r25, r24
    3f8a:	90 93 bc 01 	sts	0x01BC, r25
    3f8e:	08 95       	ret

00003f90 <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    3f90:	10 92 bc 01 	sts	0x01BC, r1
    3f94:	08 95       	ret

00003f96 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3f96:	90 91 bb 01 	lds	r25, 0x01BB
    3f9a:	98 2b       	or	r25, r24
    3f9c:	90 93 bb 01 	sts	0x01BB, r25
    3fa0:	08 95       	ret

00003fa2 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3fa2:	80 95       	com	r24
    3fa4:	90 91 bb 01 	lds	r25, 0x01BB
    3fa8:	98 23       	and	r25, r24
    3faa:	90 93 bb 01 	sts	0x01BB, r25
    3fae:	08 95       	ret

00003fb0 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3fb0:	10 92 bb 01 	sts	0x01BB, r1
    3fb4:	08 95       	ret

00003fb6 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3fb6:	80 93 a7 01 	sts	0x01A7, r24
    3fba:	08 95       	ret

00003fbc <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3fbc:	10 92 a7 01 	sts	0x01A7, r1
    3fc0:	08 95       	ret

00003fc2 <has_anykey>:
 */
uint8_t has_anykey(void)
{
#ifdef USB_6KRO_ENABLE
#ifdef NKRO_ENABLE
    if (!keyboard_nkro) {
    3fc2:	80 91 0c 01 	lds	r24, 0x010C
    3fc6:	81 11       	cpse	r24, r1
    3fc8:	03 c0       	rjmp	.+6      	; 0x3fd0 <has_anykey+0xe>
#endif
        return cb_count;
    3fca:	80 91 b8 01 	lds	r24, 0x01B8
    3fce:	08 95       	ret
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
#endif
}
    3fd0:	08 95       	ret

00003fd2 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3fd2:	e0 91 0d 01 	lds	r30, 0x010D
    3fd6:	f0 91 0e 01 	lds	r31, 0x010E
    3fda:	80 91 bc 01 	lds	r24, 0x01BC
    3fde:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3fe0:	e0 91 0d 01 	lds	r30, 0x010D
    3fe4:	f0 91 0e 01 	lds	r31, 0x010E
    3fe8:	80 81       	ld	r24, Z
    3fea:	90 91 bb 01 	lds	r25, 0x01BB
    3fee:	89 2b       	or	r24, r25
    3ff0:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3ff2:	90 91 a7 01 	lds	r25, 0x01A7
    3ff6:	99 23       	and	r25, r25
    3ff8:	61 f0       	breq	.+24     	; 0x4012 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3ffa:	e0 91 0d 01 	lds	r30, 0x010D
    3ffe:	f0 91 0e 01 	lds	r31, 0x010E
    4002:	80 81       	ld	r24, Z
    4004:	89 2b       	or	r24, r25
    4006:	80 83       	st	Z, r24
        if (has_anykey()) {
    4008:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <has_anykey>
    400c:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    400e:	10 92 a7 01 	sts	0x01A7, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    4012:	80 91 0d 01 	lds	r24, 0x010D
    4016:	90 91 0e 01 	lds	r25, 0x010E
    401a:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <host_keyboard_send>

0000401e <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    401e:	8d 3b       	cpi	r24, 0xBD	; 189
    4020:	60 f4       	brcc	.+24     	; 0x403a <keycode_to_action+0x1c>
    4022:	88 3a       	cpi	r24, 0xA8	; 168
    4024:	00 f5       	brcc	.+64     	; 0x4066 <keycode_to_action+0x48>
    4026:	85 3a       	cpi	r24, 0xA5	; 165
    4028:	a8 f4       	brcc	.+42     	; 0x4054 <keycode_to_action+0x36>
    402a:	84 30       	cpi	r24, 0x04	; 4
    402c:	88 f4       	brcc	.+34     	; 0x4050 <keycode_to_action+0x32>
    402e:	81 30       	cpi	r24, 0x01	; 1
    4030:	09 f0       	breq	.+2      	; 0x4034 <keycode_to_action+0x16>
    4032:	5b c0       	rjmp	.+182    	; 0x40ea <keycode_to_action+0xcc>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	08 95       	ret

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    403a:	80 3e       	cpi	r24, 0xE0	; 224
    403c:	08 f4       	brcc	.+2      	; 0x4040 <keycode_to_action+0x22>
    403e:	55 c0       	rjmp	.+170    	; 0x40ea <keycode_to_action+0xcc>
    4040:	88 3e       	cpi	r24, 0xE8	; 232
    4042:	30 f0       	brcs	.+12     	; 0x4050 <keycode_to_action+0x32>
    4044:	80 3f       	cpi	r24, 0xF0	; 240
    4046:	08 f4       	brcc	.+2      	; 0x404a <keycode_to_action+0x2c>
    4048:	50 c0       	rjmp	.+160    	; 0x40ea <keycode_to_action+0xcc>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	90 65       	ori	r25, 0x50	; 80
            break;
    404e:	08 95       	ret
{
    action_t action;
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    4050:	90 e0       	ldi	r25, 0x00	; 0
            break;
    4052:	08 95       	ret
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    4054:	85 3a       	cpi	r24, 0xA5	; 165
    4056:	09 f4       	brne	.+2      	; 0x405a <keycode_to_action+0x3c>
    4058:	4b c0       	rjmp	.+150    	; 0x40f0 <keycode_to_action+0xd2>
    405a:	86 3a       	cpi	r24, 0xA6	; 166
    405c:	09 f0       	breq	.+2      	; 0x4060 <keycode_to_action+0x42>
    405e:	4b c0       	rjmp	.+150    	; 0x40f6 <keycode_to_action+0xd8>
    4060:	82 e8       	ldi	r24, 0x82	; 130
    4062:	90 e4       	ldi	r25, 0x40	; 64
    4064:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    4066:	88 3a       	cpi	r24, 0xA8	; 168
    4068:	09 f4       	brne	.+2      	; 0x406c <keycode_to_action+0x4e>
    406a:	48 c0       	rjmp	.+144    	; 0x40fc <keycode_to_action+0xde>
    406c:	89 3a       	cpi	r24, 0xA9	; 169
    406e:	09 f4       	brne	.+2      	; 0x4072 <keycode_to_action+0x54>
    4070:	48 c0       	rjmp	.+144    	; 0x4102 <keycode_to_action+0xe4>
    4072:	8a 3a       	cpi	r24, 0xAA	; 170
    4074:	09 f4       	brne	.+2      	; 0x4078 <keycode_to_action+0x5a>
    4076:	48 c0       	rjmp	.+144    	; 0x4108 <keycode_to_action+0xea>
    4078:	8b 3a       	cpi	r24, 0xAB	; 171
    407a:	09 f4       	brne	.+2      	; 0x407e <keycode_to_action+0x60>
    407c:	48 c0       	rjmp	.+144    	; 0x410e <keycode_to_action+0xf0>
    407e:	8c 3a       	cpi	r24, 0xAC	; 172
    4080:	09 f4       	brne	.+2      	; 0x4084 <keycode_to_action+0x66>
    4082:	48 c0       	rjmp	.+144    	; 0x4114 <keycode_to_action+0xf6>
    4084:	8b 3b       	cpi	r24, 0xBB	; 187
    4086:	09 f4       	brne	.+2      	; 0x408a <keycode_to_action+0x6c>
    4088:	48 c0       	rjmp	.+144    	; 0x411a <keycode_to_action+0xfc>
    408a:	8c 3b       	cpi	r24, 0xBC	; 188
    408c:	09 f4       	brne	.+2      	; 0x4090 <keycode_to_action+0x72>
    408e:	48 c0       	rjmp	.+144    	; 0x4120 <keycode_to_action+0x102>
    4090:	8d 3a       	cpi	r24, 0xAD	; 173
    4092:	09 f4       	brne	.+2      	; 0x4096 <keycode_to_action+0x78>
    4094:	48 c0       	rjmp	.+144    	; 0x4126 <keycode_to_action+0x108>
    4096:	80 3b       	cpi	r24, 0xB0	; 176
    4098:	09 f4       	brne	.+2      	; 0x409c <keycode_to_action+0x7e>
    409a:	48 c0       	rjmp	.+144    	; 0x412c <keycode_to_action+0x10e>
    409c:	8e 3a       	cpi	r24, 0xAE	; 174
    409e:	09 f4       	brne	.+2      	; 0x40a2 <keycode_to_action+0x84>
    40a0:	48 c0       	rjmp	.+144    	; 0x4132 <keycode_to_action+0x114>
    40a2:	8f 3a       	cpi	r24, 0xAF	; 175
    40a4:	09 f4       	brne	.+2      	; 0x40a8 <keycode_to_action+0x8a>
    40a6:	48 c0       	rjmp	.+144    	; 0x4138 <keycode_to_action+0x11a>
    40a8:	81 3b       	cpi	r24, 0xB1	; 177
    40aa:	09 f4       	brne	.+2      	; 0x40ae <keycode_to_action+0x90>
    40ac:	48 c0       	rjmp	.+144    	; 0x413e <keycode_to_action+0x120>
    40ae:	82 3b       	cpi	r24, 0xB2	; 178
    40b0:	09 f4       	brne	.+2      	; 0x40b4 <keycode_to_action+0x96>
    40b2:	48 c0       	rjmp	.+144    	; 0x4144 <keycode_to_action+0x126>
    40b4:	83 3b       	cpi	r24, 0xB3	; 179
    40b6:	09 f4       	brne	.+2      	; 0x40ba <keycode_to_action+0x9c>
    40b8:	48 c0       	rjmp	.+144    	; 0x414a <keycode_to_action+0x12c>
    40ba:	84 3b       	cpi	r24, 0xB4	; 180
    40bc:	09 f4       	brne	.+2      	; 0x40c0 <keycode_to_action+0xa2>
    40be:	48 c0       	rjmp	.+144    	; 0x4150 <keycode_to_action+0x132>
    40c0:	85 3b       	cpi	r24, 0xB5	; 181
    40c2:	09 f4       	brne	.+2      	; 0x40c6 <keycode_to_action+0xa8>
    40c4:	48 c0       	rjmp	.+144    	; 0x4156 <keycode_to_action+0x138>
    40c6:	86 3b       	cpi	r24, 0xB6	; 182
    40c8:	09 f4       	brne	.+2      	; 0x40cc <keycode_to_action+0xae>
    40ca:	48 c0       	rjmp	.+144    	; 0x415c <keycode_to_action+0x13e>
    40cc:	87 3b       	cpi	r24, 0xB7	; 183
    40ce:	09 f4       	brne	.+2      	; 0x40d2 <keycode_to_action+0xb4>
    40d0:	48 c0       	rjmp	.+144    	; 0x4162 <keycode_to_action+0x144>
    40d2:	88 3b       	cpi	r24, 0xB8	; 184
    40d4:	09 f4       	brne	.+2      	; 0x40d8 <keycode_to_action+0xba>
    40d6:	48 c0       	rjmp	.+144    	; 0x4168 <keycode_to_action+0x14a>
    40d8:	89 3b       	cpi	r24, 0xB9	; 185
    40da:	09 f4       	brne	.+2      	; 0x40de <keycode_to_action+0xc0>
    40dc:	48 c0       	rjmp	.+144    	; 0x416e <keycode_to_action+0x150>
    40de:	8a 3b       	cpi	r24, 0xBA	; 186
    40e0:	09 f0       	breq	.+2      	; 0x40e4 <keycode_to_action+0xc6>
    40e2:	48 c0       	rjmp	.+144    	; 0x4174 <keycode_to_action+0x156>
    40e4:	8a e2       	ldi	r24, 0x2A	; 42
    40e6:	96 e4       	ldi	r25, 0x46	; 70
    40e8:	08 95       	ret
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        default:
            action.code = ACTION_NO;
    40ea:	80 e0       	ldi	r24, 0x00	; 0
    40ec:	90 e0       	ldi	r25, 0x00	; 0
    40ee:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    40f0:	81 e8       	ldi	r24, 0x81	; 129
    40f2:	90 e4       	ldi	r25, 0x40	; 64
    40f4:	08 95       	ret
    40f6:	83 e8       	ldi	r24, 0x83	; 131
    40f8:	90 e4       	ldi	r25, 0x40	; 64
    40fa:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    40fc:	82 ee       	ldi	r24, 0xE2	; 226
    40fe:	94 e4       	ldi	r25, 0x44	; 68
    4100:	08 95       	ret
    4102:	89 ee       	ldi	r24, 0xE9	; 233
    4104:	94 e4       	ldi	r25, 0x44	; 68
    4106:	08 95       	ret
    4108:	8a ee       	ldi	r24, 0xEA	; 234
    410a:	94 e4       	ldi	r25, 0x44	; 68
    410c:	08 95       	ret
    410e:	85 eb       	ldi	r24, 0xB5	; 181
    4110:	94 e4       	ldi	r25, 0x44	; 68
    4112:	08 95       	ret
    4114:	86 eb       	ldi	r24, 0xB6	; 182
    4116:	94 e4       	ldi	r25, 0x44	; 68
    4118:	08 95       	ret
    411a:	83 eb       	ldi	r24, 0xB3	; 179
    411c:	94 e4       	ldi	r25, 0x44	; 68
    411e:	08 95       	ret
    4120:	84 eb       	ldi	r24, 0xB4	; 180
    4122:	94 e4       	ldi	r25, 0x44	; 68
    4124:	08 95       	ret
    4126:	87 eb       	ldi	r24, 0xB7	; 183
    4128:	94 e4       	ldi	r25, 0x44	; 68
    412a:	08 95       	ret
    412c:	8c ec       	ldi	r24, 0xCC	; 204
    412e:	94 e4       	ldi	r25, 0x44	; 68
    4130:	08 95       	ret
    4132:	8d ec       	ldi	r24, 0xCD	; 205
    4134:	94 e4       	ldi	r25, 0x44	; 68
    4136:	08 95       	ret
    4138:	83 e8       	ldi	r24, 0x83	; 131
    413a:	95 e4       	ldi	r25, 0x45	; 69
    413c:	08 95       	ret
    413e:	8a e8       	ldi	r24, 0x8A	; 138
    4140:	95 e4       	ldi	r25, 0x45	; 69
    4142:	08 95       	ret
    4144:	82 e9       	ldi	r24, 0x92	; 146
    4146:	95 e4       	ldi	r25, 0x45	; 69
    4148:	08 95       	ret
    414a:	84 e9       	ldi	r24, 0x94	; 148
    414c:	95 e4       	ldi	r25, 0x45	; 69
    414e:	08 95       	ret
    4150:	81 e2       	ldi	r24, 0x21	; 33
    4152:	96 e4       	ldi	r25, 0x46	; 70
    4154:	08 95       	ret
    4156:	83 e2       	ldi	r24, 0x23	; 35
    4158:	96 e4       	ldi	r25, 0x46	; 70
    415a:	08 95       	ret
    415c:	84 e2       	ldi	r24, 0x24	; 36
    415e:	96 e4       	ldi	r25, 0x46	; 70
    4160:	08 95       	ret
    4162:	85 e2       	ldi	r24, 0x25	; 37
    4164:	96 e4       	ldi	r25, 0x46	; 70
    4166:	08 95       	ret
    4168:	86 e2       	ldi	r24, 0x26	; 38
    416a:	96 e4       	ldi	r25, 0x46	; 70
    416c:	08 95       	ret
    416e:	87 e2       	ldi	r24, 0x27	; 39
    4170:	96 e4       	ldi	r25, 0x46	; 70
    4172:	08 95       	ret
    4174:	80 e0       	ldi	r24, 0x00	; 0
    4176:	94 e4       	ldi	r25, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    4178:	08 95       	ret

0000417a <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    417a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <keymap_key_to_keycode>
    switch (keycode) {
    417e:	80 3e       	cpi	r24, 0xE0	; 224
    4180:	a8 f4       	brcc	.+42     	; 0x41ac <action_for_key+0x32>
    4182:	80 3c       	cpi	r24, 0xC0	; 192
    4184:	00 f5       	brcc	.+64     	; 0x41c6 <action_for_key+0x4c>
    4186:	81 33       	cpi	r24, 0x31	; 49
    4188:	09 f4       	brne	.+2      	; 0x418c <action_for_key+0x12>
    418a:	5c c0       	rjmp	.+184    	; 0x4244 <action_for_key+0xca>
    418c:	38 f4       	brcc	.+14     	; 0x419c <action_for_key+0x22>
    418e:	89 32       	cpi	r24, 0x29	; 41
    4190:	09 f4       	brne	.+2      	; 0x4194 <action_for_key+0x1a>
    4192:	52 c0       	rjmp	.+164    	; 0x4238 <action_for_key+0xbe>
    4194:	8a 32       	cpi	r24, 0x2A	; 42
    4196:	09 f4       	brne	.+2      	; 0x419a <action_for_key+0x20>
    4198:	5b c0       	rjmp	.+182    	; 0x4250 <action_for_key+0xd6>
    419a:	5f c0       	rjmp	.+190    	; 0x425a <action_for_key+0xe0>
    419c:	89 33       	cpi	r24, 0x39	; 57
    419e:	b1 f0       	breq	.+44     	; 0x41cc <action_for_key+0x52>
    41a0:	82 38       	cpi	r24, 0x82	; 130
    41a2:	a1 f0       	breq	.+40     	; 0x41cc <action_for_key+0x52>
    41a4:	85 33       	cpi	r24, 0x35	; 53
    41a6:	09 f4       	brne	.+2      	; 0x41aa <action_for_key+0x30>
    41a8:	41 c0       	rjmp	.+130    	; 0x422c <action_for_key+0xb2>
    41aa:	57 c0       	rjmp	.+174    	; 0x425a <action_for_key+0xe0>
    41ac:	83 3e       	cpi	r24, 0xE3	; 227
    41ae:	41 f1       	breq	.+80     	; 0x4200 <action_for_key+0x86>
    41b0:	28 f4       	brcc	.+10     	; 0x41bc <action_for_key+0x42>
    41b2:	80 3e       	cpi	r24, 0xE0	; 224
    41b4:	99 f0       	breq	.+38     	; 0x41dc <action_for_key+0x62>
    41b6:	82 3e       	cpi	r24, 0xE2	; 226
    41b8:	b9 f0       	breq	.+46     	; 0x41e8 <action_for_key+0x6e>
    41ba:	4f c0       	rjmp	.+158    	; 0x425a <action_for_key+0xe0>
    41bc:	86 3e       	cpi	r24, 0xE6	; 230
    41be:	31 f1       	breq	.+76     	; 0x420c <action_for_key+0x92>
    41c0:	87 3e       	cpi	r24, 0xE7	; 231
    41c2:	71 f1       	breq	.+92     	; 0x4220 <action_for_key+0xa6>
    41c4:	4a c0       	rjmp	.+148    	; 0x425a <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    41c6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <keymap_fn_to_action>
    41ca:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    41cc:	90 91 00 02 	lds	r25, 0x0200
    41d0:	90 fd       	sbrc	r25, 0
    41d2:	02 c0       	rjmp	.+4      	; 0x41d8 <action_for_key+0x5e>
    41d4:	91 ff       	sbrs	r25, 1
    41d6:	41 c0       	rjmp	.+130    	; 0x425a <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    41d8:	80 ee       	ldi	r24, 0xE0	; 224
    41da:	3f c0       	rjmp	.+126    	; 0x425a <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    41dc:	80 91 00 02 	lds	r24, 0x0200
    41e0:	80 ff       	sbrs	r24, 0
    41e2:	fa cf       	rjmp	.-12     	; 0x41d8 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    41e4:	89 e3       	ldi	r24, 0x39	; 57
    41e6:	39 c0       	rjmp	.+114    	; 0x425a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    41e8:	80 91 00 02 	lds	r24, 0x0200
    41ec:	82 ff       	sbrs	r24, 2
    41ee:	0c c0       	rjmp	.+24     	; 0x4208 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    41f0:	80 91 00 02 	lds	r24, 0x0200
    41f4:	84 ff       	sbrs	r24, 4
    41f6:	02 c0       	rjmp	.+4      	; 0x41fc <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    41f8:	80 e0       	ldi	r24, 0x00	; 0
    41fa:	2f c0       	rjmp	.+94     	; 0x425a <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    41fc:	83 ee       	ldi	r24, 0xE3	; 227
    41fe:	2d c0       	rjmp	.+90     	; 0x425a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    4200:	80 91 00 02 	lds	r24, 0x0200
    4204:	82 ff       	sbrs	r24, 2
    4206:	f4 cf       	rjmp	.-24     	; 0x41f0 <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    4208:	82 ee       	ldi	r24, 0xE2	; 226
    420a:	27 c0       	rjmp	.+78     	; 0x425a <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    420c:	80 91 00 02 	lds	r24, 0x0200
    4210:	83 ff       	sbrs	r24, 3
    4212:	0a c0       	rjmp	.+20     	; 0x4228 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    4214:	80 91 00 02 	lds	r24, 0x0200
    4218:	84 fd       	sbrc	r24, 4
    421a:	ee cf       	rjmp	.-36     	; 0x41f8 <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    421c:	87 ee       	ldi	r24, 0xE7	; 231
    421e:	1d c0       	rjmp	.+58     	; 0x425a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    4220:	80 91 00 02 	lds	r24, 0x0200
    4224:	83 ff       	sbrs	r24, 3
    4226:	f6 cf       	rjmp	.-20     	; 0x4214 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    4228:	86 ee       	ldi	r24, 0xE6	; 230
    422a:	17 c0       	rjmp	.+46     	; 0x425a <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    422c:	80 91 00 02 	lds	r24, 0x0200
    4230:	85 ff       	sbrs	r24, 5
    4232:	06 c0       	rjmp	.+12     	; 0x4240 <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    4234:	89 e2       	ldi	r24, 0x29	; 41
    4236:	11 c0       	rjmp	.+34     	; 0x425a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    4238:	80 91 00 02 	lds	r24, 0x0200
    423c:	85 ff       	sbrs	r24, 5
    423e:	fa cf       	rjmp	.-12     	; 0x4234 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    4240:	85 e3       	ldi	r24, 0x35	; 53
    4242:	0b c0       	rjmp	.+22     	; 0x425a <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    4244:	80 91 00 02 	lds	r24, 0x0200
    4248:	86 ff       	sbrs	r24, 6
    424a:	06 c0       	rjmp	.+12     	; 0x4258 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    424c:	8a e2       	ldi	r24, 0x2A	; 42
    424e:	05 c0       	rjmp	.+10     	; 0x425a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    4250:	80 91 00 02 	lds	r24, 0x0200
    4254:	86 ff       	sbrs	r24, 6
    4256:	fa cf       	rjmp	.-12     	; 0x424c <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    4258:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    425a:	0e 94 0f 20 	call	0x401e	; 0x401e <keycode_to_action>
    }
}
    425e:	08 95       	ret

00004260 <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    4260:	80 e0       	ldi	r24, 0x00	; 0
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	08 95       	ret

00004266 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    4266:	08 95       	ret

00004268 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    4268:	90 93 39 01 	sts	0x0139, r25
    426c:	80 93 38 01 	sts	0x0138, r24
    4270:	08 95       	ret

00004272 <biton32>:
    if (bits >> 1) { bits >>= 1; n += 1;}
    return n;
}

uint8_t biton32(uint32_t bits)
{
    4272:	cf 92       	push	r12
    4274:	df 92       	push	r13
    4276:	ef 92       	push	r14
    4278:	ff 92       	push	r15
    427a:	0f 93       	push	r16
    427c:	1f 93       	push	r17
    uint8_t n = 0;
    if (bits >>16) { bits >>=16; n +=16;}
    427e:	6c 01       	movw	r12, r24
    4280:	ee 24       	eor	r14, r14
    4282:	ff 24       	eor	r15, r15
    4284:	c1 14       	cp	r12, r1
    4286:	d1 04       	cpc	r13, r1
    4288:	e1 04       	cpc	r14, r1
    428a:	f1 04       	cpc	r15, r1
    428c:	21 f4       	brne	.+8      	; 0x4296 <biton32+0x24>
    428e:	6b 01       	movw	r12, r22
    4290:	7c 01       	movw	r14, r24
    return n;
}

uint8_t biton32(uint32_t bits)
{
    uint8_t n = 0;
    4292:	80 e0       	ldi	r24, 0x00	; 0
    4294:	01 c0       	rjmp	.+2      	; 0x4298 <biton32+0x26>
    if (bits >>16) { bits >>=16; n +=16;}
    4296:	80 e1       	ldi	r24, 0x10	; 16
    if (bits >> 8) { bits >>= 8; n += 8;}
    4298:	33 27       	eor	r19, r19
    429a:	2f 2d       	mov	r18, r15
    429c:	1e 2d       	mov	r17, r14
    429e:	0d 2d       	mov	r16, r13
    42a0:	01 15       	cp	r16, r1
    42a2:	11 05       	cpc	r17, r1
    42a4:	21 05       	cpc	r18, r1
    42a6:	31 05       	cpc	r19, r1
    42a8:	19 f0       	breq	.+6      	; 0x42b0 <biton32+0x3e>
    42aa:	88 5f       	subi	r24, 0xF8	; 248
    42ac:	68 01       	movw	r12, r16
    42ae:	79 01       	movw	r14, r18
    if (bits >> 4) { bits >>= 4; n += 4;}
    42b0:	97 01       	movw	r18, r14
    42b2:	86 01       	movw	r16, r12
    42b4:	a4 e0       	ldi	r26, 0x04	; 4
    42b6:	36 95       	lsr	r19
    42b8:	27 95       	ror	r18
    42ba:	17 95       	ror	r17
    42bc:	07 95       	ror	r16
    42be:	aa 95       	dec	r26
    42c0:	d1 f7       	brne	.-12     	; 0x42b6 <biton32+0x44>
    42c2:	01 15       	cp	r16, r1
    42c4:	11 05       	cpc	r17, r1
    42c6:	21 05       	cpc	r18, r1
    42c8:	31 05       	cpc	r19, r1
    42ca:	19 f0       	breq	.+6      	; 0x42d2 <biton32+0x60>
    42cc:	8c 5f       	subi	r24, 0xFC	; 252
    42ce:	68 01       	movw	r12, r16
    42d0:	79 01       	movw	r14, r18
    if (bits >> 2) { bits >>= 2; n += 2;}
    42d2:	97 01       	movw	r18, r14
    42d4:	86 01       	movw	r16, r12
    42d6:	f2 e0       	ldi	r31, 0x02	; 2
    42d8:	36 95       	lsr	r19
    42da:	27 95       	ror	r18
    42dc:	17 95       	ror	r17
    42de:	07 95       	ror	r16
    42e0:	fa 95       	dec	r31
    42e2:	d1 f7       	brne	.-12     	; 0x42d8 <biton32+0x66>
    42e4:	01 15       	cp	r16, r1
    42e6:	11 05       	cpc	r17, r1
    42e8:	21 05       	cpc	r18, r1
    42ea:	31 05       	cpc	r19, r1
    42ec:	19 f0       	breq	.+6      	; 0x42f4 <biton32+0x82>
    42ee:	8e 5f       	subi	r24, 0xFE	; 254
    42f0:	68 01       	movw	r12, r16
    42f2:	79 01       	movw	r14, r18
    if (bits >> 1) { bits >>= 1; n += 1;}
    42f4:	b7 01       	movw	r22, r14
    42f6:	a6 01       	movw	r20, r12
    42f8:	76 95       	lsr	r23
    42fa:	67 95       	ror	r22
    42fc:	57 95       	ror	r21
    42fe:	47 95       	ror	r20
    4300:	45 2b       	or	r20, r21
    4302:	46 2b       	or	r20, r22
    4304:	47 2b       	or	r20, r23
    4306:	09 f0       	breq	.+2      	; 0x430a <biton32+0x98>
    4308:	8f 5f       	subi	r24, 0xFF	; 255
    return n;
}
    430a:	1f 91       	pop	r17
    430c:	0f 91       	pop	r16
    430e:	ff 90       	pop	r15
    4310:	ef 90       	pop	r14
    4312:	df 90       	pop	r13
    4314:	cf 90       	pop	r12
    4316:	08 95       	ret

00004318 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    4318:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    431a:	98 2f       	mov	r25, r24
    431c:	9c 7c       	andi	r25, 0xCC	; 204
    431e:	96 95       	lsr	r25
    4320:	96 95       	lsr	r25
    4322:	83 73       	andi	r24, 0x33	; 51
    4324:	44 e0       	ldi	r20, 0x04	; 4
    4326:	84 9f       	mul	r24, r20
    4328:	90 01       	movw	r18, r0
    432a:	11 24       	eor	r1, r1
    432c:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    432e:	89 2f       	mov	r24, r25
    4330:	8a 7a       	andi	r24, 0xAA	; 170
    4332:	86 95       	lsr	r24
    4334:	95 75       	andi	r25, 0x55	; 85
    4336:	99 0f       	add	r25, r25
    return bits;
}
    4338:	89 2b       	or	r24, r25
    433a:	08 95       	ret

0000433c <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    433c:	1f 93       	push	r17
    433e:	cf 93       	push	r28
    4340:	df 93       	push	r29
    4342:	1f 92       	push	r1
    4344:	cd b7       	in	r28, 0x3d	; 61
    4346:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    4348:	99 83       	std	Y+1, r25	; 0x01
    434a:	0e 94 8c 21 	call	0x4318	; 0x4318 <bitrev>
    434e:	18 2f       	mov	r17, r24
    4350:	99 81       	ldd	r25, Y+1	; 0x01
    4352:	89 2f       	mov	r24, r25
    4354:	0e 94 8c 21 	call	0x4318	; 0x4318 <bitrev>
    4358:	21 2f       	mov	r18, r17
    435a:	30 e0       	ldi	r19, 0x00	; 0
    435c:	32 2f       	mov	r19, r18
    435e:	22 27       	eor	r18, r18
    return bits;
}
    4360:	a9 01       	movw	r20, r18
    4362:	48 2b       	or	r20, r24
    4364:	ca 01       	movw	r24, r20
    4366:	0f 90       	pop	r0
    4368:	df 91       	pop	r29
    436a:	cf 91       	pop	r28
    436c:	1f 91       	pop	r17
    436e:	08 95       	ret

00004370 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    4370:	80 91 05 02 	lds	r24, 0x0205
    4374:	84 30       	cpi	r24, 0x04	; 4
    4376:	19 f1       	breq	.+70     	; 0x43be <suspend_power_down+0x4e>
#endif
    wdt_timeout = wdto;
    4378:	10 92 be 01 	sts	0x01BE, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    437c:	20 e4       	ldi	r18, 0x40	; 64
    437e:	88 e1       	ldi	r24, 0x18	; 24
    4380:	90 e0       	ldi	r25, 0x00	; 0
    4382:	0f b6       	in	r0, 0x3f	; 63
    4384:	f8 94       	cli
    4386:	a8 95       	wdr
    4388:	80 93 60 00 	sts	0x0060, r24
    438c:	0f be       	out	0x3f, r0	; 63
    438e:	20 93 60 00 	sts	0x0060, r18
#ifdef SUSPEND_ACTION
    suspend_power_down_action();
#endif

#ifdef SOFTPWM_LED_ENABLE
    softpwm_led_disable();
    4392:	0e 94 25 2e 	call	0x5c4a	; 0x5c4a <softpwm_led_disable>
#endif

    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    4396:	83 b7       	in	r24, 0x33	; 51
    4398:	81 7f       	andi	r24, 0xF1	; 241
    439a:	84 60       	ori	r24, 0x04	; 4
    439c:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    439e:	83 b7       	in	r24, 0x33	; 51
    43a0:	81 60       	ori	r24, 0x01	; 1
    43a2:	83 bf       	out	0x33, r24	; 51
    sei();
    43a4:	78 94       	sei
    sleep_cpu();
    43a6:	88 95       	sleep
    sleep_disable();
    43a8:	83 b7       	in	r24, 0x33	; 51
    43aa:	8e 7f       	andi	r24, 0xFE	; 254
    43ac:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    43ae:	88 e1       	ldi	r24, 0x18	; 24
    43b0:	0f b6       	in	r0, 0x3f	; 63
    43b2:	f8 94       	cli
    43b4:	80 93 60 00 	sts	0x0060, r24
    43b8:	10 92 60 00 	sts	0x0060, r1
    43bc:	0f be       	out	0x3f, r0	; 63
    43be:	08 95       	ret

000043c0 <suspend_wakeup_condition>:
{
    power_down(WDTO_15MS);
}

bool suspend_wakeup_condition(void)
{
    43c0:	cf 93       	push	r28
    matrix_power_up();
    43c2:	0e 94 58 09 	call	0x12b0	; 0x12b0 <matrix_power_up>
    matrix_scan();
    43c6:	0e 94 97 09 	call	0x132e	; 0x132e <matrix_scan>
    matrix_power_down();
    43ca:	0e 94 59 09 	call	0x12b2	; 0x12b2 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    43ce:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    43d0:	8c 2f       	mov	r24, r28
    43d2:	0e 94 48 0a 	call	0x1490	; 0x1490 <matrix_get_row>
    43d6:	81 11       	cpse	r24, r1
    43d8:	05 c0       	rjmp	.+10     	; 0x43e4 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    43da:	cf 5f       	subi	r28, 0xFF	; 255
    43dc:	c6 30       	cpi	r28, 0x06	; 6
    43de:	c1 f7       	brne	.-16     	; 0x43d0 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    43e0:	80 e0       	ldi	r24, 0x00	; 0
    43e2:	01 c0       	rjmp	.+2      	; 0x43e6 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    43e6:	cf 91       	pop	r28
    43e8:	08 95       	ret

000043ea <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    43ea:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <clear_keyboard>
#ifdef SUSPEND_ACTION
    suspend_wakeup_init_action();
#endif
#ifdef BACKLIGHT_ENABLE
    backlight_init();
    43ee:	0c 94 c7 2f 	jmp	0x5f8e	; 0x5f8e <backlight_init>

000043f2 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    43f2:	1f 92       	push	r1
    43f4:	0f 92       	push	r0
    43f6:	0f b6       	in	r0, 0x3f	; 63
    43f8:	0f 92       	push	r0
    43fa:	11 24       	eor	r1, r1
    43fc:	8f 93       	push	r24
    43fe:	9f 93       	push	r25
    4400:	af 93       	push	r26
    4402:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    4404:	80 91 be 01 	lds	r24, 0x01BE
    4408:	81 11       	cpse	r24, r1
    440a:	13 c0       	rjmp	.+38     	; 0x4432 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    440c:	80 91 bf 01 	lds	r24, 0x01BF
    4410:	90 91 c0 01 	lds	r25, 0x01C0
    4414:	a0 91 c1 01 	lds	r26, 0x01C1
    4418:	b0 91 c2 01 	lds	r27, 0x01C2
    441c:	41 96       	adiw	r24, 0x11	; 17
    441e:	a1 1d       	adc	r26, r1
    4420:	b1 1d       	adc	r27, r1
    4422:	80 93 bf 01 	sts	0x01BF, r24
    4426:	90 93 c0 01 	sts	0x01C0, r25
    442a:	a0 93 c1 01 	sts	0x01C1, r26
    442e:	b0 93 c2 01 	sts	0x01C2, r27
            break;
        default:
            ;
    }
}
    4432:	bf 91       	pop	r27
    4434:	af 91       	pop	r26
    4436:	9f 91       	pop	r25
    4438:	8f 91       	pop	r24
    443a:	0f 90       	pop	r0
    443c:	0f be       	out	0x3f, r0	; 63
    443e:	0f 90       	pop	r0
    4440:	1f 90       	pop	r1
    4442:	18 95       	reti

00004444 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    4444:	82 e0       	ldi	r24, 0x02	; 2
    4446:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    4448:	93 e0       	ldi	r25, 0x03	; 3
    444a:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    444c:	9a ef       	ldi	r25, 0xFA	; 250
    444e:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    4450:	80 93 6e 00 	sts	0x006E, r24
    4454:	08 95       	ret

00004456 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    4456:	2f b7       	in	r18, 0x3f	; 63
    cli();
    4458:	f8 94       	cli
    t = timer_count;
    445a:	80 91 bf 01 	lds	r24, 0x01BF
    445e:	90 91 c0 01 	lds	r25, 0x01C0
    4462:	a0 91 c1 01 	lds	r26, 0x01C1
    4466:	b0 91 c2 01 	lds	r27, 0x01C2
    SREG = sreg;
    446a:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    446c:	08 95       	ret

0000446e <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    446e:	cf 92       	push	r12
    4470:	df 92       	push	r13
    4472:	ef 92       	push	r14
    4474:	ff 92       	push	r15
    4476:	0f 93       	push	r16
    4478:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    447a:	2f b7       	in	r18, 0x3f	; 63
    cli();
    447c:	f8 94       	cli
    t = timer_count;
    447e:	40 91 bf 01 	lds	r20, 0x01BF
    4482:	50 91 c0 01 	lds	r21, 0x01C0
    4486:	60 91 c1 01 	lds	r22, 0x01C1
    448a:	70 91 c2 01 	lds	r23, 0x01C2
    SREG = sreg;
    448e:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    4490:	6a 01       	movw	r12, r20
    4492:	7b 01       	movw	r14, r22
    4494:	ee 24       	eor	r14, r14
    4496:	ff 24       	eor	r15, r15
    4498:	8c 01       	movw	r16, r24
    449a:	20 e0       	ldi	r18, 0x00	; 0
    449c:	30 e0       	ldi	r19, 0x00	; 0
    449e:	c0 16       	cp	r12, r16
    44a0:	d1 06       	cpc	r13, r17
    44a2:	e2 06       	cpc	r14, r18
    44a4:	f3 06       	cpc	r15, r19
    44a6:	10 f4       	brcc	.+4      	; 0x44ac <timer_elapsed+0x3e>
    44a8:	41 50       	subi	r20, 0x01	; 1
    44aa:	51 09       	sbc	r21, r1
    44ac:	48 1b       	sub	r20, r24
    44ae:	59 0b       	sbc	r21, r25
}
    44b0:	ca 01       	movw	r24, r20
    44b2:	1f 91       	pop	r17
    44b4:	0f 91       	pop	r16
    44b6:	ff 90       	pop	r15
    44b8:	ef 90       	pop	r14
    44ba:	df 90       	pop	r13
    44bc:	cf 90       	pop	r12
    44be:	08 95       	ret

000044c0 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    44c0:	1f 92       	push	r1
    44c2:	0f 92       	push	r0
    44c4:	0f b6       	in	r0, 0x3f	; 63
    44c6:	0f 92       	push	r0
    44c8:	11 24       	eor	r1, r1
    44ca:	8f 93       	push	r24
    44cc:	9f 93       	push	r25
    44ce:	af 93       	push	r26
    44d0:	bf 93       	push	r27
    timer_count++;
    44d2:	80 91 bf 01 	lds	r24, 0x01BF
    44d6:	90 91 c0 01 	lds	r25, 0x01C0
    44da:	a0 91 c1 01 	lds	r26, 0x01C1
    44de:	b0 91 c2 01 	lds	r27, 0x01C2
    44e2:	01 96       	adiw	r24, 0x01	; 1
    44e4:	a1 1d       	adc	r26, r1
    44e6:	b1 1d       	adc	r27, r1
    44e8:	80 93 bf 01 	sts	0x01BF, r24
    44ec:	90 93 c0 01 	sts	0x01C0, r25
    44f0:	a0 93 c1 01 	sts	0x01C1, r26
    44f4:	b0 93 c2 01 	sts	0x01C2, r27
}
    44f8:	bf 91       	pop	r27
    44fa:	af 91       	pop	r26
    44fc:	9f 91       	pop	r25
    44fe:	8f 91       	pop	r24
    4500:	0f 90       	pop	r0
    4502:	0f be       	out	0x3f, r0	; 63
    4504:	0f 90       	pop	r0
    4506:	1f 90       	pop	r1
    4508:	18 95       	reti

0000450a <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    450a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <USB_Disable>
    cli();
    450e:	f8 94       	cli
    4510:	2f ef       	ldi	r18, 0xFF	; 255
    4512:	87 ea       	ldi	r24, 0xA7	; 167
    4514:	91 e6       	ldi	r25, 0x61	; 97
    4516:	21 50       	subi	r18, 0x01	; 1
    4518:	80 40       	sbci	r24, 0x00	; 0
    451a:	90 40       	sbci	r25, 0x00	; 0
    451c:	e1 f7       	brne	.-8      	; 0x4516 <bootloader_jump+0xc>
    451e:	00 c0       	rjmp	.+0      	; 0x4520 <bootloader_jump+0x16>
    4520:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    4522:	87 e0       	ldi	r24, 0x07	; 7
    4524:	90 eb       	ldi	r25, 0xB0	; 176
    4526:	dc 01       	movw	r26, r24
    4528:	80 93 0f 02 	sts	0x020F, r24
    452c:	90 93 10 02 	sts	0x0210, r25
    4530:	a0 93 11 02 	sts	0x0211, r26
    4534:	b0 93 12 02 	sts	0x0212, r27
    wdt_enable(WDTO_250MS);
    4538:	2c e0       	ldi	r18, 0x0C	; 12
    453a:	88 e1       	ldi	r24, 0x18	; 24
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	0f b6       	in	r0, 0x3f	; 63
    4540:	f8 94       	cli
    4542:	a8 95       	wdr
    4544:	80 93 60 00 	sts	0x0060, r24
    4548:	0f be       	out	0x3f, r0	; 63
    454a:	20 93 60 00 	sts	0x0060, r18
    454e:	ff cf       	rjmp	.-2      	; 0x454e <bootloader_jump+0x44>

00004550 <scan_keycode>:
    eeconfig_write_ps2_mouse(ps2_mouse_enabled);
#endif
}

static bool scan_keycode(uint8_t keycode)
{
    4550:	ef 92       	push	r14
    4552:	ff 92       	push	r15
    4554:	0f 93       	push	r16
    4556:	1f 93       	push	r17
    4558:	cf 93       	push	r28
    455a:	df 93       	push	r29
    455c:	e8 2e       	mov	r14, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    455e:	f1 2c       	mov	r15, r1
        matrix_row_t matrix_row = matrix_get_row(r);
    4560:	8f 2d       	mov	r24, r15
    4562:	0e 94 48 0a 	call	0x1490	; 0x1490 <matrix_get_row>
    4566:	c0 e0       	ldi	r28, 0x00	; 0
    4568:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    456a:	08 2f       	mov	r16, r24
    456c:	10 e0       	ldi	r17, 0x00	; 0
    456e:	98 01       	movw	r18, r16
    4570:	0c 2e       	mov	r0, r28
    4572:	02 c0       	rjmp	.+4      	; 0x4578 <scan_keycode+0x28>
    4574:	35 95       	asr	r19
    4576:	27 95       	ror	r18
    4578:	0a 94       	dec	r0
    457a:	e2 f7       	brpl	.-8      	; 0x4574 <scan_keycode+0x24>
    457c:	20 fd       	sbrc	r18, 0
    457e:	05 c0       	rjmp	.+10     	; 0x458a <scan_keycode+0x3a>
    4580:	21 96       	adiw	r28, 0x01	; 1

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    4582:	c4 30       	cpi	r28, 0x04	; 4
    4584:	d1 05       	cpc	r29, r1
    4586:	99 f7       	brne	.-26     	; 0x456e <scan_keycode+0x1e>
    4588:	09 c0       	rjmp	.+18     	; 0x459c <scan_keycode+0x4c>
            if (matrix_row & ((matrix_row_t)1<<c)) {
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
    458a:	6c 2f       	mov	r22, r28
    458c:	7f 2d       	mov	r23, r15
    458e:	80 e0       	ldi	r24, 0x00	; 0
    4590:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <keymap_key_to_keycode>
    4594:	e8 12       	cpse	r14, r24
    4596:	f4 cf       	rjmp	.-24     	; 0x4580 <scan_keycode+0x30>
                    return true;
    4598:	81 e0       	ldi	r24, 0x01	; 1
    459a:	05 c0       	rjmp	.+10     	; 0x45a6 <scan_keycode+0x56>
#endif
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    459c:	f3 94       	inc	r15
    459e:	86 e0       	ldi	r24, 0x06	; 6
    45a0:	f8 12       	cpse	r15, r24
    45a2:	de cf       	rjmp	.-68     	; 0x4560 <scan_keycode+0x10>
                    return true;
                }
            }
        }
    }
    return false;
    45a4:	80 e0       	ldi	r24, 0x00	; 0
}
    45a6:	df 91       	pop	r29
    45a8:	cf 91       	pop	r28
    45aa:	1f 91       	pop	r17
    45ac:	0f 91       	pop	r16
    45ae:	ff 90       	pop	r15
    45b0:	ef 90       	pop	r14
    45b2:	08 95       	ret

000045b4 <bootmagic_scan_keycode>:

bool bootmagic_scan_keycode(uint8_t keycode)
{
    45b4:	cf 93       	push	r28
    45b6:	c8 2f       	mov	r28, r24
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
    45b8:	80 ec       	ldi	r24, 0xC0	; 192
    45ba:	0e 94 a8 22 	call	0x4550	; 0x4550 <scan_keycode>
    45be:	88 23       	and	r24, r24
    45c0:	21 f0       	breq	.+8      	; 0x45ca <bootmagic_scan_keycode+0x16>

    return scan_keycode(keycode);
    45c2:	8c 2f       	mov	r24, r28
}
    45c4:	cf 91       	pop	r28

bool bootmagic_scan_keycode(uint8_t keycode)
{
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;

    return scan_keycode(keycode);
    45c6:	0c 94 a8 22 	jmp	0x4550	; 0x4550 <scan_keycode>
}
    45ca:	80 e0       	ldi	r24, 0x00	; 0
    45cc:	cf 91       	pop	r28
    45ce:	08 95       	ret

000045d0 <bootmagic>:
#ifdef PS2_MOUSE_ENABLE
extern uint8_t ps2_mouse_enabled;
#endif

void bootmagic(void)
{
    45d0:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    45d2:	0e 94 45 24 	call	0x488a	; 0x488a <eeconfig_is_enabled>
    45d6:	81 11       	cpse	r24, r1
    45d8:	02 c0       	rjmp	.+4      	; 0x45de <bootmagic+0xe>
        eeconfig_init();
    45da:	0e 94 20 24 	call	0x4840	; 0x4840 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    45de:	8b e5       	ldi	r24, 0x5B	; 91
    45e0:	94 e0       	ldi	r25, 0x04	; 4
    45e2:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    45e6:	c5 e6       	ldi	r28, 0x65	; 101
    45e8:	c1 50       	subi	r28, 0x01	; 1
    45ea:	49 f0       	breq	.+18     	; 0x45fe <bootmagic+0x2e>
    45ec:	0e 94 97 09 	call	0x132e	; 0x132e <matrix_scan>
    45f0:	8f e3       	ldi	r24, 0x3F	; 63
    45f2:	9c e9       	ldi	r25, 0x9C	; 156
    45f4:	01 97       	sbiw	r24, 0x01	; 1
    45f6:	f1 f7       	brne	.-4      	; 0x45f4 <bootmagic+0x24>
    45f8:	00 c0       	rjmp	.+0      	; 0x45fa <bootmagic+0x2a>
    45fa:	00 00       	nop
    45fc:	f5 cf       	rjmp	.-22     	; 0x45e8 <bootmagic+0x18>
    print("done.\n");
    45fe:	84 e5       	ldi	r24, 0x54	; 84
    4600:	94 e0       	ldi	r25, 0x04	; 4
    4602:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
    4606:	89 e2       	ldi	r24, 0x29	; 41
    4608:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    460c:	81 11       	cpse	r24, r1
    460e:	16 c1       	rjmp	.+556    	; 0x483c <bootmagic+0x26c>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    4610:	8a e2       	ldi	r24, 0x2A	; 42
    4612:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    4616:	88 23       	and	r24, r24
    4618:	31 f0       	breq	.+12     	; 0x4626 <bootmagic+0x56>
        eeconfig_disable();
    461a:	0e 94 3f 24 	call	0x487e	; 0x487e <eeconfig_disable>
        eeconfig_init();
    461e:	0e 94 20 24 	call	0x4840	; 0x4840 <eeconfig_init>
#ifdef KEYMAP_IN_EEPROM_ENABLE
        write_keymap_to_eeprom();
#endif
#ifdef LEDMAP_IN_EEPROM_ENABLE
        write_ledmap_to_eeprom();
    4622:	0e 94 be 32 	call	0x657c	; 0x657c <write_ledmap_to_eeprom>
#endif
    }

    /* bootloader */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
    4626:	85 e0       	ldi	r24, 0x05	; 5
    4628:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    462c:	81 11       	cpse	r24, r1
        bootloader_jump();
    462e:	0e 94 85 22 	call	0x450a	; 0x450a <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    4632:	0e 94 50 24 	call	0x48a0	; 0x48a0 <eeconfig_read_debug>
    4636:	80 93 bd 01 	sts	0x01BD, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    463a:	87 e0       	ldi	r24, 0x07	; 7
    463c:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    4640:	88 23       	and	r24, r24
    4642:	99 f1       	breq	.+102    	; 0x46aa <bootmagic+0xda>
        if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    4644:	8b e1       	ldi	r24, 0x1B	; 27
    4646:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    464a:	88 23       	and	r24, r24
    464c:	51 f0       	breq	.+20     	; 0x4662 <bootmagic+0x92>
            debug_config.matrix = !debug_config.matrix;
    464e:	90 91 bd 01 	lds	r25, 0x01BD
    4652:	91 fb       	bst	r25, 1
    4654:	88 27       	eor	r24, r24
    4656:	80 f9       	bld	r24, 0
    4658:	21 e0       	ldi	r18, 0x01	; 1
    465a:	82 27       	eor	r24, r18
    465c:	80 fb       	bst	r24, 0
    465e:	91 f9       	bld	r25, 1
    4660:	22 c0       	rjmp	.+68     	; 0x46a6 <bootmagic+0xd6>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    4662:	8e e0       	ldi	r24, 0x0E	; 14
    4664:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    4668:	88 23       	and	r24, r24
    466a:	51 f0       	breq	.+20     	; 0x4680 <bootmagic+0xb0>
            debug_config.keyboard = !debug_config.keyboard;
    466c:	90 91 bd 01 	lds	r25, 0x01BD
    4670:	92 fb       	bst	r25, 2
    4672:	88 27       	eor	r24, r24
    4674:	80 f9       	bld	r24, 0
    4676:	21 e0       	ldi	r18, 0x01	; 1
    4678:	82 27       	eor	r24, r18
    467a:	80 fb       	bst	r24, 0
    467c:	92 f9       	bld	r25, 2
    467e:	13 c0       	rjmp	.+38     	; 0x46a6 <bootmagic+0xd6>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    4680:	80 e1       	ldi	r24, 0x10	; 16
    4682:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    4686:	90 91 bd 01 	lds	r25, 0x01BD
    468a:	88 23       	and	r24, r24
    468c:	41 f0       	breq	.+16     	; 0x469e <bootmagic+0xce>
            debug_config.mouse = !debug_config.mouse;
    468e:	93 fb       	bst	r25, 3
    4690:	88 27       	eor	r24, r24
    4692:	80 f9       	bld	r24, 0
    4694:	21 e0       	ldi	r18, 0x01	; 1
    4696:	82 27       	eor	r24, r18
    4698:	80 fb       	bst	r24, 0
    469a:	93 f9       	bld	r25, 3
    469c:	04 c0       	rjmp	.+8      	; 0x46a6 <bootmagic+0xd6>
        } else {
            debug_config.enable = !debug_config.enable;
    469e:	89 2f       	mov	r24, r25
    46a0:	80 95       	com	r24
    46a2:	80 fb       	bst	r24, 0
    46a4:	90 f9       	bld	r25, 0
    46a6:	90 93 bd 01 	sts	0x01BD, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    46aa:	80 91 bd 01 	lds	r24, 0x01BD
    46ae:	0e 94 54 24 	call	0x48a8	; 0x48a8 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    46b2:	0e 94 62 24 	call	0x48c4	; 0x48c4 <eeconfig_read_keymap>
    46b6:	80 93 00 02 	sts	0x0200, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    46ba:	80 ee       	ldi	r24, 0xE0	; 224
    46bc:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    46c0:	88 23       	and	r24, r24
    46c2:	41 f0       	breq	.+16     	; 0x46d4 <bootmagic+0x104>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    46c4:	80 91 00 02 	lds	r24, 0x0200
    46c8:	98 2f       	mov	r25, r24
    46ca:	90 95       	com	r25
    46cc:	90 fb       	bst	r25, 0
    46ce:	80 f9       	bld	r24, 0
    46d0:	80 93 00 02 	sts	0x0200, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    46d4:	89 e3       	ldi	r24, 0x39	; 57
    46d6:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    46da:	88 23       	and	r24, r24
    46dc:	59 f0       	breq	.+22     	; 0x46f4 <bootmagic+0x124>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    46de:	90 91 00 02 	lds	r25, 0x0200
    46e2:	91 fb       	bst	r25, 1
    46e4:	88 27       	eor	r24, r24
    46e6:	80 f9       	bld	r24, 0
    46e8:	21 e0       	ldi	r18, 0x01	; 1
    46ea:	82 27       	eor	r24, r18
    46ec:	80 fb       	bst	r24, 0
    46ee:	91 f9       	bld	r25, 1
    46f0:	90 93 00 02 	sts	0x0200, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    46f4:	82 ee       	ldi	r24, 0xE2	; 226
    46f6:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    46fa:	88 23       	and	r24, r24
    46fc:	59 f0       	breq	.+22     	; 0x4714 <bootmagic+0x144>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    46fe:	90 91 00 02 	lds	r25, 0x0200
    4702:	92 fb       	bst	r25, 2
    4704:	88 27       	eor	r24, r24
    4706:	80 f9       	bld	r24, 0
    4708:	21 e0       	ldi	r18, 0x01	; 1
    470a:	82 27       	eor	r24, r18
    470c:	80 fb       	bst	r24, 0
    470e:	92 f9       	bld	r25, 2
    4710:	90 93 00 02 	sts	0x0200, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    4714:	86 ee       	ldi	r24, 0xE6	; 230
    4716:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    471a:	88 23       	and	r24, r24
    471c:	59 f0       	breq	.+22     	; 0x4734 <bootmagic+0x164>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    471e:	90 91 00 02 	lds	r25, 0x0200
    4722:	93 fb       	bst	r25, 3
    4724:	88 27       	eor	r24, r24
    4726:	80 f9       	bld	r24, 0
    4728:	21 e0       	ldi	r18, 0x01	; 1
    472a:	82 27       	eor	r24, r18
    472c:	80 fb       	bst	r24, 0
    472e:	93 f9       	bld	r25, 3
    4730:	90 93 00 02 	sts	0x0200, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
    4734:	83 ee       	ldi	r24, 0xE3	; 227
    4736:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    473a:	88 23       	and	r24, r24
    473c:	59 f0       	breq	.+22     	; 0x4754 <bootmagic+0x184>
        keymap_config.no_gui = !keymap_config.no_gui;
    473e:	90 91 00 02 	lds	r25, 0x0200
    4742:	94 fb       	bst	r25, 4
    4744:	88 27       	eor	r24, r24
    4746:	80 f9       	bld	r24, 0
    4748:	21 e0       	ldi	r18, 0x01	; 1
    474a:	82 27       	eor	r24, r18
    474c:	80 fb       	bst	r24, 0
    474e:	94 f9       	bld	r25, 4
    4750:	90 93 00 02 	sts	0x0200, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    4754:	85 e3       	ldi	r24, 0x35	; 53
    4756:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    475a:	88 23       	and	r24, r24
    475c:	59 f0       	breq	.+22     	; 0x4774 <bootmagic+0x1a4>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    475e:	90 91 00 02 	lds	r25, 0x0200
    4762:	95 fb       	bst	r25, 5
    4764:	88 27       	eor	r24, r24
    4766:	80 f9       	bld	r24, 0
    4768:	21 e0       	ldi	r18, 0x01	; 1
    476a:	82 27       	eor	r24, r18
    476c:	80 fb       	bst	r24, 0
    476e:	95 f9       	bld	r25, 5
    4770:	90 93 00 02 	sts	0x0200, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    4774:	81 e3       	ldi	r24, 0x31	; 49
    4776:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    477a:	88 23       	and	r24, r24
    477c:	59 f0       	breq	.+22     	; 0x4794 <bootmagic+0x1c4>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    477e:	90 91 00 02 	lds	r25, 0x0200
    4782:	96 fb       	bst	r25, 6
    4784:	88 27       	eor	r24, r24
    4786:	80 f9       	bld	r24, 0
    4788:	21 e0       	ldi	r18, 0x01	; 1
    478a:	82 27       	eor	r24, r18
    478c:	80 fb       	bst	r24, 0
    478e:	96 f9       	bld	r25, 6
    4790:	90 93 00 02 	sts	0x0200, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
    4794:	81 e1       	ldi	r24, 0x11	; 17
    4796:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    479a:	88 23       	and	r24, r24
    479c:	59 f0       	breq	.+22     	; 0x47b4 <bootmagic+0x1e4>
        keymap_config.nkro = !keymap_config.nkro;
    479e:	90 91 00 02 	lds	r25, 0x0200
    47a2:	97 fb       	bst	r25, 7
    47a4:	88 27       	eor	r24, r24
    47a6:	80 f9       	bld	r24, 0
    47a8:	21 e0       	ldi	r18, 0x01	; 1
    47aa:	82 27       	eor	r24, r18
    47ac:	80 fb       	bst	r24, 0
    47ae:	97 f9       	bld	r25, 7
    47b0:	90 93 00 02 	sts	0x0200, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    47b4:	80 91 00 02 	lds	r24, 0x0200
    47b8:	0e 94 66 24 	call	0x48cc	; 0x48cc <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    47bc:	80 91 00 02 	lds	r24, 0x0200
    47c0:	87 fb       	bst	r24, 7
    47c2:	88 27       	eor	r24, r24
    47c4:	80 f9       	bld	r24, 0
    47c6:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    47ca:	87 e2       	ldi	r24, 0x27	; 39
    47cc:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    47d0:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    47d2:	8e e1       	ldi	r24, 0x1E	; 30
    47d4:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    47d8:	81 11       	cpse	r24, r1
    47da:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    47dc:	8f e1       	ldi	r24, 0x1F	; 31
    47de:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    47e2:	81 11       	cpse	r24, r1
    47e4:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    47e6:	80 e2       	ldi	r24, 0x20	; 32
    47e8:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    47ec:	81 11       	cpse	r24, r1
    47ee:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    47f0:	81 e2       	ldi	r24, 0x21	; 33
    47f2:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    47f6:	81 11       	cpse	r24, r1
    47f8:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    47fa:	82 e2       	ldi	r24, 0x22	; 34
    47fc:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    4800:	81 11       	cpse	r24, r1
    4802:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    4804:	83 e2       	ldi	r24, 0x23	; 35
    4806:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    480a:	81 11       	cpse	r24, r1
    480c:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    480e:	84 e2       	ldi	r24, 0x24	; 36
    4810:	0e 94 da 22 	call	0x45b4	; 0x45b4 <bootmagic_scan_keycode>
    4814:	88 23       	and	r24, r24
    4816:	11 f0       	breq	.+4      	; 0x481c <bootmagic+0x24c>
    4818:	c0 68       	ori	r28, 0x80	; 128
    481a:	02 c0       	rjmp	.+4      	; 0x4820 <bootmagic+0x250>
    if (default_layer) {
    481c:	cc 23       	and	r28, r28
    481e:	29 f0       	breq	.+10     	; 0x482a <bootmagic+0x25a>
        eeconfig_write_default_layer(default_layer);
    4820:	8c 2f       	mov	r24, r28
    4822:	0e 94 5d 24 	call	0x48ba	; 0x48ba <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    4826:	6c 2f       	mov	r22, r28
    4828:	03 c0       	rjmp	.+6      	; 0x4830 <bootmagic+0x260>
    } else {
        default_layer = eeconfig_read_default_layer();
    482a:	0e 94 59 24 	call	0x48b2	; 0x48b2 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    482e:	68 2f       	mov	r22, r24
    4830:	70 e0       	ldi	r23, 0x00	; 0
    4832:	80 e0       	ldi	r24, 0x00	; 0
    4834:	90 e0       	ldi	r25, 0x00	; 0
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_PS2_MOUSE_ENABLE)) {
        ps2_mouse_enabled = !ps2_mouse_enabled;
    }
    eeconfig_write_ps2_mouse(ps2_mouse_enabled);
#endif
}
    4836:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    4838:	0c 94 26 1d 	jmp	0x3a4c	; 0x3a4c <default_layer_set>
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_PS2_MOUSE_ENABLE)) {
        ps2_mouse_enabled = !ps2_mouse_enabled;
    }
    eeconfig_write_ps2_mouse(ps2_mouse_enabled);
#endif
}
    483c:	cf 91       	pop	r28
    483e:	08 95       	ret

00004840 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    4840:	6d ee       	ldi	r22, 0xED	; 237
    4842:	7e ef       	ldi	r23, 0xFE	; 254
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	0e 94 48 34 	call	0x6890	; 0x6890 <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    484c:	60 e0       	ldi	r22, 0x00	; 0
    484e:	82 e0       	ldi	r24, 0x02	; 2
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	0e 94 3a 34 	call	0x6874	; 0x6874 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    4856:	60 e0       	ldi	r22, 0x00	; 0
    4858:	83 e0       	ldi	r24, 0x03	; 3
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	0e 94 3a 34 	call	0x6874	; 0x6874 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    4860:	60 e0       	ldi	r22, 0x00	; 0
    4862:	84 e0       	ldi	r24, 0x04	; 4
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	0e 94 3a 34 	call	0x6874	; 0x6874 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    486a:	60 e0       	ldi	r22, 0x00	; 0
    486c:	85 e0       	ldi	r24, 0x05	; 5
    486e:	90 e0       	ldi	r25, 0x00	; 0
    4870:	0e 94 3a 34 	call	0x6874	; 0x6874 <__eewr_byte_m32u4>
#ifdef BACKLIGHT_ENABLE
    eeprom_write_byte(EECONFIG_BACKLIGHT,      0);
    4874:	60 e0       	ldi	r22, 0x00	; 0
    4876:	86 e0       	ldi	r24, 0x06	; 6
    4878:	90 e0       	ldi	r25, 0x00	; 0
    487a:	0c 94 3a 34 	jmp	0x6874	; 0x6874 <__eewr_byte_m32u4>

0000487e <eeconfig_disable>:
    eeprom_write_word(EECONFIG_MAGIC, EECONFIG_MAGIC_NUMBER);
}

void eeconfig_disable(void)
{
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
    487e:	6f ef       	ldi	r22, 0xFF	; 255
    4880:	7f ef       	ldi	r23, 0xFF	; 255
    4882:	80 e0       	ldi	r24, 0x00	; 0
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	0c 94 48 34 	jmp	0x6890	; 0x6890 <__eewr_word_m32u4>

0000488a <eeconfig_is_enabled>:
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    488a:	80 e0       	ldi	r24, 0x00	; 0
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	0e 94 34 34 	call	0x6868	; 0x6868 <__eerd_word_m32u4>
    4892:	21 e0       	ldi	r18, 0x01	; 1
    4894:	8d 3e       	cpi	r24, 0xED	; 237
    4896:	9e 4f       	sbci	r25, 0xFE	; 254
    4898:	09 f0       	breq	.+2      	; 0x489c <eeconfig_is_enabled+0x12>
    489a:	20 e0       	ldi	r18, 0x00	; 0
}
    489c:	82 2f       	mov	r24, r18
    489e:	08 95       	ret

000048a0 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    48a0:	82 e0       	ldi	r24, 0x02	; 2
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	0c 94 2c 34 	jmp	0x6858	; 0x6858 <__eerd_byte_m32u4>

000048a8 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    48a8:	68 2f       	mov	r22, r24
    48aa:	82 e0       	ldi	r24, 0x02	; 2
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	0c 94 3a 34 	jmp	0x6874	; 0x6874 <__eewr_byte_m32u4>

000048b2 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    48b2:	83 e0       	ldi	r24, 0x03	; 3
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	0c 94 2c 34 	jmp	0x6858	; 0x6858 <__eerd_byte_m32u4>

000048ba <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    48ba:	68 2f       	mov	r22, r24
    48bc:	83 e0       	ldi	r24, 0x03	; 3
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	0c 94 3a 34 	jmp	0x6874	; 0x6874 <__eewr_byte_m32u4>

000048c4 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    48c4:	84 e0       	ldi	r24, 0x04	; 4
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	0c 94 2c 34 	jmp	0x6858	; 0x6858 <__eerd_byte_m32u4>

000048cc <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    48cc:	68 2f       	mov	r22, r24
    48ce:	84 e0       	ldi	r24, 0x04	; 4
    48d0:	90 e0       	ldi	r25, 0x00	; 0
    48d2:	0c 94 3a 34 	jmp	0x6874	; 0x6874 <__eewr_byte_m32u4>

000048d6 <eeconfig_read_backlight>:

#ifdef BACKLIGHT_ENABLE
uint8_t eeconfig_read_backlight(void)      { return eeprom_read_byte(EECONFIG_BACKLIGHT); }
    48d6:	86 e0       	ldi	r24, 0x06	; 6
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	0c 94 2c 34 	jmp	0x6858	; 0x6858 <__eerd_byte_m32u4>

000048de <eeconfig_write_backlight>:
void eeconfig_write_backlight(uint8_t val) { eeprom_write_byte(EECONFIG_BACKLIGHT, val); }
    48de:	68 2f       	mov	r22, r24
    48e0:	86 e0       	ldi	r24, 0x06	; 6
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	0c 94 3a 34 	jmp	0x6874	; 0x6874 <__eewr_byte_m32u4>

000048e8 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    48e8:	80 91 c5 01 	lds	r24, 0x01C5
    48ec:	80 ff       	sbrs	r24, 0
    48ee:	0b c0       	rjmp	.+22     	; 0x4906 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    48f0:	60 91 12 01 	lds	r22, 0x0112
    48f4:	85 e0       	ldi	r24, 0x05	; 5
    48f6:	68 9f       	mul	r22, r24
    48f8:	b0 01       	movw	r22, r0
    48fa:	11 24       	eor	r1, r1
    48fc:	75 95       	asr	r23
    48fe:	67 95       	ror	r22
    4900:	75 95       	asr	r23
    4902:	67 95       	ror	r22
    4904:	2a c0       	rjmp	.+84     	; 0x495a <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    4906:	81 ff       	sbrs	r24, 1
    4908:	09 c0       	rjmp	.+18     	; 0x491c <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    490a:	60 91 12 01 	lds	r22, 0x0112
    490e:	85 e0       	ldi	r24, 0x05	; 5
    4910:	68 9f       	mul	r22, r24
    4912:	b0 01       	movw	r22, r0
    4914:	11 24       	eor	r1, r1
    4916:	75 95       	asr	r23
    4918:	67 95       	ror	r22
    491a:	1f c0       	rjmp	.+62     	; 0x495a <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    491c:	82 ff       	sbrs	r24, 2
    491e:	07 c0       	rjmp	.+14     	; 0x492e <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    4920:	60 91 12 01 	lds	r22, 0x0112
    4924:	85 e0       	ldi	r24, 0x05	; 5
    4926:	68 9f       	mul	r22, r24
    4928:	b0 01       	movw	r22, r0
    492a:	11 24       	eor	r1, r1
    492c:	16 c0       	rjmp	.+44     	; 0x495a <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    492e:	40 91 c6 01 	lds	r20, 0x01C6
    4932:	44 23       	and	r20, r20
    4934:	c9 f0       	breq	.+50     	; 0x4968 <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    4936:	60 91 11 01 	lds	r22, 0x0111
    493a:	46 17       	cp	r20, r22
    493c:	88 f7       	brcc	.-30     	; 0x4920 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    493e:	20 91 12 01 	lds	r18, 0x0112
    4942:	85 e0       	ldi	r24, 0x05	; 5
    4944:	28 9f       	mul	r18, r24
    4946:	90 01       	movw	r18, r0
    4948:	11 24       	eor	r1, r1
    494a:	42 9f       	mul	r20, r18
    494c:	c0 01       	movw	r24, r0
    494e:	43 9f       	mul	r20, r19
    4950:	90 0d       	add	r25, r0
    4952:	11 24       	eor	r1, r1
    4954:	70 e0       	ldi	r23, 0x00	; 0
    4956:	0e 94 fe 33 	call	0x67fc	; 0x67fc <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    495a:	60 38       	cpi	r22, 0x80	; 128
    495c:	71 05       	cpc	r23, r1
    495e:	40 f4       	brcc	.+16     	; 0x4970 <move_unit+0x88>
    4960:	61 15       	cp	r22, r1
    4962:	71 05       	cpc	r23, r1
    4964:	39 f0       	breq	.+14     	; 0x4974 <move_unit+0x8c>
    4966:	02 c0       	rjmp	.+4      	; 0x496c <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    4968:	65 e0       	ldi	r22, 0x05	; 5
    496a:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    496c:	86 2f       	mov	r24, r22
    496e:	08 95       	ret
    4970:	8f e7       	ldi	r24, 0x7F	; 127
    4972:	08 95       	ret
    4974:	81 e0       	ldi	r24, 0x01	; 1
}
    4976:	08 95       	ret

00004978 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4978:	80 91 c5 01 	lds	r24, 0x01C5
    497c:	80 ff       	sbrs	r24, 0
    497e:	08 c0       	rjmp	.+16     	; 0x4990 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4980:	60 91 10 01 	lds	r22, 0x0110
    4984:	70 e0       	ldi	r23, 0x00	; 0
    4986:	75 95       	asr	r23
    4988:	67 95       	ror	r22
    498a:	75 95       	asr	r23
    498c:	67 95       	ror	r22
    498e:	21 c0       	rjmp	.+66     	; 0x49d2 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    4990:	81 ff       	sbrs	r24, 1
    4992:	06 c0       	rjmp	.+12     	; 0x49a0 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4994:	60 91 10 01 	lds	r22, 0x0110
    4998:	70 e0       	ldi	r23, 0x00	; 0
    499a:	75 95       	asr	r23
    499c:	67 95       	ror	r22
    499e:	19 c0       	rjmp	.+50     	; 0x49d2 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    49a0:	82 ff       	sbrs	r24, 2
    49a2:	04 c0       	rjmp	.+8      	; 0x49ac <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    49a4:	60 91 10 01 	lds	r22, 0x0110
    49a8:	70 e0       	ldi	r23, 0x00	; 0
    49aa:	10 c0       	rjmp	.+32     	; 0x49cc <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    49ac:	80 91 c6 01 	lds	r24, 0x01C6
    49b0:	88 23       	and	r24, r24
    49b2:	c1 f0       	breq	.+48     	; 0x49e4 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    49b4:	60 91 0f 01 	lds	r22, 0x010F
    49b8:	86 17       	cp	r24, r22
    49ba:	a0 f7       	brcc	.-24     	; 0x49a4 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    49bc:	90 91 10 01 	lds	r25, 0x0110
    49c0:	98 9f       	mul	r25, r24
    49c2:	c0 01       	movw	r24, r0
    49c4:	11 24       	eor	r1, r1
    49c6:	70 e0       	ldi	r23, 0x00	; 0
    49c8:	0e 94 fe 33 	call	0x67fc	; 0x67fc <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    49cc:	60 38       	cpi	r22, 0x80	; 128
    49ce:	71 05       	cpc	r23, r1
    49d0:	28 f4       	brcc	.+10     	; 0x49dc <wheel_unit+0x64>
    49d2:	61 15       	cp	r22, r1
    49d4:	71 05       	cpc	r23, r1
    49d6:	21 f0       	breq	.+8      	; 0x49e0 <wheel_unit+0x68>
    49d8:	86 2f       	mov	r24, r22
    49da:	08 95       	ret
    49dc:	8f e7       	ldi	r24, 0x7F	; 127
    49de:	08 95       	ret
    49e0:	81 e0       	ldi	r24, 0x01	; 1
    49e2:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    49e4:	61 e0       	ldi	r22, 0x01	; 1
    49e6:	70 e0       	ldi	r23, 0x00	; 0
    49e8:	f4 cf       	rjmp	.-24     	; 0x49d2 <wheel_unit+0x5a>

000049ea <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    49ea:	80 3f       	cpi	r24, 0xF0	; 240
    49ec:	21 f4       	brne	.+8      	; 0x49f6 <mousekey_on+0xc>
    49ee:	0e 94 74 24 	call	0x48e8	; 0x48e8 <move_unit>
    49f2:	81 95       	neg	r24
    49f4:	04 c0       	rjmp	.+8      	; 0x49fe <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    49f6:	81 3f       	cpi	r24, 0xF1	; 241
    49f8:	29 f4       	brne	.+10     	; 0x4a04 <mousekey_on+0x1a>
    49fa:	0e 94 74 24 	call	0x48e8	; 0x48e8 <move_unit>
    49fe:	80 93 c9 01 	sts	0x01C9, r24
    4a02:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    4a04:	82 3f       	cpi	r24, 0xF2	; 242
    4a06:	21 f4       	brne	.+8      	; 0x4a10 <mousekey_on+0x26>
    4a08:	0e 94 74 24 	call	0x48e8	; 0x48e8 <move_unit>
    4a0c:	81 95       	neg	r24
    4a0e:	04 c0       	rjmp	.+8      	; 0x4a18 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    4a10:	83 3f       	cpi	r24, 0xF3	; 243
    4a12:	29 f4       	brne	.+10     	; 0x4a1e <mousekey_on+0x34>
    4a14:	0e 94 74 24 	call	0x48e8	; 0x48e8 <move_unit>
    4a18:	80 93 c8 01 	sts	0x01C8, r24
    4a1c:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    4a1e:	89 3f       	cpi	r24, 0xF9	; 249
    4a20:	19 f4       	brne	.+6      	; 0x4a28 <mousekey_on+0x3e>
    4a22:	0e 94 bc 24 	call	0x4978	; 0x4978 <wheel_unit>
    4a26:	05 c0       	rjmp	.+10     	; 0x4a32 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4a28:	8a 3f       	cpi	r24, 0xFA	; 250
    4a2a:	31 f4       	brne	.+12     	; 0x4a38 <mousekey_on+0x4e>
    4a2c:	0e 94 bc 24 	call	0x4978	; 0x4978 <wheel_unit>
    4a30:	81 95       	neg	r24
    4a32:	80 93 ca 01 	sts	0x01CA, r24
    4a36:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4a38:	8b 3f       	cpi	r24, 0xFB	; 251
    4a3a:	21 f4       	brne	.+8      	; 0x4a44 <mousekey_on+0x5a>
    4a3c:	0e 94 bc 24 	call	0x4978	; 0x4978 <wheel_unit>
    4a40:	81 95       	neg	r24
    4a42:	04 c0       	rjmp	.+8      	; 0x4a4c <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    4a44:	8c 3f       	cpi	r24, 0xFC	; 252
    4a46:	29 f4       	brne	.+10     	; 0x4a52 <mousekey_on+0x68>
    4a48:	0e 94 bc 24 	call	0x4978	; 0x4978 <wheel_unit>
    4a4c:	80 93 cb 01 	sts	0x01CB, r24
    4a50:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4a52:	84 3f       	cpi	r24, 0xF4	; 244
    4a54:	21 f4       	brne	.+8      	; 0x4a5e <mousekey_on+0x74>
    4a56:	80 91 c7 01 	lds	r24, 0x01C7
    4a5a:	81 60       	ori	r24, 0x01	; 1
    4a5c:	17 c0       	rjmp	.+46     	; 0x4a8c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4a5e:	85 3f       	cpi	r24, 0xF5	; 245
    4a60:	21 f4       	brne	.+8      	; 0x4a6a <mousekey_on+0x80>
    4a62:	80 91 c7 01 	lds	r24, 0x01C7
    4a66:	82 60       	ori	r24, 0x02	; 2
    4a68:	11 c0       	rjmp	.+34     	; 0x4a8c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4a6a:	86 3f       	cpi	r24, 0xF6	; 246
    4a6c:	21 f4       	brne	.+8      	; 0x4a76 <mousekey_on+0x8c>
    4a6e:	80 91 c7 01 	lds	r24, 0x01C7
    4a72:	84 60       	ori	r24, 0x04	; 4
    4a74:	0b c0       	rjmp	.+22     	; 0x4a8c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4a76:	87 3f       	cpi	r24, 0xF7	; 247
    4a78:	21 f4       	brne	.+8      	; 0x4a82 <mousekey_on+0x98>
    4a7a:	80 91 c7 01 	lds	r24, 0x01C7
    4a7e:	88 60       	ori	r24, 0x08	; 8
    4a80:	05 c0       	rjmp	.+10     	; 0x4a8c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4a82:	88 3f       	cpi	r24, 0xF8	; 248
    4a84:	31 f4       	brne	.+12     	; 0x4a92 <mousekey_on+0xa8>
    4a86:	80 91 c7 01 	lds	r24, 0x01C7
    4a8a:	80 61       	ori	r24, 0x10	; 16
    4a8c:	80 93 c7 01 	sts	0x01C7, r24
    4a90:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4a92:	8d 3f       	cpi	r24, 0xFD	; 253
    4a94:	21 f4       	brne	.+8      	; 0x4a9e <mousekey_on+0xb4>
    4a96:	80 91 c5 01 	lds	r24, 0x01C5
    4a9a:	81 60       	ori	r24, 0x01	; 1
    4a9c:	0b c0       	rjmp	.+22     	; 0x4ab4 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4a9e:	8e 3f       	cpi	r24, 0xFE	; 254
    4aa0:	21 f4       	brne	.+8      	; 0x4aaa <mousekey_on+0xc0>
    4aa2:	80 91 c5 01 	lds	r24, 0x01C5
    4aa6:	82 60       	ori	r24, 0x02	; 2
    4aa8:	05 c0       	rjmp	.+10     	; 0x4ab4 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4aaa:	8f 3f       	cpi	r24, 0xFF	; 255
    4aac:	29 f4       	brne	.+10     	; 0x4ab8 <mousekey_on+0xce>
    4aae:	80 91 c5 01 	lds	r24, 0x01C5
    4ab2:	84 60       	ori	r24, 0x04	; 4
    4ab4:	80 93 c5 01 	sts	0x01C5, r24
    4ab8:	08 95       	ret

00004aba <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4aba:	80 3f       	cpi	r24, 0xF0	; 240
    4abc:	39 f4       	brne	.+14     	; 0x4acc <mousekey_off+0x12>
    4abe:	80 91 c9 01 	lds	r24, 0x01C9
    4ac2:	87 ff       	sbrs	r24, 7
    4ac4:	6c c0       	rjmp	.+216    	; 0x4b9e <mousekey_off+0xe4>
    4ac6:	10 92 c9 01 	sts	0x01C9, r1
    4aca:	69 c0       	rjmp	.+210    	; 0x4b9e <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4acc:	81 3f       	cpi	r24, 0xF1	; 241
    4ace:	29 f4       	brne	.+10     	; 0x4ada <mousekey_off+0x20>
    4ad0:	80 91 c9 01 	lds	r24, 0x01C9
    4ad4:	18 16       	cp	r1, r24
    4ad6:	bc f3       	brlt	.-18     	; 0x4ac6 <mousekey_off+0xc>
    4ad8:	62 c0       	rjmp	.+196    	; 0x4b9e <mousekey_off+0xe4>
    4ada:	90 91 c8 01 	lds	r25, 0x01C8
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    4ade:	82 3f       	cpi	r24, 0xF2	; 242
    4ae0:	29 f4       	brne	.+10     	; 0x4aec <mousekey_off+0x32>
    4ae2:	97 ff       	sbrs	r25, 7
    4ae4:	5c c0       	rjmp	.+184    	; 0x4b9e <mousekey_off+0xe4>
    4ae6:	10 92 c8 01 	sts	0x01C8, r1
    4aea:	59 c0       	rjmp	.+178    	; 0x4b9e <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4aec:	83 3f       	cpi	r24, 0xF3	; 243
    4aee:	19 f4       	brne	.+6      	; 0x4af6 <mousekey_off+0x3c>
    4af0:	19 16       	cp	r1, r25
    4af2:	cc f3       	brlt	.-14     	; 0x4ae6 <mousekey_off+0x2c>
    4af4:	54 c0       	rjmp	.+168    	; 0x4b9e <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    4af6:	89 3f       	cpi	r24, 0xF9	; 249
    4af8:	41 f4       	brne	.+16     	; 0x4b0a <mousekey_off+0x50>
    4afa:	80 91 ca 01 	lds	r24, 0x01CA
    4afe:	18 16       	cp	r1, r24
    4b00:	0c f0       	brlt	.+2      	; 0x4b04 <mousekey_off+0x4a>
    4b02:	4d c0       	rjmp	.+154    	; 0x4b9e <mousekey_off+0xe4>
    4b04:	10 92 ca 01 	sts	0x01CA, r1
    4b08:	4a c0       	rjmp	.+148    	; 0x4b9e <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    4b0a:	8a 3f       	cpi	r24, 0xFA	; 250
    4b0c:	29 f4       	brne	.+10     	; 0x4b18 <mousekey_off+0x5e>
    4b0e:	80 91 ca 01 	lds	r24, 0x01CA
    4b12:	87 ff       	sbrs	r24, 7
    4b14:	44 c0       	rjmp	.+136    	; 0x4b9e <mousekey_off+0xe4>
    4b16:	f6 cf       	rjmp	.-20     	; 0x4b04 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4b18:	8b 3f       	cpi	r24, 0xFB	; 251
    4b1a:	39 f4       	brne	.+14     	; 0x4b2a <mousekey_off+0x70>
    4b1c:	80 91 cb 01 	lds	r24, 0x01CB
    4b20:	87 ff       	sbrs	r24, 7
    4b22:	3d c0       	rjmp	.+122    	; 0x4b9e <mousekey_off+0xe4>
    4b24:	10 92 cb 01 	sts	0x01CB, r1
    4b28:	3a c0       	rjmp	.+116    	; 0x4b9e <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4b2a:	8c 3f       	cpi	r24, 0xFC	; 252
    4b2c:	29 f4       	brne	.+10     	; 0x4b38 <mousekey_off+0x7e>
    4b2e:	80 91 cb 01 	lds	r24, 0x01CB
    4b32:	18 16       	cp	r1, r24
    4b34:	bc f3       	brlt	.-18     	; 0x4b24 <mousekey_off+0x6a>
    4b36:	33 c0       	rjmp	.+102    	; 0x4b9e <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4b38:	84 3f       	cpi	r24, 0xF4	; 244
    4b3a:	21 f4       	brne	.+8      	; 0x4b44 <mousekey_off+0x8a>
    4b3c:	80 91 c7 01 	lds	r24, 0x01C7
    4b40:	8e 7f       	andi	r24, 0xFE	; 254
    4b42:	17 c0       	rjmp	.+46     	; 0x4b72 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4b44:	85 3f       	cpi	r24, 0xF5	; 245
    4b46:	21 f4       	brne	.+8      	; 0x4b50 <mousekey_off+0x96>
    4b48:	80 91 c7 01 	lds	r24, 0x01C7
    4b4c:	8d 7f       	andi	r24, 0xFD	; 253
    4b4e:	11 c0       	rjmp	.+34     	; 0x4b72 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4b50:	86 3f       	cpi	r24, 0xF6	; 246
    4b52:	21 f4       	brne	.+8      	; 0x4b5c <mousekey_off+0xa2>
    4b54:	80 91 c7 01 	lds	r24, 0x01C7
    4b58:	8b 7f       	andi	r24, 0xFB	; 251
    4b5a:	0b c0       	rjmp	.+22     	; 0x4b72 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4b5c:	87 3f       	cpi	r24, 0xF7	; 247
    4b5e:	21 f4       	brne	.+8      	; 0x4b68 <mousekey_off+0xae>
    4b60:	80 91 c7 01 	lds	r24, 0x01C7
    4b64:	87 7f       	andi	r24, 0xF7	; 247
    4b66:	05 c0       	rjmp	.+10     	; 0x4b72 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4b68:	88 3f       	cpi	r24, 0xF8	; 248
    4b6a:	31 f4       	brne	.+12     	; 0x4b78 <mousekey_off+0xbe>
    4b6c:	80 91 c7 01 	lds	r24, 0x01C7
    4b70:	8f 7e       	andi	r24, 0xEF	; 239
    4b72:	80 93 c7 01 	sts	0x01C7, r24
    4b76:	13 c0       	rjmp	.+38     	; 0x4b9e <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4b78:	8d 3f       	cpi	r24, 0xFD	; 253
    4b7a:	21 f4       	brne	.+8      	; 0x4b84 <mousekey_off+0xca>
    4b7c:	80 91 c5 01 	lds	r24, 0x01C5
    4b80:	8e 7f       	andi	r24, 0xFE	; 254
    4b82:	0b c0       	rjmp	.+22     	; 0x4b9a <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4b84:	8e 3f       	cpi	r24, 0xFE	; 254
    4b86:	21 f4       	brne	.+8      	; 0x4b90 <mousekey_off+0xd6>
    4b88:	80 91 c5 01 	lds	r24, 0x01C5
    4b8c:	8d 7f       	andi	r24, 0xFD	; 253
    4b8e:	05 c0       	rjmp	.+10     	; 0x4b9a <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4b90:	8f 3f       	cpi	r24, 0xFF	; 255
    4b92:	29 f4       	brne	.+10     	; 0x4b9e <mousekey_off+0xe4>
    4b94:	80 91 c5 01 	lds	r24, 0x01C5
    4b98:	8b 7f       	andi	r24, 0xFB	; 251
    4b9a:	80 93 c5 01 	sts	0x01C5, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4b9e:	80 91 c8 01 	lds	r24, 0x01C8
    4ba2:	81 11       	cpse	r24, r1
    4ba4:	0e c0       	rjmp	.+28     	; 0x4bc2 <mousekey_off+0x108>
    4ba6:	80 91 c9 01 	lds	r24, 0x01C9
    4baa:	81 11       	cpse	r24, r1
    4bac:	0a c0       	rjmp	.+20     	; 0x4bc2 <mousekey_off+0x108>
    4bae:	80 91 ca 01 	lds	r24, 0x01CA
    4bb2:	81 11       	cpse	r24, r1
    4bb4:	06 c0       	rjmp	.+12     	; 0x4bc2 <mousekey_off+0x108>
    4bb6:	80 91 cb 01 	lds	r24, 0x01CB
    4bba:	81 11       	cpse	r24, r1
    4bbc:	02 c0       	rjmp	.+4      	; 0x4bc2 <mousekey_off+0x108>
        mousekey_repeat = 0;
    4bbe:	10 92 c6 01 	sts	0x01C6, r1
    4bc2:	08 95       	ret

00004bc4 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4bc4:	80 91 bd 01 	lds	r24, 0x01BD
    4bc8:	83 ff       	sbrs	r24, 3
    4bca:	7e c0       	rjmp	.+252    	; 0x4cc8 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4bcc:	87 e9       	ldi	r24, 0x97	; 151
    4bce:	94 e0       	ldi	r25, 0x04	; 4
    4bd0:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    phex(mouse_report.buttons); print("|");
    4bd4:	80 91 c7 01 	lds	r24, 0x01C7
    4bd8:	1f 92       	push	r1
    4bda:	8f 93       	push	r24
    4bdc:	82 e9       	ldi	r24, 0x92	; 146
    4bde:	94 e0       	ldi	r25, 0x04	; 4
    4be0:	9f 93       	push	r25
    4be2:	8f 93       	push	r24
    4be4:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    4be8:	80 e9       	ldi	r24, 0x90	; 144
    4bea:	94 e0       	ldi	r25, 0x04	; 4
    4bec:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print_decs(mouse_report.x); print(" ");
    4bf0:	20 91 c8 01 	lds	r18, 0x01C8
    4bf4:	82 2f       	mov	r24, r18
    4bf6:	99 27       	eor	r25, r25
    4bf8:	87 fd       	sbrc	r24, 7
    4bfa:	90 95       	com	r25
    4bfc:	9f 93       	push	r25
    4bfe:	2f 93       	push	r18
    4c00:	8d e8       	ldi	r24, 0x8D	; 141
    4c02:	94 e0       	ldi	r25, 0x04	; 4
    4c04:	9f 93       	push	r25
    4c06:	8f 93       	push	r24
    4c08:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    4c0c:	8b e8       	ldi	r24, 0x8B	; 139
    4c0e:	94 e0       	ldi	r25, 0x04	; 4
    4c10:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print_decs(mouse_report.y); print(" ");
    4c14:	20 91 c9 01 	lds	r18, 0x01C9
    4c18:	82 2f       	mov	r24, r18
    4c1a:	99 27       	eor	r25, r25
    4c1c:	87 fd       	sbrc	r24, 7
    4c1e:	90 95       	com	r25
    4c20:	9f 93       	push	r25
    4c22:	2f 93       	push	r18
    4c24:	88 e8       	ldi	r24, 0x88	; 136
    4c26:	94 e0       	ldi	r25, 0x04	; 4
    4c28:	9f 93       	push	r25
    4c2a:	8f 93       	push	r24
    4c2c:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    4c30:	86 e8       	ldi	r24, 0x86	; 134
    4c32:	94 e0       	ldi	r25, 0x04	; 4
    4c34:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print_decs(mouse_report.v); print(" ");
    4c38:	20 91 ca 01 	lds	r18, 0x01CA
    4c3c:	82 2f       	mov	r24, r18
    4c3e:	99 27       	eor	r25, r25
    4c40:	87 fd       	sbrc	r24, 7
    4c42:	90 95       	com	r25
    4c44:	9f 93       	push	r25
    4c46:	2f 93       	push	r18
    4c48:	83 e8       	ldi	r24, 0x83	; 131
    4c4a:	94 e0       	ldi	r25, 0x04	; 4
    4c4c:	9f 93       	push	r25
    4c4e:	8f 93       	push	r24
    4c50:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    4c54:	81 e8       	ldi	r24, 0x81	; 129
    4c56:	94 e0       	ldi	r25, 0x04	; 4
    4c58:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print_decs(mouse_report.h); print("](");
    4c5c:	20 91 cb 01 	lds	r18, 0x01CB
    4c60:	82 2f       	mov	r24, r18
    4c62:	99 27       	eor	r25, r25
    4c64:	87 fd       	sbrc	r24, 7
    4c66:	90 95       	com	r25
    4c68:	9f 93       	push	r25
    4c6a:	2f 93       	push	r18
    4c6c:	8e e7       	ldi	r24, 0x7E	; 126
    4c6e:	94 e0       	ldi	r25, 0x04	; 4
    4c70:	9f 93       	push	r25
    4c72:	8f 93       	push	r24
    4c74:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    4c78:	8b e7       	ldi	r24, 0x7B	; 123
    4c7a:	94 e0       	ldi	r25, 0x04	; 4
    4c7c:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print_dec(mousekey_repeat); print("/");
    4c80:	80 91 c6 01 	lds	r24, 0x01C6
    4c84:	1f 92       	push	r1
    4c86:	8f 93       	push	r24
    4c88:	88 e7       	ldi	r24, 0x78	; 120
    4c8a:	94 e0       	ldi	r25, 0x04	; 4
    4c8c:	9f 93       	push	r25
    4c8e:	8f 93       	push	r24
    4c90:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    4c94:	86 e7       	ldi	r24, 0x76	; 118
    4c96:	94 e0       	ldi	r25, 0x04	; 4
    4c98:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print_dec(mousekey_accel); print(")\n");
    4c9c:	80 91 c5 01 	lds	r24, 0x01C5
    4ca0:	1f 92       	push	r1
    4ca2:	8f 93       	push	r24
    4ca4:	83 e7       	ldi	r24, 0x73	; 115
    4ca6:	94 e0       	ldi	r25, 0x04	; 4
    4ca8:	9f 93       	push	r25
    4caa:	8f 93       	push	r24
    4cac:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    4cb0:	80 e7       	ldi	r24, 0x70	; 112
    4cb2:	94 e0       	ldi	r25, 0x04	; 4
    4cb4:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    4cb8:	8d b7       	in	r24, 0x3d	; 61
    4cba:	9e b7       	in	r25, 0x3e	; 62
    4cbc:	4c 96       	adiw	r24, 0x1c	; 28
    4cbe:	0f b6       	in	r0, 0x3f	; 63
    4cc0:	f8 94       	cli
    4cc2:	9e bf       	out	0x3e, r25	; 62
    4cc4:	0f be       	out	0x3f, r0	; 63
    4cc6:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    4cc8:	87 ec       	ldi	r24, 0xC7	; 199
    4cca:	91 e0       	ldi	r25, 0x01	; 1
    4ccc:	0e 94 20 13 	call	0x2640	; 0x2640 <host_mouse_send>
    last_timer = timer_read();
    4cd0:	0e 94 2b 22 	call	0x4456	; 0x4456 <timer_read>
    4cd4:	90 93 c4 01 	sts	0x01C4, r25
    4cd8:	80 93 c3 01 	sts	0x01C3, r24
    4cdc:	08 95       	ret

00004cde <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    4cde:	1f 93       	push	r17
    4ce0:	cf 93       	push	r28
    4ce2:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4ce4:	80 91 c3 01 	lds	r24, 0x01C3
    4ce8:	90 91 c4 01 	lds	r25, 0x01C4
    4cec:	0e 94 37 22 	call	0x446e	; 0x446e <timer_elapsed>
    4cf0:	40 91 c6 01 	lds	r20, 0x01C6
    4cf4:	44 23       	and	r20, r20
    4cf6:	21 f0       	breq	.+8      	; 0x4d00 <mousekey_task+0x22>
    4cf8:	20 91 13 01 	lds	r18, 0x0113
    4cfc:	30 e0       	ldi	r19, 0x00	; 0
    4cfe:	06 c0       	rjmp	.+12     	; 0x4d0c <mousekey_task+0x2e>
    4d00:	20 91 14 01 	lds	r18, 0x0114
    4d04:	5a e0       	ldi	r21, 0x0A	; 10
    4d06:	25 9f       	mul	r18, r21
    4d08:	90 01       	movw	r18, r0
    4d0a:	11 24       	eor	r1, r1
    4d0c:	82 17       	cp	r24, r18
    4d0e:	93 07       	cpc	r25, r19
    4d10:	08 f4       	brcc	.+2      	; 0x4d14 <mousekey_task+0x36>
    4d12:	82 c0       	rjmp	.+260    	; 0x4e18 <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4d14:	80 91 c8 01 	lds	r24, 0x01C8
    4d18:	10 91 c9 01 	lds	r17, 0x01C9
    4d1c:	d0 91 ca 01 	lds	r29, 0x01CA
    4d20:	c0 91 cb 01 	lds	r28, 0x01CB
    4d24:	81 11       	cpse	r24, r1
    4d26:	07 c0       	rjmp	.+14     	; 0x4d36 <mousekey_task+0x58>
    4d28:	11 11       	cpse	r17, r1
    4d2a:	05 c0       	rjmp	.+10     	; 0x4d36 <mousekey_task+0x58>
    4d2c:	d1 11       	cpse	r29, r1
    4d2e:	03 c0       	rjmp	.+6      	; 0x4d36 <mousekey_task+0x58>
    4d30:	cc 23       	and	r28, r28
    4d32:	09 f4       	brne	.+2      	; 0x4d36 <mousekey_task+0x58>
    4d34:	71 c0       	rjmp	.+226    	; 0x4e18 <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    4d36:	4f 3f       	cpi	r20, 0xFF	; 255
    4d38:	19 f0       	breq	.+6      	; 0x4d40 <mousekey_task+0x62>
        mousekey_repeat++;
    4d3a:	4f 5f       	subi	r20, 0xFF	; 255
    4d3c:	40 93 c6 01 	sts	0x01C6, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4d40:	18 16       	cp	r1, r24
    4d42:	24 f4       	brge	.+8      	; 0x4d4c <mousekey_task+0x6e>
    4d44:	0e 94 74 24 	call	0x48e8	; 0x48e8 <move_unit>
    4d48:	80 93 c8 01 	sts	0x01C8, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4d4c:	80 91 c8 01 	lds	r24, 0x01C8
    4d50:	87 ff       	sbrs	r24, 7
    4d52:	05 c0       	rjmp	.+10     	; 0x4d5e <mousekey_task+0x80>
    4d54:	0e 94 74 24 	call	0x48e8	; 0x48e8 <move_unit>
    4d58:	81 95       	neg	r24
    4d5a:	80 93 c8 01 	sts	0x01C8, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4d5e:	11 16       	cp	r1, r17
    4d60:	24 f4       	brge	.+8      	; 0x4d6a <mousekey_task+0x8c>
    4d62:	0e 94 74 24 	call	0x48e8	; 0x48e8 <move_unit>
    4d66:	80 93 c9 01 	sts	0x01C9, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4d6a:	80 91 c9 01 	lds	r24, 0x01C9
    4d6e:	87 ff       	sbrs	r24, 7
    4d70:	05 c0       	rjmp	.+10     	; 0x4d7c <mousekey_task+0x9e>
    4d72:	0e 94 74 24 	call	0x48e8	; 0x48e8 <move_unit>
    4d76:	81 95       	neg	r24
    4d78:	80 93 c9 01 	sts	0x01C9, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    4d7c:	60 91 c8 01 	lds	r22, 0x01C8
    4d80:	66 23       	and	r22, r22
    4d82:	39 f1       	breq	.+78     	; 0x4dd2 <mousekey_task+0xf4>
    4d84:	10 91 c9 01 	lds	r17, 0x01C9
    4d88:	11 23       	and	r17, r17
    4d8a:	19 f1       	breq	.+70     	; 0x4dd2 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    4d8c:	77 27       	eor	r23, r23
    4d8e:	67 fd       	sbrc	r22, 7
    4d90:	70 95       	com	r23
    4d92:	87 2f       	mov	r24, r23
    4d94:	97 2f       	mov	r25, r23
    4d96:	0e 94 0f 33 	call	0x661e	; 0x661e <__floatsisf>
    4d9a:	23 e3       	ldi	r18, 0x33	; 51
    4d9c:	33 e3       	ldi	r19, 0x33	; 51
    4d9e:	43 e3       	ldi	r20, 0x33	; 51
    4da0:	5f e3       	ldi	r21, 0x3F	; 63
    4da2:	0e 94 73 33 	call	0x66e6	; 0x66e6 <__mulsf3>
    4da6:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <__fixsfsi>
    4daa:	60 93 c8 01 	sts	0x01C8, r22
        mouse_report.y *= 0.7;
    4dae:	61 2f       	mov	r22, r17
    4db0:	77 27       	eor	r23, r23
    4db2:	67 fd       	sbrc	r22, 7
    4db4:	70 95       	com	r23
    4db6:	87 2f       	mov	r24, r23
    4db8:	97 2f       	mov	r25, r23
    4dba:	0e 94 0f 33 	call	0x661e	; 0x661e <__floatsisf>
    4dbe:	23 e3       	ldi	r18, 0x33	; 51
    4dc0:	33 e3       	ldi	r19, 0x33	; 51
    4dc2:	43 e3       	ldi	r20, 0x33	; 51
    4dc4:	5f e3       	ldi	r21, 0x3F	; 63
    4dc6:	0e 94 73 33 	call	0x66e6	; 0x66e6 <__mulsf3>
    4dca:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <__fixsfsi>
    4dce:	60 93 c9 01 	sts	0x01C9, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4dd2:	1d 16       	cp	r1, r29
    4dd4:	24 f4       	brge	.+8      	; 0x4dde <mousekey_task+0x100>
    4dd6:	0e 94 bc 24 	call	0x4978	; 0x4978 <wheel_unit>
    4dda:	80 93 ca 01 	sts	0x01CA, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4dde:	80 91 ca 01 	lds	r24, 0x01CA
    4de2:	87 ff       	sbrs	r24, 7
    4de4:	05 c0       	rjmp	.+10     	; 0x4df0 <mousekey_task+0x112>
    4de6:	0e 94 bc 24 	call	0x4978	; 0x4978 <wheel_unit>
    4dea:	81 95       	neg	r24
    4dec:	80 93 ca 01 	sts	0x01CA, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4df0:	1c 16       	cp	r1, r28
    4df2:	24 f4       	brge	.+8      	; 0x4dfc <mousekey_task+0x11e>
    4df4:	0e 94 bc 24 	call	0x4978	; 0x4978 <wheel_unit>
    4df8:	80 93 cb 01 	sts	0x01CB, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4dfc:	80 91 cb 01 	lds	r24, 0x01CB
    4e00:	87 ff       	sbrs	r24, 7
    4e02:	05 c0       	rjmp	.+10     	; 0x4e0e <mousekey_task+0x130>
    4e04:	0e 94 bc 24 	call	0x4978	; 0x4978 <wheel_unit>
    4e08:	81 95       	neg	r24
    4e0a:	80 93 cb 01 	sts	0x01CB, r24

    mousekey_send();
}
    4e0e:	df 91       	pop	r29
    4e10:	cf 91       	pop	r28
    4e12:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    4e14:	0c 94 e2 25 	jmp	0x4bc4	; 0x4bc4 <mousekey_send>
}
    4e18:	df 91       	pop	r29
    4e1a:	cf 91       	pop	r28
    4e1c:	1f 91       	pop	r17
    4e1e:	08 95       	ret

00004e20 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    4e20:	e7 ec       	ldi	r30, 0xC7	; 199
    4e22:	f1 e0       	ldi	r31, 0x01	; 1
    4e24:	85 e0       	ldi	r24, 0x05	; 5
    4e26:	df 01       	movw	r26, r30
    4e28:	1d 92       	st	X+, r1
    4e2a:	8a 95       	dec	r24
    4e2c:	e9 f7       	brne	.-6      	; 0x4e28 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4e2e:	10 92 c6 01 	sts	0x01C6, r1
    mousekey_accel = 0;
    4e32:	10 92 c5 01 	sts	0x01C5, r1
    4e36:	08 95       	ret

00004e38 <command_console_help>:
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\n----- Console Help -----\n");
    4e38:	86 e6       	ldi	r24, 0x66	; 102
    4e3a:	99 e0       	ldi	r25, 0x09	; 9
    4e3c:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("ESC/q:	quit\n");
    4e40:	89 e5       	ldi	r24, 0x59	; 89
    4e42:	99 e0       	ldi	r25, 0x09	; 9
    4e44:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
#ifdef MOUSEKEY_ENABLE
    print("m:	mousekey\n");
    4e48:	8c e4       	ldi	r24, 0x4C	; 76
    4e4a:	99 e0       	ldi	r25, 0x09	; 9
    4e4c:	0c 94 b6 08 	jmp	0x116c	; 0x116c <xputs>

00004e50 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\n----- Mousekey Parameters Help -----\n");
    4e50:	89 ec       	ldi	r24, 0xC9	; 201
    4e52:	98 e0       	ldi	r25, 0x08	; 8
    4e54:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("ESC/q:	quit\n");
    4e58:	8c eb       	ldi	r24, 0xBC	; 188
    4e5a:	98 e0       	ldi	r25, 0x08	; 8
    4e5c:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("1:	select mk_delay(*10ms)\n");
    4e60:	81 ea       	ldi	r24, 0xA1	; 161
    4e62:	98 e0       	ldi	r25, 0x08	; 8
    4e64:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("2:	select mk_interval(ms)\n");
    4e68:	86 e8       	ldi	r24, 0x86	; 134
    4e6a:	98 e0       	ldi	r25, 0x08	; 8
    4e6c:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("3:	select mk_max_speed\n");
    4e70:	8e e6       	ldi	r24, 0x6E	; 110
    4e72:	98 e0       	ldi	r25, 0x08	; 8
    4e74:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("4:	select mk_time_to_max\n");
    4e78:	84 e5       	ldi	r24, 0x54	; 84
    4e7a:	98 e0       	ldi	r25, 0x08	; 8
    4e7c:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("5:	select mk_wheel_max_speed\n");
    4e80:	86 e3       	ldi	r24, 0x36	; 54
    4e82:	98 e0       	ldi	r25, 0x08	; 8
    4e84:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("6:	select mk_wheel_time_to_max\n");
    4e88:	86 e1       	ldi	r24, 0x16	; 22
    4e8a:	98 e0       	ldi	r25, 0x08	; 8
    4e8c:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("p:	print parameters\n");
    4e90:	81 e0       	ldi	r24, 0x01	; 1
    4e92:	98 e0       	ldi	r25, 0x08	; 8
    4e94:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("d:	set default values\n");
    4e98:	8a ee       	ldi	r24, 0xEA	; 234
    4e9a:	97 e0       	ldi	r25, 0x07	; 7
    4e9c:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("up:	increase parameters(+1)\n");
    4ea0:	8d ec       	ldi	r24, 0xCD	; 205
    4ea2:	97 e0       	ldi	r25, 0x07	; 7
    4ea4:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("down:	decrease parameters(-1)\n");
    4ea8:	8e ea       	ldi	r24, 0xAE	; 174
    4eaa:	97 e0       	ldi	r25, 0x07	; 7
    4eac:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("pgup:	increase parameters(+10)\n");
    4eb0:	8e e8       	ldi	r24, 0x8E	; 142
    4eb2:	97 e0       	ldi	r25, 0x07	; 7
    4eb4:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("pgdown:	decrease parameters(-10)\n");
    4eb8:	8c e6       	ldi	r24, 0x6C	; 108
    4eba:	97 e0       	ldi	r25, 0x07	; 7
    4ebc:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("\nspeed = delta * max_speed * (repeat / time_to_max)\n");
    4ec0:	87 e3       	ldi	r24, 0x37	; 55
    4ec2:	97 e0       	ldi	r25, 0x07	; 7
    4ec4:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("where delta: cursor="); pdec(MOUSEKEY_MOVE_DELTA);
    4ec8:	82 e2       	ldi	r24, 0x22	; 34
    4eca:	97 e0       	ldi	r25, 0x07	; 7
    4ecc:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    4ed0:	1f 92       	push	r1
    4ed2:	85 e0       	ldi	r24, 0x05	; 5
    4ed4:	8f 93       	push	r24
    4ed6:	8f e1       	ldi	r24, 0x1F	; 31
    4ed8:	97 e0       	ldi	r25, 0x07	; 7
    4eda:	9f 93       	push	r25
    4edc:	8f 93       	push	r24
    4ede:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    print(", wheel="); pdec(MOUSEKEY_WHEEL_DELTA); print("\n");
    4ee2:	86 e1       	ldi	r24, 0x16	; 22
    4ee4:	97 e0       	ldi	r25, 0x07	; 7
    4ee6:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    4eea:	1f 92       	push	r1
    4eec:	81 e0       	ldi	r24, 0x01	; 1
    4eee:	8f 93       	push	r24
    4ef0:	83 e1       	ldi	r24, 0x13	; 19
    4ef2:	97 e0       	ldi	r25, 0x07	; 7
    4ef4:	9f 93       	push	r25
    4ef6:	8f 93       	push	r24
    4ef8:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    4efc:	81 e1       	ldi	r24, 0x11	; 17
    4efe:	97 e0       	ldi	r25, 0x07	; 7
    4f00:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
    4f04:	8d b7       	in	r24, 0x3d	; 61
    4f06:	9e b7       	in	r25, 0x3e	; 62
    4f08:	08 96       	adiw	r24, 0x08	; 8
    4f0a:	0f b6       	in	r0, 0x3f	; 63
    4f0c:	f8 94       	cli
    4f0e:	9e bf       	out	0x3e, r25	; 62
    4f10:	0f be       	out	0x3f, r0	; 63
    4f12:	8d bf       	out	0x3d, r24	; 61
    4f14:	84 ee       	ldi	r24, 0xE4	; 228
    4f16:	96 e0       	ldi	r25, 0x06	; 6
    4f18:	0c 94 b6 08 	jmp	0x116c	; 0x116c <xputs>

00004f1c <mousekey_param_inc>:
}

#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    4f1c:	83 30       	cpi	r24, 0x03	; 3
    4f1e:	09 f4       	brne	.+2      	; 0x4f22 <mousekey_param_inc+0x6>
    4f20:	59 c0       	rjmp	.+178    	; 0x4fd4 <mousekey_param_inc+0xb8>
    4f22:	28 f4       	brcc	.+10     	; 0x4f2e <mousekey_param_inc+0x12>
    4f24:	81 30       	cpi	r24, 0x01	; 1
    4f26:	61 f0       	breq	.+24     	; 0x4f40 <mousekey_param_inc+0x24>
    4f28:	82 30       	cpi	r24, 0x02	; 2
    4f2a:	79 f1       	breq	.+94     	; 0x4f8a <mousekey_param_inc+0x6e>
    4f2c:	08 95       	ret
    4f2e:	85 30       	cpi	r24, 0x05	; 5
    4f30:	09 f4       	brne	.+2      	; 0x4f34 <mousekey_param_inc+0x18>
    4f32:	9a c0       	rjmp	.+308    	; 0x5068 <mousekey_param_inc+0x14c>
    4f34:	08 f4       	brcc	.+2      	; 0x4f38 <mousekey_param_inc+0x1c>
    4f36:	73 c0       	rjmp	.+230    	; 0x501e <mousekey_param_inc+0x102>
    4f38:	86 30       	cpi	r24, 0x06	; 6
    4f3a:	09 f4       	brne	.+2      	; 0x4f3e <mousekey_param_inc+0x22>
    4f3c:	ba c0       	rjmp	.+372    	; 0x50b2 <mousekey_param_inc+0x196>
    4f3e:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4f40:	20 91 14 01 	lds	r18, 0x0114
    4f44:	86 2f       	mov	r24, r22
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	82 0f       	add	r24, r18
    4f4a:	91 1d       	adc	r25, r1
    4f4c:	8f 3f       	cpi	r24, 0xFF	; 255
    4f4e:	91 05       	cpc	r25, r1
    4f50:	20 f4       	brcc	.+8      	; 0x4f5a <mousekey_param_inc+0x3e>
                mk_delay += inc;
    4f52:	62 0f       	add	r22, r18
    4f54:	60 93 14 01 	sts	0x0114, r22
    4f58:	03 c0       	rjmp	.+6      	; 0x4f60 <mousekey_param_inc+0x44>
            else
                mk_delay = UINT8_MAX;
    4f5a:	8f ef       	ldi	r24, 0xFF	; 255
    4f5c:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_delay);
    4f60:	80 ec       	ldi	r24, 0xC0	; 192
    4f62:	95 e0       	ldi	r25, 0x05	; 5
    4f64:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    4f68:	80 91 14 01 	lds	r24, 0x0114
    4f6c:	1f 92       	push	r1
    4f6e:	8f 93       	push	r24
    4f70:	8d eb       	ldi	r24, 0xBD	; 189
    4f72:	95 e0       	ldi	r25, 0x05	; 5
    4f74:	9f 93       	push	r25
    4f76:	8f 93       	push	r24
    4f78:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    4f7c:	0f 90       	pop	r0
    4f7e:	0f 90       	pop	r0
    4f80:	0f 90       	pop	r0
    4f82:	0f 90       	pop	r0
    4f84:	8b eb       	ldi	r24, 0xBB	; 187
    4f86:	95 e0       	ldi	r25, 0x05	; 5
    4f88:	b8 c0       	rjmp	.+368    	; 0x50fa <mousekey_param_inc+0x1de>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4f8a:	20 91 13 01 	lds	r18, 0x0113
    4f8e:	86 2f       	mov	r24, r22
    4f90:	90 e0       	ldi	r25, 0x00	; 0
    4f92:	82 0f       	add	r24, r18
    4f94:	91 1d       	adc	r25, r1
    4f96:	8f 3f       	cpi	r24, 0xFF	; 255
    4f98:	91 05       	cpc	r25, r1
    4f9a:	20 f4       	brcc	.+8      	; 0x4fa4 <mousekey_param_inc+0x88>
                mk_interval += inc;
    4f9c:	62 0f       	add	r22, r18
    4f9e:	60 93 13 01 	sts	0x0113, r22
    4fa2:	03 c0       	rjmp	.+6      	; 0x4faa <mousekey_param_inc+0x8e>
            else
                mk_interval = UINT8_MAX;
    4fa4:	8f ef       	ldi	r24, 0xFF	; 255
    4fa6:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_interval);
    4faa:	8c ea       	ldi	r24, 0xAC	; 172
    4fac:	95 e0       	ldi	r25, 0x05	; 5
    4fae:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    4fb2:	80 91 13 01 	lds	r24, 0x0113
    4fb6:	1f 92       	push	r1
    4fb8:	8f 93       	push	r24
    4fba:	89 ea       	ldi	r24, 0xA9	; 169
    4fbc:	95 e0       	ldi	r25, 0x05	; 5
    4fbe:	9f 93       	push	r25
    4fc0:	8f 93       	push	r24
    4fc2:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    4fc6:	0f 90       	pop	r0
    4fc8:	0f 90       	pop	r0
    4fca:	0f 90       	pop	r0
    4fcc:	0f 90       	pop	r0
    4fce:	87 ea       	ldi	r24, 0xA7	; 167
    4fd0:	95 e0       	ldi	r25, 0x05	; 5
    4fd2:	93 c0       	rjmp	.+294    	; 0x50fa <mousekey_param_inc+0x1de>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4fd4:	20 91 12 01 	lds	r18, 0x0112
    4fd8:	86 2f       	mov	r24, r22
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	82 0f       	add	r24, r18
    4fde:	91 1d       	adc	r25, r1
    4fe0:	8f 3f       	cpi	r24, 0xFF	; 255
    4fe2:	91 05       	cpc	r25, r1
    4fe4:	20 f4       	brcc	.+8      	; 0x4fee <mousekey_param_inc+0xd2>
                mk_max_speed += inc;
    4fe6:	62 0f       	add	r22, r18
    4fe8:	60 93 12 01 	sts	0x0112, r22
    4fec:	03 c0       	rjmp	.+6      	; 0x4ff4 <mousekey_param_inc+0xd8>
            else
                mk_max_speed = UINT8_MAX;
    4fee:	8f ef       	ldi	r24, 0xFF	; 255
    4ff0:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_max_speed);
    4ff4:	87 e9       	ldi	r24, 0x97	; 151
    4ff6:	95 e0       	ldi	r25, 0x05	; 5
    4ff8:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    4ffc:	80 91 12 01 	lds	r24, 0x0112
    5000:	1f 92       	push	r1
    5002:	8f 93       	push	r24
    5004:	84 e9       	ldi	r24, 0x94	; 148
    5006:	95 e0       	ldi	r25, 0x05	; 5
    5008:	9f 93       	push	r25
    500a:	8f 93       	push	r24
    500c:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5010:	0f 90       	pop	r0
    5012:	0f 90       	pop	r0
    5014:	0f 90       	pop	r0
    5016:	0f 90       	pop	r0
    5018:	82 e9       	ldi	r24, 0x92	; 146
    501a:	95 e0       	ldi	r25, 0x05	; 5
    501c:	6e c0       	rjmp	.+220    	; 0x50fa <mousekey_param_inc+0x1de>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    501e:	20 91 11 01 	lds	r18, 0x0111
    5022:	86 2f       	mov	r24, r22
    5024:	90 e0       	ldi	r25, 0x00	; 0
    5026:	82 0f       	add	r24, r18
    5028:	91 1d       	adc	r25, r1
    502a:	8f 3f       	cpi	r24, 0xFF	; 255
    502c:	91 05       	cpc	r25, r1
    502e:	20 f4       	brcc	.+8      	; 0x5038 <mousekey_param_inc+0x11c>
                mk_time_to_max += inc;
    5030:	62 0f       	add	r22, r18
    5032:	60 93 11 01 	sts	0x0111, r22
    5036:	03 c0       	rjmp	.+6      	; 0x503e <mousekey_param_inc+0x122>
            else
                mk_time_to_max = UINT8_MAX;
    5038:	8f ef       	ldi	r24, 0xFF	; 255
    503a:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_time_to_max);
    503e:	80 e8       	ldi	r24, 0x80	; 128
    5040:	95 e0       	ldi	r25, 0x05	; 5
    5042:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5046:	80 91 11 01 	lds	r24, 0x0111
    504a:	1f 92       	push	r1
    504c:	8f 93       	push	r24
    504e:	8d e7       	ldi	r24, 0x7D	; 125
    5050:	95 e0       	ldi	r25, 0x05	; 5
    5052:	9f 93       	push	r25
    5054:	8f 93       	push	r24
    5056:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    505a:	0f 90       	pop	r0
    505c:	0f 90       	pop	r0
    505e:	0f 90       	pop	r0
    5060:	0f 90       	pop	r0
    5062:	8b e7       	ldi	r24, 0x7B	; 123
    5064:	95 e0       	ldi	r25, 0x05	; 5
    5066:	49 c0       	rjmp	.+146    	; 0x50fa <mousekey_param_inc+0x1de>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    5068:	20 91 10 01 	lds	r18, 0x0110
    506c:	86 2f       	mov	r24, r22
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	82 0f       	add	r24, r18
    5072:	91 1d       	adc	r25, r1
    5074:	8f 3f       	cpi	r24, 0xFF	; 255
    5076:	91 05       	cpc	r25, r1
    5078:	20 f4       	brcc	.+8      	; 0x5082 <mousekey_param_inc+0x166>
                mk_wheel_max_speed += inc;
    507a:	62 0f       	add	r22, r18
    507c:	60 93 10 01 	sts	0x0110, r22
    5080:	03 c0       	rjmp	.+6      	; 0x5088 <mousekey_param_inc+0x16c>
            else
                mk_wheel_max_speed = UINT8_MAX;
    5082:	8f ef       	ldi	r24, 0xFF	; 255
    5084:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    5088:	85 e6       	ldi	r24, 0x65	; 101
    508a:	95 e0       	ldi	r25, 0x05	; 5
    508c:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5090:	80 91 10 01 	lds	r24, 0x0110
    5094:	1f 92       	push	r1
    5096:	8f 93       	push	r24
    5098:	82 e6       	ldi	r24, 0x62	; 98
    509a:	95 e0       	ldi	r25, 0x05	; 5
    509c:	9f 93       	push	r25
    509e:	8f 93       	push	r24
    50a0:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    50a4:	0f 90       	pop	r0
    50a6:	0f 90       	pop	r0
    50a8:	0f 90       	pop	r0
    50aa:	0f 90       	pop	r0
    50ac:	80 e6       	ldi	r24, 0x60	; 96
    50ae:	95 e0       	ldi	r25, 0x05	; 5
    50b0:	24 c0       	rjmp	.+72     	; 0x50fa <mousekey_param_inc+0x1de>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    50b2:	20 91 0f 01 	lds	r18, 0x010F
    50b6:	86 2f       	mov	r24, r22
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	82 0f       	add	r24, r18
    50bc:	91 1d       	adc	r25, r1
    50be:	8f 3f       	cpi	r24, 0xFF	; 255
    50c0:	91 05       	cpc	r25, r1
    50c2:	20 f4       	brcc	.+8      	; 0x50cc <mousekey_param_inc+0x1b0>
                mk_wheel_time_to_max += inc;
    50c4:	62 0f       	add	r22, r18
    50c6:	60 93 0f 01 	sts	0x010F, r22
    50ca:	03 c0       	rjmp	.+6      	; 0x50d2 <mousekey_param_inc+0x1b6>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    50cc:	8f ef       	ldi	r24, 0xFF	; 255
    50ce:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    50d2:	88 e4       	ldi	r24, 0x48	; 72
    50d4:	95 e0       	ldi	r25, 0x05	; 5
    50d6:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    50da:	80 91 0f 01 	lds	r24, 0x010F
    50de:	1f 92       	push	r1
    50e0:	8f 93       	push	r24
    50e2:	85 e4       	ldi	r24, 0x45	; 69
    50e4:	95 e0       	ldi	r25, 0x05	; 5
    50e6:	9f 93       	push	r25
    50e8:	8f 93       	push	r24
    50ea:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    50ee:	0f 90       	pop	r0
    50f0:	0f 90       	pop	r0
    50f2:	0f 90       	pop	r0
    50f4:	0f 90       	pop	r0
    50f6:	83 e4       	ldi	r24, 0x43	; 67
    50f8:	95 e0       	ldi	r25, 0x05	; 5
    50fa:	0c 94 b6 08 	jmp	0x116c	; 0x116c <xputs>

000050fe <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    50fe:	83 30       	cpi	r24, 0x03	; 3
    5100:	09 f4       	brne	.+2      	; 0x5104 <mousekey_param_dec+0x6>
    5102:	4d c0       	rjmp	.+154    	; 0x519e <mousekey_param_dec+0xa0>
    5104:	28 f4       	brcc	.+10     	; 0x5110 <mousekey_param_dec+0x12>
    5106:	81 30       	cpi	r24, 0x01	; 1
    5108:	61 f0       	breq	.+24     	; 0x5122 <mousekey_param_dec+0x24>
    510a:	82 30       	cpi	r24, 0x02	; 2
    510c:	49 f1       	breq	.+82     	; 0x5160 <mousekey_param_dec+0x62>
    510e:	08 95       	ret
    5110:	85 30       	cpi	r24, 0x05	; 5
    5112:	09 f4       	brne	.+2      	; 0x5116 <mousekey_param_dec+0x18>
    5114:	82 c0       	rjmp	.+260    	; 0x521a <mousekey_param_dec+0x11c>
    5116:	08 f4       	brcc	.+2      	; 0x511a <mousekey_param_dec+0x1c>
    5118:	61 c0       	rjmp	.+194    	; 0x51dc <mousekey_param_dec+0xde>
    511a:	86 30       	cpi	r24, 0x06	; 6
    511c:	09 f4       	brne	.+2      	; 0x5120 <mousekey_param_dec+0x22>
    511e:	9c c0       	rjmp	.+312    	; 0x5258 <mousekey_param_dec+0x15a>
    5120:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    5122:	80 91 14 01 	lds	r24, 0x0114
    5126:	68 17       	cp	r22, r24
    5128:	20 f4       	brcc	.+8      	; 0x5132 <mousekey_param_dec+0x34>
                mk_delay -= dec;
    512a:	86 1b       	sub	r24, r22
    512c:	80 93 14 01 	sts	0x0114, r24
    5130:	02 c0       	rjmp	.+4      	; 0x5136 <mousekey_param_dec+0x38>
            else
                mk_delay = 0;
    5132:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_delay);
    5136:	87 e3       	ldi	r24, 0x37	; 55
    5138:	95 e0       	ldi	r25, 0x05	; 5
    513a:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    513e:	80 91 14 01 	lds	r24, 0x0114
    5142:	1f 92       	push	r1
    5144:	8f 93       	push	r24
    5146:	84 e3       	ldi	r24, 0x34	; 52
    5148:	95 e0       	ldi	r25, 0x05	; 5
    514a:	9f 93       	push	r25
    514c:	8f 93       	push	r24
    514e:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5152:	0f 90       	pop	r0
    5154:	0f 90       	pop	r0
    5156:	0f 90       	pop	r0
    5158:	0f 90       	pop	r0
    515a:	82 e3       	ldi	r24, 0x32	; 50
    515c:	95 e0       	ldi	r25, 0x05	; 5
    515e:	9a c0       	rjmp	.+308    	; 0x5294 <mousekey_param_dec+0x196>
            break;
        case 2:
            if (mk_interval > dec)
    5160:	80 91 13 01 	lds	r24, 0x0113
    5164:	68 17       	cp	r22, r24
    5166:	20 f4       	brcc	.+8      	; 0x5170 <mousekey_param_dec+0x72>
                mk_interval -= dec;
    5168:	86 1b       	sub	r24, r22
    516a:	80 93 13 01 	sts	0x0113, r24
    516e:	02 c0       	rjmp	.+4      	; 0x5174 <mousekey_param_dec+0x76>
            else
                mk_interval = 0;
    5170:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_interval);
    5174:	83 e2       	ldi	r24, 0x23	; 35
    5176:	95 e0       	ldi	r25, 0x05	; 5
    5178:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    517c:	80 91 13 01 	lds	r24, 0x0113
    5180:	1f 92       	push	r1
    5182:	8f 93       	push	r24
    5184:	80 e2       	ldi	r24, 0x20	; 32
    5186:	95 e0       	ldi	r25, 0x05	; 5
    5188:	9f 93       	push	r25
    518a:	8f 93       	push	r24
    518c:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5190:	0f 90       	pop	r0
    5192:	0f 90       	pop	r0
    5194:	0f 90       	pop	r0
    5196:	0f 90       	pop	r0
    5198:	8e e1       	ldi	r24, 0x1E	; 30
    519a:	95 e0       	ldi	r25, 0x05	; 5
    519c:	7b c0       	rjmp	.+246    	; 0x5294 <mousekey_param_dec+0x196>
            break;
        case 3:
            if (mk_max_speed > dec)
    519e:	80 91 12 01 	lds	r24, 0x0112
    51a2:	68 17       	cp	r22, r24
    51a4:	20 f4       	brcc	.+8      	; 0x51ae <mousekey_param_dec+0xb0>
                mk_max_speed -= dec;
    51a6:	86 1b       	sub	r24, r22
    51a8:	80 93 12 01 	sts	0x0112, r24
    51ac:	02 c0       	rjmp	.+4      	; 0x51b2 <mousekey_param_dec+0xb4>
            else
                mk_max_speed = 0;
    51ae:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_max_speed);
    51b2:	8e e0       	ldi	r24, 0x0E	; 14
    51b4:	95 e0       	ldi	r25, 0x05	; 5
    51b6:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    51ba:	80 91 12 01 	lds	r24, 0x0112
    51be:	1f 92       	push	r1
    51c0:	8f 93       	push	r24
    51c2:	8b e0       	ldi	r24, 0x0B	; 11
    51c4:	95 e0       	ldi	r25, 0x05	; 5
    51c6:	9f 93       	push	r25
    51c8:	8f 93       	push	r24
    51ca:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    51ce:	0f 90       	pop	r0
    51d0:	0f 90       	pop	r0
    51d2:	0f 90       	pop	r0
    51d4:	0f 90       	pop	r0
    51d6:	89 e0       	ldi	r24, 0x09	; 9
    51d8:	95 e0       	ldi	r25, 0x05	; 5
    51da:	5c c0       	rjmp	.+184    	; 0x5294 <mousekey_param_dec+0x196>
            break;
        case 4:
            if (mk_time_to_max > dec)
    51dc:	80 91 11 01 	lds	r24, 0x0111
    51e0:	68 17       	cp	r22, r24
    51e2:	20 f4       	brcc	.+8      	; 0x51ec <mousekey_param_dec+0xee>
                mk_time_to_max -= dec;
    51e4:	86 1b       	sub	r24, r22
    51e6:	80 93 11 01 	sts	0x0111, r24
    51ea:	02 c0       	rjmp	.+4      	; 0x51f0 <mousekey_param_dec+0xf2>
            else
                mk_time_to_max = 0;
    51ec:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_time_to_max);
    51f0:	87 ef       	ldi	r24, 0xF7	; 247
    51f2:	94 e0       	ldi	r25, 0x04	; 4
    51f4:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    51f8:	80 91 11 01 	lds	r24, 0x0111
    51fc:	1f 92       	push	r1
    51fe:	8f 93       	push	r24
    5200:	84 ef       	ldi	r24, 0xF4	; 244
    5202:	94 e0       	ldi	r25, 0x04	; 4
    5204:	9f 93       	push	r25
    5206:	8f 93       	push	r24
    5208:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    520c:	0f 90       	pop	r0
    520e:	0f 90       	pop	r0
    5210:	0f 90       	pop	r0
    5212:	0f 90       	pop	r0
    5214:	82 ef       	ldi	r24, 0xF2	; 242
    5216:	94 e0       	ldi	r25, 0x04	; 4
    5218:	3d c0       	rjmp	.+122    	; 0x5294 <mousekey_param_dec+0x196>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    521a:	80 91 10 01 	lds	r24, 0x0110
    521e:	68 17       	cp	r22, r24
    5220:	20 f4       	brcc	.+8      	; 0x522a <mousekey_param_dec+0x12c>
                mk_wheel_max_speed -= dec;
    5222:	86 1b       	sub	r24, r22
    5224:	80 93 10 01 	sts	0x0110, r24
    5228:	02 c0       	rjmp	.+4      	; 0x522e <mousekey_param_dec+0x130>
            else
                mk_wheel_max_speed = 0;
    522a:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    522e:	8c ed       	ldi	r24, 0xDC	; 220
    5230:	94 e0       	ldi	r25, 0x04	; 4
    5232:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5236:	80 91 10 01 	lds	r24, 0x0110
    523a:	1f 92       	push	r1
    523c:	8f 93       	push	r24
    523e:	89 ed       	ldi	r24, 0xD9	; 217
    5240:	94 e0       	ldi	r25, 0x04	; 4
    5242:	9f 93       	push	r25
    5244:	8f 93       	push	r24
    5246:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    524a:	0f 90       	pop	r0
    524c:	0f 90       	pop	r0
    524e:	0f 90       	pop	r0
    5250:	0f 90       	pop	r0
    5252:	87 ed       	ldi	r24, 0xD7	; 215
    5254:	94 e0       	ldi	r25, 0x04	; 4
    5256:	1e c0       	rjmp	.+60     	; 0x5294 <mousekey_param_dec+0x196>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    5258:	80 91 0f 01 	lds	r24, 0x010F
    525c:	68 17       	cp	r22, r24
    525e:	20 f4       	brcc	.+8      	; 0x5268 <mousekey_param_dec+0x16a>
                mk_wheel_time_to_max -= dec;
    5260:	86 1b       	sub	r24, r22
    5262:	80 93 0f 01 	sts	0x010F, r24
    5266:	02 c0       	rjmp	.+4      	; 0x526c <mousekey_param_dec+0x16e>
            else
                mk_wheel_time_to_max = 0;
    5268:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    526c:	8f eb       	ldi	r24, 0xBF	; 191
    526e:	94 e0       	ldi	r25, 0x04	; 4
    5270:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5274:	80 91 0f 01 	lds	r24, 0x010F
    5278:	1f 92       	push	r1
    527a:	8f 93       	push	r24
    527c:	8c eb       	ldi	r24, 0xBC	; 188
    527e:	94 e0       	ldi	r25, 0x04	; 4
    5280:	9f 93       	push	r25
    5282:	8f 93       	push	r24
    5284:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5288:	0f 90       	pop	r0
    528a:	0f 90       	pop	r0
    528c:	0f 90       	pop	r0
    528e:	0f 90       	pop	r0
    5290:	8a eb       	ldi	r24, 0xBA	; 186
    5292:	94 e0       	ldi	r25, 0x04	; 4
    5294:	0c 94 b6 08 	jmp	0x116c	; 0x116c <xputs>

00005298 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    5298:	cf 93       	push	r28
    529a:	c8 2f       	mov	r28, r24
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    529c:	85 e3       	ldi	r24, 0x35	; 53
    529e:	99 e0       	ldi	r25, 0x09	; 9
    52a0:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    52a4:	60 91 a3 01 	lds	r22, 0x01A3
    52a8:	70 91 a4 01 	lds	r23, 0x01A4
    52ac:	80 91 a5 01 	lds	r24, 0x01A5
    52b0:	90 91 a6 01 	lds	r25, 0x01A6
    52b4:	0e 94 39 21 	call	0x4272	; 0x4272 <biton32>
    52b8:	1f 92       	push	r1
    52ba:	8f 93       	push	r24
    52bc:	22 e3       	ldi	r18, 0x32	; 50
    52be:	39 e0       	ldi	r19, 0x09	; 9
    52c0:	3f 93       	push	r19
    52c2:	2f 93       	push	r18
    52c4:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    print(" to "); print_dec(layer); print("\n");
    52c8:	8d e2       	ldi	r24, 0x2D	; 45
    52ca:	99 e0       	ldi	r25, 0x09	; 9
    52cc:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    52d0:	1f 92       	push	r1
    52d2:	cf 93       	push	r28
    52d4:	2a e2       	ldi	r18, 0x2A	; 42
    52d6:	39 e0       	ldi	r19, 0x09	; 9
    52d8:	3f 93       	push	r19
    52da:	2f 93       	push	r18
    52dc:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    52e0:	88 e2       	ldi	r24, 0x28	; 40
    52e2:	99 e0       	ldi	r25, 0x09	; 9
    52e4:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    default_layer_set(1UL<<layer);
    52e8:	61 e0       	ldi	r22, 0x01	; 1
    52ea:	70 e0       	ldi	r23, 0x00	; 0
    52ec:	80 e0       	ldi	r24, 0x00	; 0
    52ee:	90 e0       	ldi	r25, 0x00	; 0
    52f0:	04 c0       	rjmp	.+8      	; 0x52fa <switch_default_layer+0x62>
    52f2:	66 0f       	add	r22, r22
    52f4:	77 1f       	adc	r23, r23
    52f6:	88 1f       	adc	r24, r24
    52f8:	99 1f       	adc	r25, r25
    52fa:	ca 95       	dec	r28
    52fc:	d2 f7       	brpl	.-12     	; 0x52f2 <switch_default_layer+0x5a>
    52fe:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <default_layer_set>
    clear_keyboard();
    5302:	8d b7       	in	r24, 0x3d	; 61
    5304:	9e b7       	in	r25, 0x3e	; 62
    5306:	08 96       	adiw	r24, 0x08	; 8
    5308:	0f b6       	in	r0, 0x3f	; 63
    530a:	f8 94       	cli
    530c:	9e bf       	out	0x3e, r25	; 62
    530e:	0f be       	out	0x3f, r0	; 63
    5310:	8d bf       	out	0x3d, r24	; 61
}
    5312:	cf 91       	pop	r28
static void switch_default_layer(uint8_t layer)
{
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    print(" to "); print_dec(layer); print("\n");
    default_layer_set(1UL<<layer);
    clear_keyboard();
    5314:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <clear_keyboard>

00005318 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    5318:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
    switch (code) {
    531a:	48 2f       	mov	r20, r24
    531c:	50 e0       	ldi	r21, 0x00	; 0
    531e:	fa 01       	movw	r30, r20
    5320:	36 97       	sbiw	r30, 0x06	; 6
    5322:	e3 34       	cpi	r30, 0x43	; 67
    5324:	f1 05       	cpc	r31, r1
    5326:	08 f0       	brcs	.+2      	; 0x532a <command_common+0x12>
    5328:	ec c2       	rjmp	.+1496   	; 0x5902 <command_common+0x5ea>
    532a:	e0 59       	subi	r30, 0x90	; 144
    532c:	ff 4f       	sbci	r31, 0xFF	; 255
    532e:	0c 94 12 34 	jmp	0x6824	; 0x6824 <__tablejump2__>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    5332:	85 ed       	ldi	r24, 0xD5	; 213
    5334:	9f e0       	ldi	r25, 0x0F	; 15
    5336:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    533a:	8e ec       	ldi	r24, 0xCE	; 206
    533c:	9c e0       	ldi	r25, 0x0C	; 12
    533e:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5342:	0e 94 59 24 	call	0x48b2	; 0x48b2 <eeconfig_read_default_layer>
    5346:	1f 92       	push	r1
    5348:	8f 93       	push	r24
    534a:	8b ec       	ldi	r24, 0xCB	; 203
    534c:	9c e0       	ldi	r25, 0x0C	; 12
    534e:	9f 93       	push	r25
    5350:	8f 93       	push	r24
    5352:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5356:	89 ec       	ldi	r24, 0xC9	; 201
    5358:	9c e0       	ldi	r25, 0x0C	; 12
    535a:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    535e:	0e 94 50 24 	call	0x48a0	; 0x48a0 <eeconfig_read_debug>
    5362:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    5364:	86 eb       	ldi	r24, 0xB6	; 182
    5366:	9c e0       	ldi	r25, 0x0C	; 12
    5368:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    536c:	1f 92       	push	r1
    536e:	cf 93       	push	r28
    5370:	21 eb       	ldi	r18, 0xB1	; 177
    5372:	3c e0       	ldi	r19, 0x0C	; 12
    5374:	3f 93       	push	r19
    5376:	2f 93       	push	r18
    5378:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    537c:	8f ea       	ldi	r24, 0xAF	; 175
    537e:	9c e0       	ldi	r25, 0x0C	; 12
    5380:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    5384:	85 ea       	ldi	r24, 0xA5	; 165
    5386:	9c e0       	ldi	r25, 0x0C	; 12
    5388:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    538c:	8c 2f       	mov	r24, r28
    538e:	81 70       	andi	r24, 0x01	; 1
    5390:	1f 92       	push	r1
    5392:	8f 93       	push	r24
    5394:	22 ea       	ldi	r18, 0xA2	; 162
    5396:	3c e0       	ldi	r19, 0x0C	; 12
    5398:	3f 93       	push	r19
    539a:	2f 93       	push	r18
    539c:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    53a0:	80 ea       	ldi	r24, 0xA0	; 160
    53a2:	9c e0       	ldi	r25, 0x0C	; 12
    53a4:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    53a8:	86 e9       	ldi	r24, 0x96	; 150
    53aa:	9c e0       	ldi	r25, 0x0C	; 12
    53ac:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    53b0:	c1 fb       	bst	r28, 1
    53b2:	88 27       	eor	r24, r24
    53b4:	80 f9       	bld	r24, 0
    53b6:	1f 92       	push	r1
    53b8:	8f 93       	push	r24
    53ba:	23 e9       	ldi	r18, 0x93	; 147
    53bc:	3c e0       	ldi	r19, 0x0C	; 12
    53be:	3f 93       	push	r19
    53c0:	2f 93       	push	r18
    53c2:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    53c6:	81 e9       	ldi	r24, 0x91	; 145
    53c8:	9c e0       	ldi	r25, 0x0C	; 12
    53ca:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    53ce:	85 e8       	ldi	r24, 0x85	; 133
    53d0:	9c e0       	ldi	r25, 0x0C	; 12
    53d2:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    53d6:	c2 fb       	bst	r28, 2
    53d8:	88 27       	eor	r24, r24
    53da:	80 f9       	bld	r24, 0
    53dc:	1f 92       	push	r1
    53de:	8f 93       	push	r24
    53e0:	22 e8       	ldi	r18, 0x82	; 130
    53e2:	3c e0       	ldi	r19, 0x0C	; 12
    53e4:	3f 93       	push	r19
    53e6:	2f 93       	push	r18
    53e8:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    53ec:	80 e8       	ldi	r24, 0x80	; 128
    53ee:	9c e0       	ldi	r25, 0x0C	; 12
    53f0:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    53f4:	87 e7       	ldi	r24, 0x77	; 119
    53f6:	9c e0       	ldi	r25, 0x0C	; 12
    53f8:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    53fc:	c3 fb       	bst	r28, 3
    53fe:	cc 27       	eor	r28, r28
    5400:	c0 f9       	bld	r28, 0
    5402:	1f 92       	push	r1
    5404:	cf 93       	push	r28
    5406:	84 e7       	ldi	r24, 0x74	; 116
    5408:	9c e0       	ldi	r25, 0x0C	; 12
    540a:	9f 93       	push	r25
    540c:	8f 93       	push	r24
    540e:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5412:	82 e7       	ldi	r24, 0x72	; 114
    5414:	9c e0       	ldi	r25, 0x0C	; 12
    5416:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    541a:	0e 94 62 24 	call	0x48c4	; 0x48c4 <eeconfig_read_keymap>
    541e:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    5420:	8e e5       	ldi	r24, 0x5E	; 94
    5422:	9c e0       	ldi	r25, 0x0C	; 12
    5424:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5428:	1f 92       	push	r1
    542a:	cf 93       	push	r28
    542c:	29 e5       	ldi	r18, 0x59	; 89
    542e:	3c e0       	ldi	r19, 0x0C	; 12
    5430:	3f 93       	push	r19
    5432:	2f 93       	push	r18
    5434:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5438:	87 e5       	ldi	r24, 0x57	; 87
    543a:	9c e0       	ldi	r25, 0x0C	; 12
    543c:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    5440:	8e e3       	ldi	r24, 0x3E	; 62
    5442:	9c e0       	ldi	r25, 0x0C	; 12
    5444:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5448:	8c 2f       	mov	r24, r28
    544a:	81 70       	andi	r24, 0x01	; 1
    544c:	1f 92       	push	r1
    544e:	8f 93       	push	r24
    5450:	2b e3       	ldi	r18, 0x3B	; 59
    5452:	3c e0       	ldi	r19, 0x0C	; 12
    5454:	3f 93       	push	r19
    5456:	2f 93       	push	r18
    5458:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    545c:	8d b7       	in	r24, 0x3d	; 61
    545e:	9e b7       	in	r25, 0x3e	; 62
    5460:	80 96       	adiw	r24, 0x20	; 32
    5462:	0f b6       	in	r0, 0x3f	; 63
    5464:	f8 94       	cli
    5466:	9e bf       	out	0x3e, r25	; 62
    5468:	0f be       	out	0x3f, r0	; 63
    546a:	8d bf       	out	0x3d, r24	; 61
    546c:	89 e3       	ldi	r24, 0x39	; 57
    546e:	9c e0       	ldi	r25, 0x0C	; 12
    5470:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    5474:	82 e2       	ldi	r24, 0x22	; 34
    5476:	9c e0       	ldi	r25, 0x0C	; 12
    5478:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    547c:	c1 fb       	bst	r28, 1
    547e:	88 27       	eor	r24, r24
    5480:	80 f9       	bld	r24, 0
    5482:	1f 92       	push	r1
    5484:	8f 93       	push	r24
    5486:	2f e1       	ldi	r18, 0x1F	; 31
    5488:	3c e0       	ldi	r19, 0x0C	; 12
    548a:	3f 93       	push	r19
    548c:	2f 93       	push	r18
    548e:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5492:	8d e1       	ldi	r24, 0x1D	; 29
    5494:	9c e0       	ldi	r25, 0x0C	; 12
    5496:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    549a:	8b e0       	ldi	r24, 0x0B	; 11
    549c:	9c e0       	ldi	r25, 0x0C	; 12
    549e:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    54a2:	c2 fb       	bst	r28, 2
    54a4:	88 27       	eor	r24, r24
    54a6:	80 f9       	bld	r24, 0
    54a8:	1f 92       	push	r1
    54aa:	8f 93       	push	r24
    54ac:	28 e0       	ldi	r18, 0x08	; 8
    54ae:	3c e0       	ldi	r19, 0x0C	; 12
    54b0:	3f 93       	push	r19
    54b2:	2f 93       	push	r18
    54b4:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    54b8:	86 e0       	ldi	r24, 0x06	; 6
    54ba:	9c e0       	ldi	r25, 0x0C	; 12
    54bc:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    54c0:	84 ef       	ldi	r24, 0xF4	; 244
    54c2:	9b e0       	ldi	r25, 0x0B	; 11
    54c4:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    54c8:	c3 fb       	bst	r28, 3
    54ca:	88 27       	eor	r24, r24
    54cc:	80 f9       	bld	r24, 0
    54ce:	1f 92       	push	r1
    54d0:	8f 93       	push	r24
    54d2:	21 ef       	ldi	r18, 0xF1	; 241
    54d4:	3b e0       	ldi	r19, 0x0B	; 11
    54d6:	3f 93       	push	r19
    54d8:	2f 93       	push	r18
    54da:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    54de:	8f ee       	ldi	r24, 0xEF	; 239
    54e0:	9b e0       	ldi	r25, 0x0B	; 11
    54e2:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    54e6:	85 ee       	ldi	r24, 0xE5	; 229
    54e8:	9b e0       	ldi	r25, 0x0B	; 11
    54ea:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    54ee:	c4 fb       	bst	r28, 4
    54f0:	88 27       	eor	r24, r24
    54f2:	80 f9       	bld	r24, 0
    54f4:	1f 92       	push	r1
    54f6:	8f 93       	push	r24
    54f8:	22 ee       	ldi	r18, 0xE2	; 226
    54fa:	3b e0       	ldi	r19, 0x0B	; 11
    54fc:	3f 93       	push	r19
    54fe:	2f 93       	push	r18
    5500:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5504:	80 ee       	ldi	r24, 0xE0	; 224
    5506:	9b e0       	ldi	r25, 0x0B	; 11
    5508:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    550c:	8e ec       	ldi	r24, 0xCE	; 206
    550e:	9b e0       	ldi	r25, 0x0B	; 11
    5510:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5514:	c5 fb       	bst	r28, 5
    5516:	88 27       	eor	r24, r24
    5518:	80 f9       	bld	r24, 0
    551a:	1f 92       	push	r1
    551c:	8f 93       	push	r24
    551e:	2b ec       	ldi	r18, 0xCB	; 203
    5520:	3b e0       	ldi	r19, 0x0B	; 11
    5522:	3f 93       	push	r19
    5524:	2f 93       	push	r18
    5526:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    552a:	89 ec       	ldi	r24, 0xC9	; 201
    552c:	9b e0       	ldi	r25, 0x0B	; 11
    552e:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    5532:	8d ea       	ldi	r24, 0xAD	; 173
    5534:	9b e0       	ldi	r25, 0x0B	; 11
    5536:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    553a:	c6 fb       	bst	r28, 6
    553c:	88 27       	eor	r24, r24
    553e:	80 f9       	bld	r24, 0
    5540:	1f 92       	push	r1
    5542:	8f 93       	push	r24
    5544:	2a ea       	ldi	r18, 0xAA	; 170
    5546:	3b e0       	ldi	r19, 0x0B	; 11
    5548:	3f 93       	push	r19
    554a:	2f 93       	push	r18
    554c:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5550:	88 ea       	ldi	r24, 0xA8	; 168
    5552:	9b e0       	ldi	r25, 0x0B	; 11
    5554:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    5558:	80 ea       	ldi	r24, 0xA0	; 160
    555a:	9b e0       	ldi	r25, 0x0B	; 11
    555c:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5560:	c7 fb       	bst	r28, 7
    5562:	cc 27       	eor	r28, r28
    5564:	c0 f9       	bld	r28, 0
    5566:	1f 92       	push	r1
    5568:	cf 93       	push	r28
    556a:	8d e9       	ldi	r24, 0x9D	; 157
    556c:	9b e0       	ldi	r25, 0x0B	; 11
    556e:	9f 93       	push	r25
    5570:	8f 93       	push	r24
    5572:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5576:	8b e9       	ldi	r24, 0x9B	; 155
    5578:	9b e0       	ldi	r25, 0x0B	; 11
    557a:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>

#ifdef BACKLIGHT_ENABLE
    backlight_config_t bc;
    bc.raw = eeconfig_read_backlight();
    557e:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <eeconfig_read_backlight>
    5582:	c8 2f       	mov	r28, r24
    print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
    5584:	84 e8       	ldi	r24, 0x84	; 132
    5586:	9b e0       	ldi	r25, 0x0B	; 11
    5588:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    558c:	1f 92       	push	r1
    558e:	cf 93       	push	r28
    5590:	2f e7       	ldi	r18, 0x7F	; 127
    5592:	3b e0       	ldi	r19, 0x0B	; 11
    5594:	3f 93       	push	r19
    5596:	2f 93       	push	r18
    5598:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    559c:	8d b7       	in	r24, 0x3d	; 61
    559e:	9e b7       	in	r25, 0x3e	; 62
    55a0:	80 96       	adiw	r24, 0x20	; 32
    55a2:	0f b6       	in	r0, 0x3f	; 63
    55a4:	f8 94       	cli
    55a6:	9e bf       	out	0x3e, r25	; 62
    55a8:	0f be       	out	0x3f, r0	; 63
    55aa:	8d bf       	out	0x3d, r24	; 61
    55ac:	8d e7       	ldi	r24, 0x7D	; 125
    55ae:	9b e0       	ldi	r25, 0x0B	; 11
    55b0:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print(".enable: "); print_dec(bc.enable); print("\n");
    55b4:	83 e7       	ldi	r24, 0x73	; 115
    55b6:	9b e0       	ldi	r25, 0x0B	; 11
    55b8:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    55bc:	8c 2f       	mov	r24, r28
    55be:	81 70       	andi	r24, 0x01	; 1
    55c0:	1f 92       	push	r1
    55c2:	8f 93       	push	r24
    55c4:	20 e7       	ldi	r18, 0x70	; 112
    55c6:	3b e0       	ldi	r19, 0x0B	; 11
    55c8:	3f 93       	push	r19
    55ca:	2f 93       	push	r18
    55cc:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    55d0:	8e e6       	ldi	r24, 0x6E	; 110
    55d2:	9b e0       	ldi	r25, 0x0B	; 11
    55d4:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print(".level: "); print_dec(bc.level); print("\n");
    55d8:	85 e6       	ldi	r24, 0x65	; 101
    55da:	9b e0       	ldi	r25, 0x0B	; 11
    55dc:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    55e0:	c6 95       	lsr	r28
    55e2:	1f 92       	push	r1
    55e4:	cf 93       	push	r28
    55e6:	82 e6       	ldi	r24, 0x62	; 98
    55e8:	9b e0       	ldi	r25, 0x0B	; 11
    55ea:	9f 93       	push	r25
    55ec:	8f 93       	push	r24
    55ee:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    55f2:	80 e6       	ldi	r24, 0x60	; 96
    55f4:	9b e0       	ldi	r25, 0x0B	; 11
    55f6:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    55fa:	8d b7       	in	r24, 0x3d	; 61
    55fc:	9e b7       	in	r25, 0x3e	; 62
    55fe:	08 96       	adiw	r24, 0x08	; 8
    5600:	0f b6       	in	r0, 0x3f	; 63
    5602:	f8 94       	cli
    5604:	9e bf       	out	0x3e, r25	; 62
    5606:	0f be       	out	0x3f, r0	; 63
    5608:	8d bf       	out	0x3d, r24	; 61
    560a:	1d c0       	rjmp	.+58     	; 0x5646 <command_common+0x32e>
            print("eeconfig:\n");
            print_eeconfig();
            break;
#endif
        case KC_CAPSLOCK:
            if (host_get_driver()) {
    560c:	0e 94 ca 12 	call	0x2594	; 0x2594 <host_get_driver>
    5610:	89 2b       	or	r24, r25
    5612:	79 f0       	breq	.+30     	; 0x5632 <command_common+0x31a>
                host_driver = host_get_driver();
    5614:	0e 94 ca 12 	call	0x2594	; 0x2594 <host_get_driver>
    5618:	90 93 cd 01 	sts	0x01CD, r25
    561c:	80 93 cc 01 	sts	0x01CC, r24
                clear_keyboard();
    5620:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <clear_keyboard>
                host_set_driver(0);
    5624:	80 e0       	ldi	r24, 0x00	; 0
    5626:	90 e0       	ldi	r25, 0x00	; 0
    5628:	0e 94 c5 12 	call	0x258a	; 0x258a <host_set_driver>
                print("Locked.\n");
    562c:	8c ec       	ldi	r24, 0xCC	; 204
    562e:	9f e0       	ldi	r25, 0x0F	; 15
    5630:	08 c0       	rjmp	.+16     	; 0x5642 <command_common+0x32a>
            } else {
                host_set_driver(host_driver);
    5632:	80 91 cc 01 	lds	r24, 0x01CC
    5636:	90 91 cd 01 	lds	r25, 0x01CD
    563a:	0e 94 c5 12 	call	0x258a	; 0x258a <host_set_driver>
                print("Unlocked.\n");
    563e:	81 ec       	ldi	r24, 0xC1	; 193
    5640:	9f e0       	ldi	r25, 0x0F	; 15
    5642:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    5646:	c1 e0       	ldi	r28, 0x01	; 1
    5648:	61 c1       	rjmp	.+706    	; 0x590c <command_common+0x5f4>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\n----- Command Help -----\n");
    564a:	84 e4       	ldi	r24, 0x44	; 68
    564c:	9b e0       	ldi	r25, 0x0B	; 11
    564e:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("c:	enter console mode\n");
    5652:	8d e2       	ldi	r24, 0x2D	; 45
    5654:	9b e0       	ldi	r25, 0x0B	; 11
    5656:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("d:	toggle debug enable\n");
    565a:	85 e1       	ldi	r24, 0x15	; 21
    565c:	9b e0       	ldi	r25, 0x0B	; 11
    565e:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("x:	toggle matrix debug\n");
    5662:	8d ef       	ldi	r24, 0xFD	; 253
    5664:	9a e0       	ldi	r25, 0x0A	; 10
    5666:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("k:	toggle keyboard debug\n");
    566a:	83 ee       	ldi	r24, 0xE3	; 227
    566c:	9a e0       	ldi	r25, 0x0A	; 10
    566e:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("m:	toggle mouse debug\n");
    5672:	8c ec       	ldi	r24, 0xCC	; 204
    5674:	9a e0       	ldi	r25, 0x0A	; 10
    5676:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
#ifdef SLEEP_LED_ENABLE
    print("z:	toggle sleep LED test\n");
#endif
    print("v:	print device version & info\n");
    567a:	8c ea       	ldi	r24, 0xAC	; 172
    567c:	9a e0       	ldi	r25, 0x0A	; 10
    567e:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("t:	print timer count\n");
    5682:	86 e9       	ldi	r24, 0x96	; 150
    5684:	9a e0       	ldi	r25, 0x0A	; 10
    5686:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("s:	print status\n");
    568a:	85 e8       	ldi	r24, 0x85	; 133
    568c:	9a e0       	ldi	r25, 0x0A	; 10
    568e:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("e:	print eeprom config\n");
    5692:	8d e6       	ldi	r24, 0x6D	; 109
    5694:	9a e0       	ldi	r25, 0x0A	; 10
    5696:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
#ifdef NKRO_ENABLE
    print("n:	toggle NKRO\n");
    569a:	8d e5       	ldi	r24, 0x5D	; 93
    569c:	9a e0       	ldi	r25, 0x0A	; 10
    569e:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
#endif
    print("0/F10:	switch to Layer0 \n");
    56a2:	83 e4       	ldi	r24, 0x43	; 67
    56a4:	9a e0       	ldi	r25, 0x0A	; 10
    56a6:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("1/F1:	switch to Layer1 \n");
    56aa:	8a e2       	ldi	r24, 0x2A	; 42
    56ac:	9a e0       	ldi	r25, 0x0A	; 10
    56ae:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("2/F2:	switch to Layer2 \n");
    56b2:	81 e1       	ldi	r24, 0x11	; 17
    56b4:	9a e0       	ldi	r25, 0x0A	; 10
    56b6:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("3/F3:	switch to Layer3 \n");
    56ba:	88 ef       	ldi	r24, 0xF8	; 248
    56bc:	99 e0       	ldi	r25, 0x09	; 9
    56be:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("4/F4:	switch to Layer4 \n");
    56c2:	8f ed       	ldi	r24, 0xDF	; 223
    56c4:	99 e0       	ldi	r25, 0x09	; 9
    56c6:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("PScr:	power down/remote wake-up\n");
    56ca:	8e eb       	ldi	r24, 0xBE	; 190
    56cc:	99 e0       	ldi	r25, 0x09	; 9
    56ce:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("Caps:	Lock Keyboard(Child Proof)\n");
    56d2:	8c e9       	ldi	r24, 0x9C	; 156
    56d4:	99 e0       	ldi	r25, 0x09	; 9
    56d6:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("Paus:	jump to bootloader\n");
    56da:	82 e8       	ldi	r24, 0x82	; 130
    56dc:	99 e0       	ldi	r25, 0x09	; 9
    56de:	b1 cf       	rjmp	.-158    	; 0x5642 <command_common+0x32a>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    56e0:	80 91 bd 01 	lds	r24, 0x01BD
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    56e4:	81 7f       	andi	r24, 0xF1	; 241
    56e6:	8e 7f       	andi	r24, 0xFE	; 254
    56e8:	80 93 bd 01 	sts	0x01BD, r24
            command_console_help();
    56ec:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <command_console_help>
            print("\nEnter Console Mode\n");
    56f0:	8c ea       	ldi	r24, 0xAC	; 172
    56f2:	9f e0       	ldi	r25, 0x0F	; 15
    56f4:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
            print("C> ");
    56f8:	88 ea       	ldi	r24, 0xA8	; 168
    56fa:	9f e0       	ldi	r25, 0x0F	; 15
    56fc:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
            command_state = CONSOLE;
    5700:	81 e0       	ldi	r24, 0x01	; 1
    5702:	80 93 cf 01 	sts	0x01CF, r24
    5706:	9f cf       	rjmp	.-194    	; 0x5646 <command_common+0x32e>
            break;
        case KC_PAUSE:
            clear_keyboard();
    5708:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <clear_keyboard>
            print("\n\nJump to bootloader... ");
    570c:	8f e8       	ldi	r24, 0x8F	; 143
    570e:	9f e0       	ldi	r25, 0x0F	; 15
    5710:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5714:	9f ef       	ldi	r25, 0xFF	; 255
    5716:	23 ed       	ldi	r18, 0xD3	; 211
    5718:	80 e3       	ldi	r24, 0x30	; 48
    571a:	91 50       	subi	r25, 0x01	; 1
    571c:	20 40       	sbci	r18, 0x00	; 0
    571e:	80 40       	sbci	r24, 0x00	; 0
    5720:	e1 f7       	brne	.-8      	; 0x571a <command_common+0x402>
    5722:	00 c0       	rjmp	.+0      	; 0x5724 <command_common+0x40c>
    5724:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    5726:	0e 94 85 22 	call	0x450a	; 0x450a <bootloader_jump>
            print("not supported.\n");
    572a:	8f e7       	ldi	r24, 0x7F	; 127
    572c:	9f e0       	ldi	r25, 0x0F	; 15
    572e:	89 cf       	rjmp	.-238    	; 0x5642 <command_common+0x32a>
            break;
        case KC_D:
            if (debug_enable) {
    5730:	80 91 bd 01 	lds	r24, 0x01BD
    5734:	c8 2f       	mov	r28, r24
    5736:	c1 70       	andi	r28, 0x01	; 1
    5738:	80 ff       	sbrs	r24, 0
    573a:	09 c0       	rjmp	.+18     	; 0x574e <command_common+0x436>
                print("\nDEBUG: disabled.\n");
    573c:	8c e6       	ldi	r24, 0x6C	; 108
    573e:	9f e0       	ldi	r25, 0x0F	; 15
    5740:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
                debug_matrix   = false;
    5744:	80 91 bd 01 	lds	r24, 0x01BD
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    5748:	81 7f       	andi	r24, 0xF1	; 241
    574a:	8e 7f       	andi	r24, 0xFE	; 254
    574c:	44 c0       	rjmp	.+136    	; 0x57d6 <command_common+0x4be>
            } else {
                print("\nDEBUG: enabled.\n");
    574e:	8a e5       	ldi	r24, 0x5A	; 90
    5750:	9f e0       	ldi	r25, 0x0F	; 15
    5752:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
                debug_enable   = true;
    5756:	80 91 bd 01 	lds	r24, 0x01BD
    575a:	81 60       	ori	r24, 0x01	; 1
    575c:	80 93 bd 01 	sts	0x01BD, r24
    5760:	72 cf       	rjmp	.-284    	; 0x5646 <command_common+0x32e>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    5762:	80 91 bd 01 	lds	r24, 0x01BD
    5766:	81 fb       	bst	r24, 1
    5768:	cc 27       	eor	r28, r28
    576a:	c0 f9       	bld	r28, 0
    576c:	91 e0       	ldi	r25, 0x01	; 1
    576e:	c9 27       	eor	r28, r25
    5770:	c0 fb       	bst	r28, 0
    5772:	81 f9       	bld	r24, 1
    5774:	80 93 bd 01 	sts	0x01BD, r24
            if (debug_matrix) {
    5778:	cc 23       	and	r28, r28
    577a:	19 f0       	breq	.+6      	; 0x5782 <command_common+0x46a>
                print("\nDEBUG: matrix enabled.\n");
    577c:	81 e4       	ldi	r24, 0x41	; 65
    577e:	9f e0       	ldi	r25, 0x0F	; 15
    5780:	25 c0       	rjmp	.+74     	; 0x57cc <command_common+0x4b4>
                debug_enable = true;
            } else {
                print("\nDEBUG: matrix disabled.\n");
    5782:	87 e2       	ldi	r24, 0x27	; 39
    5784:	9f e0       	ldi	r25, 0x0F	; 15
    5786:	5d cf       	rjmp	.-326    	; 0x5642 <command_common+0x32a>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    5788:	80 91 bd 01 	lds	r24, 0x01BD
    578c:	82 fb       	bst	r24, 2
    578e:	cc 27       	eor	r28, r28
    5790:	c0 f9       	bld	r28, 0
    5792:	91 e0       	ldi	r25, 0x01	; 1
    5794:	c9 27       	eor	r28, r25
    5796:	c0 fb       	bst	r28, 0
    5798:	82 f9       	bld	r24, 2
    579a:	80 93 bd 01 	sts	0x01BD, r24
            if (debug_keyboard) {
    579e:	cc 23       	and	r28, r28
    57a0:	19 f0       	breq	.+6      	; 0x57a8 <command_common+0x490>
                print("\nDEBUG: keyboard enabled.\n");
    57a2:	8c e0       	ldi	r24, 0x0C	; 12
    57a4:	9f e0       	ldi	r25, 0x0F	; 15
    57a6:	12 c0       	rjmp	.+36     	; 0x57cc <command_common+0x4b4>
                debug_enable = true;
            } else {
                print("\nDEBUG: keyboard disabled.\n");
    57a8:	80 ef       	ldi	r24, 0xF0	; 240
    57aa:	9e e0       	ldi	r25, 0x0E	; 14
    57ac:	4a cf       	rjmp	.-364    	; 0x5642 <command_common+0x32a>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    57ae:	80 91 bd 01 	lds	r24, 0x01BD
    57b2:	83 fb       	bst	r24, 3
    57b4:	cc 27       	eor	r28, r28
    57b6:	c0 f9       	bld	r28, 0
    57b8:	91 e0       	ldi	r25, 0x01	; 1
    57ba:	c9 27       	eor	r28, r25
    57bc:	c0 fb       	bst	r28, 0
    57be:	83 f9       	bld	r24, 3
    57c0:	80 93 bd 01 	sts	0x01BD, r24
            if (debug_mouse) {
    57c4:	cc 23       	and	r28, r28
    57c6:	51 f0       	breq	.+20     	; 0x57dc <command_common+0x4c4>
                print("\nDEBUG: mouse enabled.\n");
    57c8:	88 ed       	ldi	r24, 0xD8	; 216
    57ca:	9e e0       	ldi	r25, 0x0E	; 14
    57cc:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
                debug_enable = true;
    57d0:	80 91 bd 01 	lds	r24, 0x01BD
    57d4:	81 60       	ori	r24, 0x01	; 1
    57d6:	80 93 bd 01 	sts	0x01BD, r24
    57da:	98 c0       	rjmp	.+304    	; 0x590c <command_common+0x5f4>
            } else {
                print("\nDEBUG: mouse disabled.\n");
    57dc:	8f eb       	ldi	r24, 0xBF	; 191
    57de:	9e e0       	ldi	r25, 0x0E	; 14
    57e0:	30 cf       	rjmp	.-416    	; 0x5642 <command_common+0x32a>
            }
            break;
        case KC_V: // print version & information
            print("\n\n----- Version -----\n");
    57e2:	88 ea       	ldi	r24, 0xA8	; 168
    57e4:	9e e0       	ldi	r25, 0x0E	; 14
    57e6:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    57ea:	8e e7       	ldi	r24, 0x7E	; 126
    57ec:	9e e0       	ldi	r25, 0x0E	; 14
    57ee:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    57f2:	88 e4       	ldi	r24, 0x48	; 72
    57f4:	9e e0       	ldi	r25, 0x0E	; 14
    57f6:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    57fa:	81 e2       	ldi	r24, 0x21	; 33
    57fc:	9e e0       	ldi	r25, 0x0E	; 14
    57fe:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
            /* build options */
            print("OPTIONS:"
    5802:	8b e9       	ldi	r24, 0x9B	; 155
    5804:	9d e0       	ldi	r25, 0x0D	; 13
    5806:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
#ifdef BREATHING_LED_ENABLE
            " BREATHING_LED"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    580a:	8d e6       	ldi	r24, 0x6D	; 109
    580c:	9d e0       	ldi	r25, 0x0D	; 13
    580e:	19 cf       	rjmp	.-462    	; 0x5642 <command_common+0x32a>
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_T: // print timer
            print_val_hex32(timer_count);
    5810:	80 91 bf 01 	lds	r24, 0x01BF
    5814:	90 91 c0 01 	lds	r25, 0x01C0
    5818:	a0 91 c1 01 	lds	r26, 0x01C1
    581c:	b0 91 c2 01 	lds	r27, 0x01C2
    5820:	bf 93       	push	r27
    5822:	af 93       	push	r26
    5824:	9f 93       	push	r25
    5826:	8f 93       	push	r24
    5828:	89 e5       	ldi	r24, 0x59	; 89
    582a:	9d e0       	ldi	r25, 0x0D	; 13
    582c:	9f 93       	push	r25
    582e:	8f 93       	push	r24
    5830:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
            break;
    5834:	0f 90       	pop	r0
    5836:	0f 90       	pop	r0
    5838:	0f 90       	pop	r0
    583a:	0f 90       	pop	r0
    583c:	0f 90       	pop	r0
    583e:	0f 90       	pop	r0
    5840:	02 cf       	rjmp	.-508    	; 0x5646 <command_common+0x32e>
        case KC_S:
            print("\n\n----- Status -----\n");
    5842:	83 e4       	ldi	r24, 0x43	; 67
    5844:	9d e0       	ldi	r25, 0x0D	; 13
    5846:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
            print_val_hex8(host_keyboard_leds());
    584a:	0e 94 cf 12 	call	0x259e	; 0x259e <host_keyboard_leds>
    584e:	1f 92       	push	r1
    5850:	8f 93       	push	r24
    5852:	89 e2       	ldi	r24, 0x29	; 41
    5854:	9d e0       	ldi	r25, 0x0D	; 13
    5856:	9f 93       	push	r25
    5858:	8f 93       	push	r24
    585a:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
            print_val_hex8(keyboard_protocol);
    585e:	80 91 0b 01 	lds	r24, 0x010B
    5862:	1f 92       	push	r1
    5864:	8f 93       	push	r24
    5866:	82 e1       	ldi	r24, 0x12	; 18
    5868:	9d e0       	ldi	r25, 0x0D	; 13
    586a:	9f 93       	push	r25
    586c:	8f 93       	push	r24
    586e:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
            print_val_hex8(keyboard_idle);
    5872:	80 91 59 01 	lds	r24, 0x0159
    5876:	1f 92       	push	r1
    5878:	8f 93       	push	r24
    587a:	8f ef       	ldi	r24, 0xFF	; 255
    587c:	9c e0       	ldi	r25, 0x0C	; 12
    587e:	9f 93       	push	r25
    5880:	8f 93       	push	r24
    5882:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    5886:	8d b7       	in	r24, 0x3d	; 61
    5888:	9e b7       	in	r25, 0x3e	; 62
    588a:	0c 96       	adiw	r24, 0x0c	; 12
    588c:	0f b6       	in	r0, 0x3f	; 63
    588e:	f8 94       	cli
    5890:	9e bf       	out	0x3e, r25	; 62
    5892:	0f be       	out	0x3f, r0	; 63
    5894:	8d bf       	out	0x3d, r24	; 61
    5896:	d7 ce       	rjmp	.-594    	; 0x5646 <command_common+0x32e>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    5898:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    589c:	c0 91 0c 01 	lds	r28, 0x010C
    58a0:	81 e0       	ldi	r24, 0x01	; 1
    58a2:	c8 27       	eor	r28, r24
    58a4:	c0 93 0c 01 	sts	0x010C, r28
            if (keyboard_nkro)
    58a8:	cc 23       	and	r28, r28
    58aa:	29 f0       	breq	.+10     	; 0x58b6 <command_common+0x59e>
                print("NKRO: enabled\n");
    58ac:	80 ef       	ldi	r24, 0xF0	; 240
    58ae:	9c e0       	ldi	r25, 0x0C	; 12
    58b0:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    58b4:	2b c0       	rjmp	.+86     	; 0x590c <command_common+0x5f4>
            else
                print("NKRO: disabled\n");
    58b6:	80 ee       	ldi	r24, 0xE0	; 224
    58b8:	9c e0       	ldi	r25, 0x0C	; 12
    58ba:	c3 ce       	rjmp	.-634    	; 0x5642 <command_common+0x32a>
                host_system_send(SYSTEM_POWER_DOWN);
                host_system_send(0);
                _delay_ms(500);
            }
#else
            host_system_send(SYSTEM_POWER_DOWN);
    58bc:	81 e8       	ldi	r24, 0x81	; 129
    58be:	90 e0       	ldi	r25, 0x00	; 0
    58c0:	0e 94 2b 13 	call	0x2656	; 0x2656 <host_system_send>
    58c4:	9f ef       	ldi	r25, 0xFF	; 255
    58c6:	21 ee       	ldi	r18, 0xE1	; 225
    58c8:	84 e0       	ldi	r24, 0x04	; 4
    58ca:	91 50       	subi	r25, 0x01	; 1
    58cc:	20 40       	sbci	r18, 0x00	; 0
    58ce:	80 40       	sbci	r24, 0x00	; 0
    58d0:	e1 f7       	brne	.-8      	; 0x58ca <command_common+0x5b2>
    58d2:	00 c0       	rjmp	.+0      	; 0x58d4 <command_common+0x5bc>
    58d4:	00 00       	nop
            _delay_ms(100);
            host_system_send(0);
    58d6:	80 e0       	ldi	r24, 0x00	; 0
    58d8:	90 e0       	ldi	r25, 0x00	; 0
    58da:	0e 94 2b 13 	call	0x2656	; 0x2656 <host_system_send>
    58de:	9f ef       	ldi	r25, 0xFF	; 255
    58e0:	29 e6       	ldi	r18, 0x69	; 105
    58e2:	88 e1       	ldi	r24, 0x18	; 24
    58e4:	91 50       	subi	r25, 0x01	; 1
    58e6:	20 40       	sbci	r18, 0x00	; 0
    58e8:	80 40       	sbci	r24, 0x00	; 0
    58ea:	e1 f7       	brne	.-8      	; 0x58e4 <command_common+0x5cc>
    58ec:	00 c0       	rjmp	.+0      	; 0x58ee <command_common+0x5d6>
    58ee:	00 00       	nop
    58f0:	aa ce       	rjmp	.-684    	; 0x5646 <command_common+0x32e>
            break;
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
            switch_default_layer(0);
    58f2:	80 e0       	ldi	r24, 0x00	; 0
    58f4:	03 c0       	rjmp	.+6      	; 0x58fc <command_common+0x5e4>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    58f6:	8d 51       	subi	r24, 0x1D	; 29
    58f8:	01 c0       	rjmp	.+2      	; 0x58fc <command_common+0x5e4>
            break;
        case KC_F1 ... KC_F12:
            switch_default_layer((code - KC_F1) + 1);
    58fa:	89 53       	subi	r24, 0x39	; 57
    58fc:	0e 94 4c 29 	call	0x5298	; 0x5298 <switch_default_layer>
    5900:	a2 ce       	rjmp	.-700    	; 0x5646 <command_common+0x32e>
            break;
        default:
            print("?");
    5902:	8e ed       	ldi	r24, 0xDE	; 222
    5904:	9c e0       	ldi	r25, 0x0C	; 12
    5906:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
            return false;
    590a:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    590c:	8c 2f       	mov	r24, r28
    590e:	cf 91       	pop	r28
    5910:	08 95       	ret

00005912 <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    5912:	80 e0       	ldi	r24, 0x00	; 0
    5914:	08 95       	ret

00005916 <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    5916:	80 e0       	ldi	r24, 0x00	; 0
    5918:	08 95       	ret

0000591a <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    591a:	cf 93       	push	r28
    591c:	c8 2f       	mov	r28, r24
    switch (command_state) {
    591e:	80 91 cf 01 	lds	r24, 0x01CF
    5922:	81 30       	cpi	r24, 0x01	; 1
    5924:	a1 f0       	breq	.+40     	; 0x594e <command_proc+0x34>
    5926:	20 f0       	brcs	.+8      	; 0x5930 <command_proc+0x16>
    5928:	82 30       	cpi	r24, 0x02	; 2
    592a:	09 f4       	brne	.+2      	; 0x592e <command_proc+0x14>
    592c:	59 c0       	rjmp	.+178    	; 0x59e0 <command_proc+0xc6>
    592e:	68 c1       	rjmp	.+720    	; 0x5c00 <command_proc+0x2e6>
        case ONESHOT:
            if (!IS_COMMAND())
    5930:	60 e0       	ldi	r22, 0x00	; 0
    5932:	80 e0       	ldi	r24, 0x00	; 0
    5934:	0e 94 34 0a 	call	0x1468	; 0x1468 <matrix_is_on>
    5938:	88 23       	and	r24, r24
    593a:	09 f4       	brne	.+2      	; 0x593e <command_proc+0x24>
    593c:	63 c1       	rjmp	.+710    	; 0x5c04 <command_proc+0x2ea>
    593e:	63 e0       	ldi	r22, 0x03	; 3
    5940:	80 e0       	ldi	r24, 0x00	; 0
    5942:	0e 94 34 0a 	call	0x1468	; 0x1468 <matrix_is_on>
    5946:	88 23       	and	r24, r24
    5948:	09 f4       	brne	.+2      	; 0x594c <command_proc+0x32>
    594a:	5c c1       	rjmp	.+696    	; 0x5c04 <command_proc+0x2ea>
    594c:	0c c0       	rjmp	.+24     	; 0x5966 <command_proc+0x4c>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    594e:	60 e0       	ldi	r22, 0x00	; 0
    5950:	80 e0       	ldi	r24, 0x00	; 0
    5952:	0e 94 34 0a 	call	0x1468	; 0x1468 <matrix_is_on>
    5956:	88 23       	and	r24, r24
    5958:	79 f0       	breq	.+30     	; 0x5978 <command_proc+0x5e>
    595a:	63 e0       	ldi	r22, 0x03	; 3
    595c:	80 e0       	ldi	r24, 0x00	; 0
    595e:	0e 94 34 0a 	call	0x1468	; 0x1468 <matrix_is_on>
    5962:	88 23       	and	r24, r24
    5964:	49 f0       	breq	.+18     	; 0x5978 <command_proc+0x5e>
                return (command_extra(code) || command_common(code));
    5966:	8c 2f       	mov	r24, r28
    5968:	0e 94 89 2c 	call	0x5912	; 0x5912 <command_extra>
    596c:	81 11       	cpse	r24, r1
    596e:	35 c0       	rjmp	.+106    	; 0x59da <command_proc+0xc0>
    5970:	8c 2f       	mov	r24, r28
    5972:	0e 94 8c 29 	call	0x5318	; 0x5318 <command_common>
    5976:	32 c0       	rjmp	.+100    	; 0x59dc <command_proc+0xc2>
            else
                return (command_console_extra(code) || command_console(code));
    5978:	8c 2f       	mov	r24, r28
    597a:	0e 94 8b 2c 	call	0x5916	; 0x5916 <command_console_extra>
    597e:	81 11       	cpse	r24, r1
    5980:	2c c0       	rjmp	.+88     	; 0x59da <command_proc+0xc0>
#endif
}

static bool command_console(uint8_t code)
{
    switch (code) {
    5982:	c4 31       	cpi	r28, 0x14	; 20
    5984:	f1 f0       	breq	.+60     	; 0x59c2 <command_proc+0xa8>
    5986:	90 f4       	brcc	.+36     	; 0x59ac <command_proc+0x92>
    5988:	cb 30       	cpi	r28, 0x0B	; 11
    598a:	a1 f0       	breq	.+40     	; 0x59b4 <command_proc+0x9a>
    598c:	c0 31       	cpi	r28, 0x10	; 16
    598e:	01 f5       	brne	.+64     	; 0x59d0 <command_proc+0xb6>
            print("\nQuit Console Mode\n");
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    5990:	0e 94 28 27 	call	0x4e50	; 0x4e50 <mousekey_console_help>
            print("\nEnter Mousekey Console\n");
    5994:	87 ef       	ldi	r24, 0xF7	; 247
    5996:	98 e0       	ldi	r25, 0x08	; 8
    5998:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
            print("M0>");
    599c:	83 ef       	ldi	r24, 0xF3	; 243
    599e:	98 e0       	ldi	r25, 0x08	; 8
    59a0:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
            command_state = MOUSEKEY;
    59a4:	82 e0       	ldi	r24, 0x02	; 2
    59a6:	80 93 cf 01 	sts	0x01CF, r24
    59aa:	17 c0       	rjmp	.+46     	; 0x59da <command_proc+0xc0>
#endif
}

static bool command_console(uint8_t code)
{
    switch (code) {
    59ac:	c9 32       	cpi	r28, 0x29	; 41
    59ae:	49 f0       	breq	.+18     	; 0x59c2 <command_proc+0xa8>
    59b0:	c8 33       	cpi	r28, 0x38	; 56
    59b2:	71 f4       	brne	.+28     	; 0x59d0 <command_proc+0xb6>
        case KC_H:
        case KC_SLASH: /* ? */
            command_console_help();
    59b4:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <command_console_help>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    59b8:	84 e2       	ldi	r24, 0x24	; 36
    59ba:	99 e0       	ldi	r25, 0x09	; 9
    59bc:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    59c0:	0c c0       	rjmp	.+24     	; 0x59da <command_proc+0xc0>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            print("\nQuit Console Mode\n");
    59c2:	80 e1       	ldi	r24, 0x10	; 16
    59c4:	99 e0       	ldi	r25, 0x09	; 9
    59c6:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
            command_state = ONESHOT;
    59ca:	10 92 cf 01 	sts	0x01CF, r1
    59ce:	1c c1       	rjmp	.+568    	; 0x5c08 <command_proc+0x2ee>
            print("M0>");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    59d0:	81 ef       	ldi	r24, 0xF1	; 241
    59d2:	98 e0       	ldi	r25, 0x08	; 8
    59d4:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    59d8:	17 c1       	rjmp	.+558    	; 0x5c08 <command_proc+0x2ee>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    59da:	81 e0       	ldi	r24, 0x01	; 1
    59dc:	81 70       	andi	r24, 0x01	; 1
    59de:	16 c1       	rjmp	.+556    	; 0x5c0c <command_proc+0x2f2>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    59e0:	c8 32       	cpi	r28, 0x28	; 40
    59e2:	28 f5       	brcc	.+74     	; 0x5a2e <command_proc+0x114>
    59e4:	ce 31       	cpi	r28, 0x1E	; 30
    59e6:	08 f0       	brcs	.+2      	; 0x59ea <command_proc+0xd0>
    59e8:	c0 c0       	rjmp	.+384    	; 0x5b6a <command_proc+0x250>
    59ea:	cb 30       	cpi	r28, 0x0B	; 11
    59ec:	a1 f1       	breq	.+104    	; 0x5a56 <command_proc+0x13c>
    59ee:	d0 f4       	brcc	.+52     	; 0x5a24 <command_proc+0x10a>
    59f0:	c7 30       	cpi	r28, 0x07	; 7
    59f2:	09 f0       	breq	.+2      	; 0x59f6 <command_proc+0xdc>
    59f4:	e8 c0       	rjmp	.+464    	; 0x5bc6 <command_proc+0x2ac>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    59f6:	8e e1       	ldi	r24, 0x1E	; 30
    59f8:	80 93 14 01 	sts	0x0114, r24
            mk_interval = MOUSEKEY_INTERVAL;
    59fc:	82 e3       	ldi	r24, 0x32	; 50
    59fe:	80 93 13 01 	sts	0x0113, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    5a02:	8a e0       	ldi	r24, 0x0A	; 10
    5a04:	80 93 12 01 	sts	0x0112, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    5a08:	84 e1       	ldi	r24, 0x14	; 20
    5a0a:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5a0e:	88 e0       	ldi	r24, 0x08	; 8
    5a10:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    5a14:	88 e2       	ldi	r24, 0x28	; 40
    5a16:	80 93 0f 01 	sts	0x010F, r24
            print("set default values.\n");
    5a1a:	89 e9       	ldi	r24, 0x99	; 153
    5a1c:	96 e0       	ldi	r25, 0x06	; 6
    5a1e:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5a22:	d6 c0       	rjmp	.+428    	; 0x5bd0 <command_proc+0x2b6>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5a24:	c3 31       	cpi	r28, 0x13	; 19
    5a26:	41 f1       	breq	.+80     	; 0x5a78 <command_proc+0x15e>
    5a28:	c4 31       	cpi	r28, 0x14	; 20
    5a2a:	c1 f0       	breq	.+48     	; 0x5a5c <command_proc+0x142>
    5a2c:	cc c0       	rjmp	.+408    	; 0x5bc6 <command_proc+0x2ac>
    5a2e:	cb 34       	cpi	r28, 0x4B	; 75
    5a30:	09 f4       	brne	.+2      	; 0x5a34 <command_proc+0x11a>
    5a32:	be c0       	rjmp	.+380    	; 0x5bb0 <command_proc+0x296>
    5a34:	28 f4       	brcc	.+10     	; 0x5a40 <command_proc+0x126>
    5a36:	c9 32       	cpi	r28, 0x29	; 41
    5a38:	89 f0       	breq	.+34     	; 0x5a5c <command_proc+0x142>
    5a3a:	c8 33       	cpi	r28, 0x38	; 56
    5a3c:	61 f0       	breq	.+24     	; 0x5a56 <command_proc+0x13c>
    5a3e:	c3 c0       	rjmp	.+390    	; 0x5bc6 <command_proc+0x2ac>
    5a40:	c1 35       	cpi	r28, 0x51	; 81
    5a42:	09 f4       	brne	.+2      	; 0x5a46 <command_proc+0x12c>
    5a44:	b3 c0       	rjmp	.+358    	; 0x5bac <command_proc+0x292>
    5a46:	c2 35       	cpi	r28, 0x52	; 82
    5a48:	09 f4       	brne	.+2      	; 0x5a4c <command_proc+0x132>
    5a4a:	ae c0       	rjmp	.+348    	; 0x5ba8 <command_proc+0x28e>
    5a4c:	ce 34       	cpi	r28, 0x4E	; 78
    5a4e:	09 f0       	breq	.+2      	; 0x5a52 <command_proc+0x138>
    5a50:	ba c0       	rjmp	.+372    	; 0x5bc6 <command_proc+0x2ac>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5a52:	6a e0       	ldi	r22, 0x0A	; 10
    5a54:	b3 c0       	rjmp	.+358    	; 0x5bbc <command_proc+0x2a2>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    5a56:	0e 94 28 27 	call	0x4e50	; 0x4e50 <mousekey_console_help>
    5a5a:	ba c0       	rjmp	.+372    	; 0x5bd0 <command_proc+0x2b6>
            break;
        case KC_Q:
        case KC_ESC:
            mousekey_param = 0;
    5a5c:	10 92 ce 01 	sts	0x01CE, r1
            print("\nQuit Mousekey Console\n");
    5a60:	8c ec       	ldi	r24, 0xCC	; 204
    5a62:	96 e0       	ldi	r25, 0x06	; 6
    5a64:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
            print("C> ");
    5a68:	88 ec       	ldi	r24, 0xC8	; 200
    5a6a:	96 e0       	ldi	r25, 0x06	; 6
    5a6c:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
            command_state = CONSOLE;
    5a70:	81 e0       	ldi	r24, 0x01	; 1
    5a72:	80 93 cf 01 	sts	0x01CF, r24
    5a76:	ca c0       	rjmp	.+404    	; 0x5c0c <command_proc+0x2f2>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\n----- Mousekey Parameters -----\n");
    5a78:	8c e6       	ldi	r24, 0x6C	; 108
    5a7a:	96 e0       	ldi	r25, 0x06	; 6
    5a7c:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("1: mk_delay(*10ms): "); pdec(mk_delay); print("\n");
    5a80:	87 e5       	ldi	r24, 0x57	; 87
    5a82:	96 e0       	ldi	r25, 0x06	; 6
    5a84:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5a88:	80 91 14 01 	lds	r24, 0x0114
    5a8c:	1f 92       	push	r1
    5a8e:	8f 93       	push	r24
    5a90:	84 e5       	ldi	r24, 0x54	; 84
    5a92:	96 e0       	ldi	r25, 0x06	; 6
    5a94:	9f 93       	push	r25
    5a96:	8f 93       	push	r24
    5a98:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5a9c:	82 e5       	ldi	r24, 0x52	; 82
    5a9e:	96 e0       	ldi	r25, 0x06	; 6
    5aa0:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("2: mk_interval(ms): "); pdec(mk_interval); print("\n");
    5aa4:	8d e3       	ldi	r24, 0x3D	; 61
    5aa6:	96 e0       	ldi	r25, 0x06	; 6
    5aa8:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5aac:	80 91 13 01 	lds	r24, 0x0113
    5ab0:	1f 92       	push	r1
    5ab2:	8f 93       	push	r24
    5ab4:	8a e3       	ldi	r24, 0x3A	; 58
    5ab6:	96 e0       	ldi	r25, 0x06	; 6
    5ab8:	9f 93       	push	r25
    5aba:	8f 93       	push	r24
    5abc:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5ac0:	88 e3       	ldi	r24, 0x38	; 56
    5ac2:	96 e0       	ldi	r25, 0x06	; 6
    5ac4:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("3: mk_max_speed: "); pdec(mk_max_speed); print("\n");
    5ac8:	86 e2       	ldi	r24, 0x26	; 38
    5aca:	96 e0       	ldi	r25, 0x06	; 6
    5acc:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5ad0:	80 91 12 01 	lds	r24, 0x0112
    5ad4:	1f 92       	push	r1
    5ad6:	8f 93       	push	r24
    5ad8:	83 e2       	ldi	r24, 0x23	; 35
    5ada:	96 e0       	ldi	r25, 0x06	; 6
    5adc:	9f 93       	push	r25
    5ade:	8f 93       	push	r24
    5ae0:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5ae4:	81 e2       	ldi	r24, 0x21	; 33
    5ae6:	96 e0       	ldi	r25, 0x06	; 6
    5ae8:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("4: mk_time_to_max: "); pdec(mk_time_to_max); print("\n");
    5aec:	8d e0       	ldi	r24, 0x0D	; 13
    5aee:	96 e0       	ldi	r25, 0x06	; 6
    5af0:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5af4:	80 91 11 01 	lds	r24, 0x0111
    5af8:	1f 92       	push	r1
    5afa:	8f 93       	push	r24
    5afc:	8a e0       	ldi	r24, 0x0A	; 10
    5afe:	96 e0       	ldi	r25, 0x06	; 6
    5b00:	9f 93       	push	r25
    5b02:	8f 93       	push	r24
    5b04:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5b08:	88 e0       	ldi	r24, 0x08	; 8
    5b0a:	96 e0       	ldi	r25, 0x06	; 6
    5b0c:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("5: mk_wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    5b10:	80 ef       	ldi	r24, 0xF0	; 240
    5b12:	95 e0       	ldi	r25, 0x05	; 5
    5b14:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5b18:	80 91 10 01 	lds	r24, 0x0110
    5b1c:	1f 92       	push	r1
    5b1e:	8f 93       	push	r24
    5b20:	8d ee       	ldi	r24, 0xED	; 237
    5b22:	95 e0       	ldi	r25, 0x05	; 5
    5b24:	9f 93       	push	r25
    5b26:	8f 93       	push	r24
    5b28:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5b2c:	8b ee       	ldi	r24, 0xEB	; 235
    5b2e:	95 e0       	ldi	r25, 0x05	; 5
    5b30:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    print("6: mk_wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5b34:	81 ed       	ldi	r24, 0xD1	; 209
    5b36:	95 e0       	ldi	r25, 0x05	; 5
    5b38:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5b3c:	80 91 0f 01 	lds	r24, 0x010F
    5b40:	1f 92       	push	r1
    5b42:	8f 93       	push	r24
    5b44:	8e ec       	ldi	r24, 0xCE	; 206
    5b46:	95 e0       	ldi	r25, 0x05	; 5
    5b48:	9f 93       	push	r25
    5b4a:	8f 93       	push	r24
    5b4c:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5b50:	8c ec       	ldi	r24, 0xCC	; 204
    5b52:	95 e0       	ldi	r25, 0x05	; 5
    5b54:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5b58:	8d b7       	in	r24, 0x3d	; 61
    5b5a:	9e b7       	in	r25, 0x3e	; 62
    5b5c:	48 96       	adiw	r24, 0x18	; 24
    5b5e:	0f b6       	in	r0, 0x3f	; 63
    5b60:	f8 94       	cli
    5b62:	9e bf       	out	0x3e, r25	; 62
    5b64:	0f be       	out	0x3f, r0	; 63
    5b66:	8d bf       	out	0x3d, r24	; 61
    5b68:	33 c0       	rjmp	.+102    	; 0x5bd0 <command_proc+0x2b6>
    5b6a:	ce 51       	subi	r28, 0x1E	; 30
    5b6c:	ec 2f       	mov	r30, r28
    5b6e:	f0 e0       	ldi	r31, 0x00	; 0
    5b70:	e2 5d       	subi	r30, 0xD2	; 210
    5b72:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_6:
        case KC_7:
        case KC_8:
        case KC_9:
        case KC_0:
            mousekey_param = numkey2num(code);
    5b74:	80 81       	ld	r24, Z
    5b76:	80 93 ce 01 	sts	0x01CE, r24
            print("selected parameter: "); pdec(mousekey_param); print("\n");
    5b7a:	83 eb       	ldi	r24, 0xB3	; 179
    5b7c:	96 e0       	ldi	r25, 0x06	; 6
    5b7e:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5b82:	80 91 ce 01 	lds	r24, 0x01CE
    5b86:	1f 92       	push	r1
    5b88:	8f 93       	push	r24
    5b8a:	80 eb       	ldi	r24, 0xB0	; 176
    5b8c:	96 e0       	ldi	r25, 0x06	; 6
    5b8e:	9f 93       	push	r25
    5b90:	8f 93       	push	r24
    5b92:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5b96:	8e ea       	ldi	r24, 0xAE	; 174
    5b98:	96 e0       	ldi	r25, 0x06	; 6
    5b9a:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5b9e:	0f 90       	pop	r0
    5ba0:	0f 90       	pop	r0
    5ba2:	0f 90       	pop	r0
    5ba4:	0f 90       	pop	r0
    5ba6:	14 c0       	rjmp	.+40     	; 0x5bd0 <command_proc+0x2b6>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    5ba8:	61 e0       	ldi	r22, 0x01	; 1
    5baa:	03 c0       	rjmp	.+6      	; 0x5bb2 <command_proc+0x298>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    5bac:	61 e0       	ldi	r22, 0x01	; 1
    5bae:	06 c0       	rjmp	.+12     	; 0x5bbc <command_proc+0x2a2>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    5bb0:	6a e0       	ldi	r22, 0x0A	; 10
    5bb2:	80 91 ce 01 	lds	r24, 0x01CE
    5bb6:	0e 94 8e 27 	call	0x4f1c	; 0x4f1c <mousekey_param_inc>
    5bba:	0a c0       	rjmp	.+20     	; 0x5bd0 <command_proc+0x2b6>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5bbc:	80 91 ce 01 	lds	r24, 0x01CE
    5bc0:	0e 94 7f 28 	call	0x50fe	; 0x50fe <mousekey_param_dec>
    5bc4:	05 c0       	rjmp	.+10     	; 0x5bd0 <command_proc+0x2b6>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default values.\n");
            break;
        default:
            print("?");
    5bc6:	87 e9       	ldi	r24, 0x97	; 151
    5bc8:	96 e0       	ldi	r25, 0x06	; 6
    5bca:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5bce:	16 c0       	rjmp	.+44     	; 0x5bfc <command_proc+0x2e2>
            return false;
    }
    print("M"); pdec(mousekey_param); print("> ");
    5bd0:	85 e9       	ldi	r24, 0x95	; 149
    5bd2:	96 e0       	ldi	r25, 0x06	; 6
    5bd4:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5bd8:	80 91 ce 01 	lds	r24, 0x01CE
    5bdc:	1f 92       	push	r1
    5bde:	8f 93       	push	r24
    5be0:	82 e9       	ldi	r24, 0x92	; 146
    5be2:	96 e0       	ldi	r25, 0x06	; 6
    5be4:	9f 93       	push	r25
    5be6:	8f 93       	push	r24
    5be8:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5bec:	8f e8       	ldi	r24, 0x8F	; 143
    5bee:	96 e0       	ldi	r25, 0x06	; 6
    5bf0:	0e 94 b6 08 	call	0x116c	; 0x116c <xputs>
    5bf4:	0f 90       	pop	r0
    5bf6:	0f 90       	pop	r0
    5bf8:	0f 90       	pop	r0
    5bfa:	0f 90       	pop	r0
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    5bfc:	81 e0       	ldi	r24, 0x01	; 1
    5bfe:	06 c0       	rjmp	.+12     	; 0x5c0c <command_proc+0x2f2>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    5c00:	10 92 cf 01 	sts	0x01CF, r1
            return false;
    5c04:	80 e0       	ldi	r24, 0x00	; 0
    5c06:	02 c0       	rjmp	.+4      	; 0x5c0c <command_proc+0x2f2>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    5c08:	80 e0       	ldi	r24, 0x00	; 0
    5c0a:	e8 ce       	rjmp	.-560    	; 0x59dc <command_proc+0xc2>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    5c0c:	cf 91       	pop	r28
    5c0e:	08 95       	ret

00005c10 <softpwm_init>:
    OCR3AL = SOFTPWM_LED_TIMER_TOP & 0xff;
    SREG = sreg;
#else
    /* Timer1 setup */
    /* CTC mode */
    TCCR1B |= (1<<WGM12);
    5c10:	e1 e8       	ldi	r30, 0x81	; 129
    5c12:	f0 e0       	ldi	r31, 0x00	; 0
    5c14:	80 81       	ld	r24, Z
    5c16:	88 60       	ori	r24, 0x08	; 8
    5c18:	80 83       	st	Z, r24
    /* Clock selelct: clk/8 */
    TCCR1B |= (1<<CS10);
    5c1a:	80 81       	ld	r24, Z
    5c1c:	81 60       	ori	r24, 0x01	; 1
    5c1e:	80 83       	st	Z, r24
    /* Set TOP value */
    uint8_t sreg = SREG;
    5c20:	8f b7       	in	r24, 0x3f	; 63
    cli();
    5c22:	f8 94       	cli
    OCR1AH = (SOFTPWM_LED_TIMER_TOP >> 8) & 0xff;
    5c24:	93 e0       	ldi	r25, 0x03	; 3
    5c26:	90 93 89 00 	sts	0x0089, r25
    OCR1AL = SOFTPWM_LED_TIMER_TOP & 0xff;
    5c2a:	90 ed       	ldi	r25, 0xD0	; 208
    5c2c:	90 93 88 00 	sts	0x0088, r25
    SREG = sreg;
    5c30:	8f bf       	out	0x3f, r24	; 63
#endif
    softpwm_led_init();
    5c32:	0c 94 5f 32 	jmp	0x64be	; 0x64be <softpwm_led_init>

00005c36 <softpwm_led_enable>:
    /* Enable Compare Match Interrupt */
#ifdef SOFTPWM_LED_TIMER3
    TIMSK3 |= (1<<OCIE3A);
    //dprintf("softpwm led on: %u\n", TIMSK3 & (1<<OCIE3A));
#else
    TIMSK1 |= (1<<OCIE1A);
    5c36:	ef e6       	ldi	r30, 0x6F	; 111
    5c38:	f0 e0       	ldi	r31, 0x00	; 0
    5c3a:	80 81       	ld	r24, Z
    5c3c:	82 60       	ori	r24, 0x02	; 2
    5c3e:	80 83       	st	Z, r24
    //dprintf("softpwm led on: %u\n", TIMSK1 & (1<<OCIE1A));
#endif
    softpwm_led_state = 1;
    5c40:	81 e0       	ldi	r24, 0x01	; 1
    5c42:	80 93 ef 01 	sts	0x01EF, r24
#ifdef LEDMAP_ENABLE
    softpwm_led_state_change(softpwm_led_state);
    5c46:	0c 94 7a 32 	jmp	0x64f4	; 0x64f4 <softpwm_led_state_change>

00005c4a <softpwm_led_disable>:
#endif
}

void softpwm_led_disable(void)
{
    5c4a:	cf 93       	push	r28
    /* Disable Compare Match Interrupt */
#ifdef SOFTPWM_LED_TIMER3
    TIMSK3 &= ~(1<<OCIE3A);
    //dprintf("softpwm led off: %u\n", TIMSK3 & (1<<OCIE3A));
#else
    TIMSK1 &= ~(1<<OCIE1A);
    5c4c:	80 91 6f 00 	lds	r24, 0x006F
    5c50:	8d 7f       	andi	r24, 0xFD	; 253
    5c52:	80 93 6f 00 	sts	0x006F, r24
    //dprintf("softpwm led off: %u\n", TIMSK1 & (1<<OCIE1A));
#endif
    softpwm_led_state = 0;
    5c56:	10 92 ef 01 	sts	0x01EF, r1
    for (uint8_t i = 0; i < LED_COUNT; i++) {
    5c5a:	c0 e0       	ldi	r28, 0x00	; 0
        softpwm_led_off(i);
    5c5c:	8c 2f       	mov	r24, r28
    5c5e:	0e 94 6d 32 	call	0x64da	; 0x64da <softpwm_led_off>
#else
    TIMSK1 &= ~(1<<OCIE1A);
    //dprintf("softpwm led off: %u\n", TIMSK1 & (1<<OCIE1A));
#endif
    softpwm_led_state = 0;
    for (uint8_t i = 0; i < LED_COUNT; i++) {
    5c62:	cf 5f       	subi	r28, 0xFF	; 255
    5c64:	c5 30       	cpi	r28, 0x05	; 5
    5c66:	d1 f7       	brne	.-12     	; 0x5c5c <softpwm_led_disable+0x12>
        softpwm_led_off(i);
    }
#ifdef LEDMAP_ENABLE
    softpwm_led_state_change(softpwm_led_state);
    5c68:	80 91 ef 01 	lds	r24, 0x01EF
#endif
}
    5c6c:	cf 91       	pop	r28
    softpwm_led_state = 0;
    for (uint8_t i = 0; i < LED_COUNT; i++) {
        softpwm_led_off(i);
    }
#ifdef LEDMAP_ENABLE
    softpwm_led_state_change(softpwm_led_state);
    5c6e:	0c 94 7a 32 	jmp	0x64f4	; 0x64f4 <softpwm_led_state_change>

00005c72 <softpwm_led_set_all>:
}

void softpwm_led_set_all(uint8_t val)
{
    for (uint8_t i = 0; i < LED_COUNT; i++) {
        softpwm_led_ocr_buff[i] = val;
    5c72:	80 93 e5 01 	sts	0x01E5, r24
    5c76:	80 93 e6 01 	sts	0x01E6, r24
    5c7a:	80 93 e7 01 	sts	0x01E7, r24
    5c7e:	80 93 e8 01 	sts	0x01E8, r24
    5c82:	80 93 e9 01 	sts	0x01E9, r24
    5c86:	08 95       	ret

00005c88 <softpwm_led_increase>:
    }
}

void softpwm_led_increase(uint8_t index, uint8_t offset)
{
    if (softpwm_led_ocr_buff[index] > 0xFF - offset) {
    5c88:	e8 2f       	mov	r30, r24
    5c8a:	f0 e0       	ldi	r31, 0x00	; 0
    5c8c:	eb 51       	subi	r30, 0x1B	; 27
    5c8e:	fe 4f       	sbci	r31, 0xFE	; 254
    5c90:	40 81       	ld	r20, Z
    5c92:	24 2f       	mov	r18, r20
    5c94:	30 e0       	ldi	r19, 0x00	; 0
    5c96:	8f ef       	ldi	r24, 0xFF	; 255
    5c98:	90 e0       	ldi	r25, 0x00	; 0
    5c9a:	86 1b       	sub	r24, r22
    5c9c:	91 09       	sbc	r25, r1
    5c9e:	82 17       	cp	r24, r18
    5ca0:	93 07       	cpc	r25, r19
    5ca2:	1c f4       	brge	.+6      	; 0x5caa <softpwm_led_increase+0x22>
        softpwm_led_ocr_buff[index] = 0xFF;
    5ca4:	8f ef       	ldi	r24, 0xFF	; 255
    5ca6:	80 83       	st	Z, r24
    5ca8:	08 95       	ret
    }
    else {
        softpwm_led_ocr_buff[index] += offset;
    5caa:	64 0f       	add	r22, r20
    5cac:	60 83       	st	Z, r22
    5cae:	08 95       	ret

00005cb0 <softpwm_led_increase_all>:
    }
}

void softpwm_led_increase_all(uint8_t offset)
{
    5cb0:	cf 93       	push	r28
    5cb2:	df 93       	push	r29
    5cb4:	d8 2f       	mov	r29, r24
    for (uint8_t i = 0; i < LED_COUNT; i++) {
    5cb6:	c0 e0       	ldi	r28, 0x00	; 0
        softpwm_led_increase(i, offset);
    5cb8:	6d 2f       	mov	r22, r29
    5cba:	8c 2f       	mov	r24, r28
    5cbc:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <softpwm_led_increase>
    }
}

void softpwm_led_increase_all(uint8_t offset)
{
    for (uint8_t i = 0; i < LED_COUNT; i++) {
    5cc0:	cf 5f       	subi	r28, 0xFF	; 255
    5cc2:	c5 30       	cpi	r28, 0x05	; 5
    5cc4:	c9 f7       	brne	.-14     	; 0x5cb8 <softpwm_led_increase_all+0x8>
        softpwm_led_increase(i, offset);
    }
}
    5cc6:	df 91       	pop	r29
    5cc8:	cf 91       	pop	r28
    5cca:	08 95       	ret

00005ccc <softpwm_led_decrease>:

void softpwm_led_decrease(uint8_t index, uint8_t offset)
{
    if (softpwm_led_ocr_buff[index] < offset) {
    5ccc:	e8 2f       	mov	r30, r24
    5cce:	f0 e0       	ldi	r31, 0x00	; 0
    5cd0:	eb 51       	subi	r30, 0x1B	; 27
    5cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    5cd4:	80 81       	ld	r24, Z
    5cd6:	86 17       	cp	r24, r22
    5cd8:	10 f4       	brcc	.+4      	; 0x5cde <softpwm_led_decrease+0x12>
        softpwm_led_ocr_buff[index] = 0;
    5cda:	10 82       	st	Z, r1
    5cdc:	08 95       	ret
    }
    else {
        softpwm_led_ocr_buff[index] -= offset;
    5cde:	86 1b       	sub	r24, r22
    5ce0:	80 83       	st	Z, r24
    5ce2:	08 95       	ret

00005ce4 <softpwm_led_decrease_all>:
    }
}

void softpwm_led_decrease_all(uint8_t offset)
{
    5ce4:	cf 93       	push	r28
    5ce6:	df 93       	push	r29
    5ce8:	d8 2f       	mov	r29, r24
    for (uint8_t i = 0; i < LED_COUNT; i++) {
    5cea:	c0 e0       	ldi	r28, 0x00	; 0
        softpwm_led_decrease(i, offset);
    5cec:	6d 2f       	mov	r22, r29
    5cee:	8c 2f       	mov	r24, r28
    5cf0:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <softpwm_led_decrease>
    }
}

void softpwm_led_decrease_all(uint8_t offset)
{
    for (uint8_t i = 0; i < LED_COUNT; i++) {
    5cf4:	cf 5f       	subi	r28, 0xFF	; 255
    5cf6:	c5 30       	cpi	r28, 0x05	; 5
    5cf8:	c9 f7       	brne	.-14     	; 0x5cec <softpwm_led_decrease_all+0x8>
        softpwm_led_decrease(i, offset);
    }
}
    5cfa:	df 91       	pop	r29
    5cfc:	cf 91       	pop	r28
    5cfe:	08 95       	ret

00005d00 <softpwm_led_get_state>:

inline uint8_t softpwm_led_get_state(void)
{
    return softpwm_led_state;
}
    5d00:	80 91 ef 01 	lds	r24, 0x01EF
    5d04:	08 95       	ret

00005d06 <fading_led_enable_all>:
{
    LED_BIT_SET(fading_led_state, index);
}

void fading_led_enable_all(void)
{
    5d06:	80 91 e4 01 	lds	r24, 0x01E4
    for (uint8_t i = 0; i < LED_COUNT; i++) {
        LED_BIT_SET(fading_led_state, i);
    5d0a:	8f 61       	ori	r24, 0x1F	; 31
    5d0c:	80 93 e4 01 	sts	0x01E4, r24
    5d10:	08 95       	ret

00005d12 <fading_led_disable_all>:
    LED_BIT_CLEAR(fading_led_state, index);
}

void fading_led_disable_all(void)
{
    fading_led_state = 0;
    5d12:	10 92 e4 01 	sts	0x01E4, r1
    5d16:	08 95       	ret

00005d18 <fading_led_set_direction>:
        LED_BIT_XOR(fading_led_state, i);
    }
}

void fading_led_set_direction(uint8_t index, uint8_t dir)
{
    5d18:	90 91 e3 01 	lds	r25, 0x01E3
    if (dir) {
        LED_BIT_SET(fading_led_direction, index);
    5d1c:	21 e0       	ldi	r18, 0x01	; 1
    5d1e:	30 e0       	ldi	r19, 0x00	; 0
    5d20:	08 2e       	mov	r0, r24
    5d22:	01 c0       	rjmp	.+2      	; 0x5d26 <fading_led_set_direction+0xe>
    5d24:	22 0f       	add	r18, r18
    5d26:	0a 94       	dec	r0
    5d28:	ea f7       	brpl	.-6      	; 0x5d24 <fading_led_set_direction+0xc>
    }
}

void fading_led_set_direction(uint8_t index, uint8_t dir)
{
    if (dir) {
    5d2a:	66 23       	and	r22, r22
    5d2c:	11 f0       	breq	.+4      	; 0x5d32 <fading_led_set_direction+0x1a>
        LED_BIT_SET(fading_led_direction, index);
    5d2e:	29 2b       	or	r18, r25
    5d30:	02 c0       	rjmp	.+4      	; 0x5d36 <fading_led_set_direction+0x1e>
    }
    else {
        LED_BIT_CLEAR(fading_led_direction, index);
    5d32:	20 95       	com	r18
    5d34:	29 23       	and	r18, r25
    5d36:	20 93 e3 01 	sts	0x01E3, r18
    5d3a:	08 95       	ret

00005d3c <fading_led_set_direction_all>:
    }
}

void fading_led_set_direction_all(uint8_t dir)
{
    5d3c:	cf 93       	push	r28
    5d3e:	df 93       	push	r29
    5d40:	d8 2f       	mov	r29, r24
    for (uint8_t i = 0; i < LED_COUNT; i++) {
    5d42:	c0 e0       	ldi	r28, 0x00	; 0
        fading_led_set_direction(i, dir);
    5d44:	6d 2f       	mov	r22, r29
    5d46:	8c 2f       	mov	r24, r28
    5d48:	0e 94 8c 2e 	call	0x5d18	; 0x5d18 <fading_led_set_direction>
    }
}

void fading_led_set_direction_all(uint8_t dir)
{
    for (uint8_t i = 0; i < LED_COUNT; i++) {
    5d4c:	cf 5f       	subi	r28, 0xFF	; 255
    5d4e:	c5 30       	cpi	r28, 0x05	; 5
    5d50:	c9 f7       	brne	.-14     	; 0x5d44 <fading_led_set_direction_all+0x8>
        fading_led_set_direction(i, dir);
    }
}
    5d52:	df 91       	pop	r29
    5d54:	cf 91       	pop	r28
    5d56:	08 95       	ret

00005d58 <fading_led_set_duration>:

void fading_led_set_duration(uint8_t dur)
{
    fading_led_duration = dur;
    5d58:	80 93 e2 01 	sts	0x01E2, r24
    5d5c:	08 95       	ret

00005d5e <breathing_led_enable_all>:
    LED_BIT_SET(breathing_led_state, index);
    LED_BIT_SET(breathing_led_once, index);
}

void breathing_led_enable_all(void)
{
    5d5e:	80 91 dc 01 	lds	r24, 0x01DC
    for (uint8_t i = 0; i < LED_COUNT; i++) {
        LED_BIT_SET(breathing_led_state, i);
    5d62:	8f 61       	ori	r24, 0x1F	; 31
    5d64:	80 93 dc 01 	sts	0x01DC, r24
    5d68:	08 95       	ret

00005d6a <breathing_led_disable_all>:
    LED_BIT_CLEAR(breathing_led_state, index);
}

void breathing_led_disable_all(void)
{
    breathing_led_state = 0;
    5d6a:	10 92 dc 01 	sts	0x01DC, r1
    5d6e:	08 95       	ret

00005d70 <breathing_led_set_duration>:
    }
}

void breathing_led_set_duration(uint8_t dur)
{
    breathing_led_duration = dur;
    5d70:	80 93 da 01 	sts	0x01DA, r24
    5d74:	08 95       	ret

00005d76 <__vector_17>:
#ifdef SOFTPWM_LED_TIMER3
ISR(TIMER3_COMPA_vect)
#else
ISR(TIMER1_COMPA_vect)
#endif
{
    5d76:	1f 92       	push	r1
    5d78:	0f 92       	push	r0
    5d7a:	0f b6       	in	r0, 0x3f	; 63
    5d7c:	0f 92       	push	r0
    5d7e:	11 24       	eor	r1, r1
    5d80:	ef 92       	push	r14
    5d82:	ff 92       	push	r15
    5d84:	0f 93       	push	r16
    5d86:	1f 93       	push	r17
    5d88:	2f 93       	push	r18
    5d8a:	3f 93       	push	r19
    5d8c:	4f 93       	push	r20
    5d8e:	5f 93       	push	r21
    5d90:	6f 93       	push	r22
    5d92:	7f 93       	push	r23
    5d94:	8f 93       	push	r24
    5d96:	9f 93       	push	r25
    5d98:	af 93       	push	r26
    5d9a:	bf 93       	push	r27
    5d9c:	cf 93       	push	r28
    5d9e:	df 93       	push	r29
    5da0:	ef 93       	push	r30
    5da2:	ff 93       	push	r31
    static uint8_t pwm = 0;
    pwm++;
    5da4:	80 91 d3 01 	lds	r24, 0x01D3
    5da8:	8f 5f       	subi	r24, 0xFF	; 255
    5daa:	80 93 d3 01 	sts	0x01D3, r24
    5dae:	0a ee       	ldi	r16, 0xEA	; 234
    5db0:	11 e0       	ldi	r17, 0x01	; 1
    5db2:	c0 e0       	ldi	r28, 0x00	; 0
    5db4:	d0 e0       	ldi	r29, 0x00	; 0
    5db6:	fc 2e       	mov	r15, r28
    for (uint8_t i = 0; i < LED_COUNT; i++) {
        // LED on
        if (pwm == 0) {
    5db8:	80 91 d3 01 	lds	r24, 0x01D3
    5dbc:	81 11       	cpse	r24, r1
    5dbe:	0d c0       	rjmp	.+26     	; 0x5dda <__vector_17+0x64>
            if (softpwm_led_ocr[i]) softpwm_led_on(i);
    5dc0:	f8 01       	movw	r30, r16
    5dc2:	80 81       	ld	r24, Z
    5dc4:	88 23       	and	r24, r24
    5dc6:	19 f0       	breq	.+6      	; 0x5dce <__vector_17+0x58>
    5dc8:	8c 2f       	mov	r24, r28
    5dca:	0e 94 60 32 	call	0x64c0	; 0x64c0 <softpwm_led_on>
    5dce:	fe 01       	movw	r30, r28
    5dd0:	eb 51       	subi	r30, 0x1B	; 27
    5dd2:	fe 4f       	sbci	r31, 0xFE	; 254
            softpwm_led_ocr[i] = softpwm_led_ocr_buff[i];
    5dd4:	80 81       	ld	r24, Z
    5dd6:	f8 01       	movw	r30, r16
    5dd8:	80 83       	st	Z, r24
        }
        // LED off
        if (pwm == softpwm_led_ocr[i]) {
    5dda:	f8 01       	movw	r30, r16
    5ddc:	81 91       	ld	r24, Z+
    5dde:	8f 01       	movw	r16, r30
    5de0:	90 91 d3 01 	lds	r25, 0x01D3
    5de4:	98 13       	cpse	r25, r24
    5de6:	03 c0       	rjmp	.+6      	; 0x5dee <__vector_17+0x78>
            softpwm_led_off(i);
    5de8:	8f 2d       	mov	r24, r15
    5dea:	0e 94 6d 32 	call	0x64da	; 0x64da <softpwm_led_off>
    5dee:	21 96       	adiw	r28, 0x01	; 1
ISR(TIMER1_COMPA_vect)
#endif
{
    static uint8_t pwm = 0;
    pwm++;
    for (uint8_t i = 0; i < LED_COUNT; i++) {
    5df0:	c5 30       	cpi	r28, 0x05	; 5
    5df2:	d1 05       	cpc	r29, r1
    5df4:	01 f7       	brne	.-64     	; 0x5db6 <__vector_17+0x40>
        }
    }

#if defined(FADING_LED_ENABLE) || defined(BREATHING_LED_ENABLE) || defined(CUSTOM_LED_ENABLE)
    static uint8_t counter = 0;
    if (++counter >= SOFTPWM_LED_FREQ) {
    5df6:	80 91 d2 01 	lds	r24, 0x01D2
    5dfa:	8f 5f       	subi	r24, 0xFF	; 255
    5dfc:	80 93 d2 01 	sts	0x01D2, r24
    5e00:	80 34       	cpi	r24, 0x40	; 64
    5e02:	08 f4       	brcc	.+2      	; 0x5e06 <__vector_17+0x90>
    5e04:	ad c0       	rjmp	.+346    	; 0x5f60 <__vector_17+0x1ea>
        counter = 0;
    5e06:	10 92 d2 01 	sts	0x01D2, r1

#ifdef FADING_LED_ENABLE
void fading_led_proc(void)
{
    static uint8_t step = 0;
    if (fading_led_state) {
    5e0a:	e0 90 e4 01 	lds	r14, 0x01E4
    5e0e:	e1 10       	cpse	r14, r1
    5e10:	05 c0       	rjmp	.+10     	; 0x5e1c <__vector_17+0xa6>

#ifdef BREATHING_LED_ENABLE
void breathing_led_proc(void)
{
    static uint8_t step = 0;
    if (breathing_led_state) {
    5e12:	f0 90 dc 01 	lds	r15, 0x01DC
    5e16:	f1 10       	cpse	r15, r1
    5e18:	3b c0       	rjmp	.+118    	; 0x5e90 <__vector_17+0x11a>
    5e1a:	a2 c0       	rjmp	.+324    	; 0x5f60 <__vector_17+0x1ea>
#ifdef FADING_LED_ENABLE
void fading_led_proc(void)
{
    static uint8_t step = 0;
    if (fading_led_state) {
        if (++step > fading_led_duration) {
    5e1c:	80 91 d1 01 	lds	r24, 0x01D1
    5e20:	8f 5f       	subi	r24, 0xFF	; 255
    5e22:	80 93 d1 01 	sts	0x01D1, r24
    5e26:	90 91 e2 01 	lds	r25, 0x01E2
    5e2a:	98 17       	cp	r25, r24
    5e2c:	90 f7       	brcc	.-28     	; 0x5e12 <__vector_17+0x9c>
            step = 0;
    5e2e:	10 92 d1 01 	sts	0x01D1, r1
    5e32:	0d ed       	ldi	r16, 0xDD	; 221
    5e34:	11 e0       	ldi	r17, 0x01	; 1
    5e36:	c0 e0       	ldi	r28, 0x00	; 0
    5e38:	d0 e0       	ldi	r29, 0x00	; 0
            for (uint8_t i = 0; i < LED_COUNT; i++) {
                if (fading_led_state & LED_BIT(i)) {
    5e3a:	f1 2c       	mov	r15, r1
    5e3c:	c7 01       	movw	r24, r14
    5e3e:	0c 2e       	mov	r0, r28
    5e40:	02 c0       	rjmp	.+4      	; 0x5e46 <__vector_17+0xd0>
    5e42:	96 95       	lsr	r25
    5e44:	87 95       	ror	r24
    5e46:	0a 94       	dec	r0
    5e48:	e2 f7       	brpl	.-8      	; 0x5e42 <__vector_17+0xcc>
    5e4a:	80 ff       	sbrs	r24, 0
    5e4c:	1a c0       	rjmp	.+52     	; 0x5e82 <__vector_17+0x10c>
                    if (fading_led_delay[i]) {
    5e4e:	f8 01       	movw	r30, r16
    5e50:	80 81       	ld	r24, Z
    5e52:	88 23       	and	r24, r24
    5e54:	19 f0       	breq	.+6      	; 0x5e5c <__vector_17+0xe6>
                        fading_led_delay[i]--;
    5e56:	81 50       	subi	r24, 0x01	; 1
    5e58:	80 83       	st	Z, r24
    5e5a:	13 c0       	rjmp	.+38     	; 0x5e82 <__vector_17+0x10c>
                    }
                    else {
                        if (fading_led_direction & LED_BIT(i)) {
    5e5c:	80 91 e3 01 	lds	r24, 0x01E3
    5e60:	90 e0       	ldi	r25, 0x00	; 0
    5e62:	0c 2e       	mov	r0, r28
    5e64:	02 c0       	rjmp	.+4      	; 0x5e6a <__vector_17+0xf4>
    5e66:	96 95       	lsr	r25
    5e68:	87 95       	ror	r24
    5e6a:	0a 94       	dec	r0
    5e6c:	e2 f7       	brpl	.-8      	; 0x5e66 <__vector_17+0xf0>
                            softpwm_led_decrease(i, 1);
    5e6e:	61 e0       	ldi	r22, 0x01	; 1
                if (fading_led_state & LED_BIT(i)) {
                    if (fading_led_delay[i]) {
                        fading_led_delay[i]--;
                    }
                    else {
                        if (fading_led_direction & LED_BIT(i)) {
    5e70:	80 ff       	sbrs	r24, 0
    5e72:	04 c0       	rjmp	.+8      	; 0x5e7c <__vector_17+0x106>
                            softpwm_led_decrease(i, 1);
    5e74:	8c 2f       	mov	r24, r28
    5e76:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <softpwm_led_decrease>
    5e7a:	03 c0       	rjmp	.+6      	; 0x5e82 <__vector_17+0x10c>
                        }
                        else {
                            softpwm_led_increase(i, 1);
    5e7c:	8c 2f       	mov	r24, r28
    5e7e:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <softpwm_led_increase>
    5e82:	21 96       	adiw	r28, 0x01	; 1
    5e84:	0f 5f       	subi	r16, 0xFF	; 255
    5e86:	1f 4f       	sbci	r17, 0xFF	; 255
{
    static uint8_t step = 0;
    if (fading_led_state) {
        if (++step > fading_led_duration) {
            step = 0;
            for (uint8_t i = 0; i < LED_COUNT; i++) {
    5e88:	c5 30       	cpi	r28, 0x05	; 5
    5e8a:	d1 05       	cpc	r29, r1
    5e8c:	b9 f6       	brne	.-82     	; 0x5e3c <__vector_17+0xc6>
    5e8e:	c1 cf       	rjmp	.-126    	; 0x5e12 <__vector_17+0x9c>
#ifdef BREATHING_LED_ENABLE
void breathing_led_proc(void)
{
    static uint8_t step = 0;
    if (breathing_led_state) {
        if (++step > breathing_led_duration) {
    5e90:	80 91 d0 01 	lds	r24, 0x01D0
    5e94:	8f 5f       	subi	r24, 0xFF	; 255
    5e96:	80 93 d0 01 	sts	0x01D0, r24
    5e9a:	90 91 da 01 	lds	r25, 0x01DA
    5e9e:	98 17       	cp	r25, r24
    5ea0:	08 f0       	brcs	.+2      	; 0x5ea4 <__vector_17+0x12e>
    5ea2:	5e c0       	rjmp	.+188    	; 0x5f60 <__vector_17+0x1ea>
            step = 0;
    5ea4:	10 92 d0 01 	sts	0x01D0, r1
    5ea8:	10 91 d4 01 	lds	r17, 0x01D4
    5eac:	00 91 db 01 	lds	r16, 0x01DB
    5eb0:	a5 ed       	ldi	r26, 0xD5	; 213
    5eb2:	b1 e0       	ldi	r27, 0x01	; 1
    5eb4:	80 e0       	ldi	r24, 0x00	; 0
    5eb6:	90 e0       	ldi	r25, 0x00	; 0
                        }

                    }
                    else {
                        if (breathing_led_index[i] == 127) {
                            LED_BIT_SET(breathing_led_direction, i);
    5eb8:	41 e0       	ldi	r20, 0x01	; 1
    5eba:	50 e0       	ldi	r21, 0x00	; 0
    static uint8_t step = 0;
    if (breathing_led_state) {
        if (++step > breathing_led_duration) {
            step = 0;
            for (uint8_t i = 0; i < LED_COUNT; i++) {
                if (breathing_led_state & LED_BIT(i)) {
    5ebc:	2f 2d       	mov	r18, r15
    5ebe:	30 e0       	ldi	r19, 0x00	; 0
    5ec0:	08 2e       	mov	r0, r24
    5ec2:	02 c0       	rjmp	.+4      	; 0x5ec8 <__vector_17+0x152>
    5ec4:	36 95       	lsr	r19
    5ec6:	27 95       	ror	r18
    5ec8:	0a 94       	dec	r0
    5eca:	e2 f7       	brpl	.-8      	; 0x5ec4 <__vector_17+0x14e>
    5ecc:	20 ff       	sbrs	r18, 0
    5ece:	3c c0       	rjmp	.+120    	; 0x5f48 <__vector_17+0x1d2>
                    softpwm_led_ocr_buff[i] = pgm_read_byte(&breathing_table[breathing_led_index[i]]);
    5ed0:	6c 91       	ld	r22, X
    5ed2:	e6 2f       	mov	r30, r22
    5ed4:	f0 e0       	ldi	r31, 0x00	; 0
    5ed6:	e0 52       	subi	r30, 0x20	; 32
    5ed8:	f0 4f       	sbci	r31, 0xF0	; 240
    5eda:	e4 91       	lpm	r30, Z
    5edc:	ec 01       	movw	r28, r24
    5ede:	cb 51       	subi	r28, 0x1B	; 27
    5ee0:	de 4f       	sbci	r29, 0xFE	; 254
    5ee2:	e8 83       	st	Y, r30
                    if (breathing_led_direction & LED_BIT(i)) {
    5ee4:	21 2f       	mov	r18, r17
    5ee6:	30 e0       	ldi	r19, 0x00	; 0
    5ee8:	08 2e       	mov	r0, r24
    5eea:	02 c0       	rjmp	.+4      	; 0x5ef0 <__vector_17+0x17a>
    5eec:	36 95       	lsr	r19
    5eee:	27 95       	ror	r18
    5ef0:	0a 94       	dec	r0
    5ef2:	e2 f7       	brpl	.-8      	; 0x5eec <__vector_17+0x176>
    5ef4:	3c 91       	ld	r19, X
    5ef6:	20 ff       	sbrs	r18, 0
    5ef8:	1a c0       	rjmp	.+52     	; 0x5f2e <__vector_17+0x1b8>
                        if (breathing_led_index[i] == 0) {
    5efa:	61 11       	cpse	r22, r1
    5efc:	15 c0       	rjmp	.+42     	; 0x5f28 <__vector_17+0x1b2>
                            LED_BIT_CLEAR(breathing_led_direction, i);
    5efe:	ba 01       	movw	r22, r20
    5f00:	08 2e       	mov	r0, r24
    5f02:	01 c0       	rjmp	.+2      	; 0x5f06 <__vector_17+0x190>
    5f04:	66 0f       	add	r22, r22
    5f06:	0a 94       	dec	r0
    5f08:	ea f7       	brpl	.-6      	; 0x5f04 <__vector_17+0x18e>
    5f0a:	60 95       	com	r22
    5f0c:	16 23       	and	r17, r22
                            if (breathing_led_once & LED_BIT(i)) {
    5f0e:	20 2f       	mov	r18, r16
    5f10:	30 e0       	ldi	r19, 0x00	; 0
    5f12:	08 2e       	mov	r0, r24
    5f14:	02 c0       	rjmp	.+4      	; 0x5f1a <__vector_17+0x1a4>
    5f16:	36 95       	lsr	r19
    5f18:	27 95       	ror	r18
    5f1a:	0a 94       	dec	r0
    5f1c:	e2 f7       	brpl	.-8      	; 0x5f16 <__vector_17+0x1a0>
    5f1e:	20 ff       	sbrs	r18, 0
    5f20:	13 c0       	rjmp	.+38     	; 0x5f48 <__vector_17+0x1d2>
                                LED_BIT_CLEAR(breathing_led_state, i);
                                LED_BIT_CLEAR(breathing_led_once, i);
    5f22:	06 23       	and	r16, r22
                    softpwm_led_ocr_buff[i] = pgm_read_byte(&breathing_table[breathing_led_index[i]]);
                    if (breathing_led_direction & LED_BIT(i)) {
                        if (breathing_led_index[i] == 0) {
                            LED_BIT_CLEAR(breathing_led_direction, i);
                            if (breathing_led_once & LED_BIT(i)) {
                                LED_BIT_CLEAR(breathing_led_state, i);
    5f24:	f6 22       	and	r15, r22
    5f26:	10 c0       	rjmp	.+32     	; 0x5f48 <__vector_17+0x1d2>
                                LED_BIT_CLEAR(breathing_led_once, i);
                            }
                        }
                        else {
                            breathing_led_index[i]--;
    5f28:	61 50       	subi	r22, 0x01	; 1
    5f2a:	6c 93       	st	X, r22
    5f2c:	0d c0       	rjmp	.+26     	; 0x5f48 <__vector_17+0x1d2>
                        }

                    }
                    else {
                        if (breathing_led_index[i] == 127) {
    5f2e:	6f 37       	cpi	r22, 0x7F	; 127
    5f30:	41 f4       	brne	.+16     	; 0x5f42 <__vector_17+0x1cc>
                            LED_BIT_SET(breathing_led_direction, i);
    5f32:	9a 01       	movw	r18, r20
    5f34:	08 2e       	mov	r0, r24
    5f36:	01 c0       	rjmp	.+2      	; 0x5f3a <__vector_17+0x1c4>
    5f38:	22 0f       	add	r18, r18
    5f3a:	0a 94       	dec	r0
    5f3c:	ea f7       	brpl	.-6      	; 0x5f38 <__vector_17+0x1c2>
    5f3e:	12 2b       	or	r17, r18
    5f40:	03 c0       	rjmp	.+6      	; 0x5f48 <__vector_17+0x1d2>
                        }
                        else {
                            breathing_led_index[i]++;
    5f42:	21 e0       	ldi	r18, 0x01	; 1
    5f44:	23 0f       	add	r18, r19
    5f46:	2c 93       	st	X, r18
    5f48:	01 96       	adiw	r24, 0x01	; 1
    5f4a:	11 96       	adiw	r26, 0x01	; 1
{
    static uint8_t step = 0;
    if (breathing_led_state) {
        if (++step > breathing_led_duration) {
            step = 0;
            for (uint8_t i = 0; i < LED_COUNT; i++) {
    5f4c:	85 30       	cpi	r24, 0x05	; 5
    5f4e:	91 05       	cpc	r25, r1
    5f50:	09 f0       	breq	.+2      	; 0x5f54 <__vector_17+0x1de>
    5f52:	b4 cf       	rjmp	.-152    	; 0x5ebc <__vector_17+0x146>
    5f54:	f0 92 dc 01 	sts	0x01DC, r15
    5f58:	10 93 d4 01 	sts	0x01D4, r17
    5f5c:	00 93 db 01 	sts	0x01DB, r16
#ifdef CUSTOM_LED_ENABLE
        softpwm_led_custom();
#endif
    }
#endif
}
    5f60:	ff 91       	pop	r31
    5f62:	ef 91       	pop	r30
    5f64:	df 91       	pop	r29
    5f66:	cf 91       	pop	r28
    5f68:	bf 91       	pop	r27
    5f6a:	af 91       	pop	r26
    5f6c:	9f 91       	pop	r25
    5f6e:	8f 91       	pop	r24
    5f70:	7f 91       	pop	r23
    5f72:	6f 91       	pop	r22
    5f74:	5f 91       	pop	r21
    5f76:	4f 91       	pop	r20
    5f78:	3f 91       	pop	r19
    5f7a:	2f 91       	pop	r18
    5f7c:	1f 91       	pop	r17
    5f7e:	0f 91       	pop	r16
    5f80:	ff 90       	pop	r15
    5f82:	ef 90       	pop	r14
    5f84:	0f 90       	pop	r0
    5f86:	0f be       	out	0x3f, r0	; 63
    5f88:	0f 90       	pop	r0
    5f8a:	1f 90       	pop	r1
    5f8c:	18 95       	reti

00005f8e <backlight_init>:
backlight_config_t backlight_config;

void backlight_init(void)
{
    /* check signature */
    if (!eeconfig_is_enabled()) {
    5f8e:	0e 94 45 24 	call	0x488a	; 0x488a <eeconfig_is_enabled>
    5f92:	81 11       	cpse	r24, r1
    5f94:	02 c0       	rjmp	.+4      	; 0x5f9a <backlight_init+0xc>
        eeconfig_init();
    5f96:	0e 94 20 24 	call	0x4840	; 0x4840 <eeconfig_init>
    }
    backlight_config.raw = eeconfig_read_backlight();
    5f9a:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <eeconfig_read_backlight>
    5f9e:	80 93 0e 02 	sts	0x020E, r24
    backlight_set(backlight_config.enable ? backlight_config.level : 0);
    5fa2:	80 ff       	sbrs	r24, 0
    5fa4:	02 c0       	rjmp	.+4      	; 0x5faa <backlight_init+0x1c>
    5fa6:	86 95       	lsr	r24
    5fa8:	01 c0       	rjmp	.+2      	; 0x5fac <backlight_init+0x1e>
    5faa:	80 e0       	ldi	r24, 0x00	; 0
    5fac:	0c 94 95 0a 	jmp	0x152a	; 0x152a <backlight_set>

00005fb0 <backlight_increase>:
}

void backlight_increase(void)
{
#ifdef BACKLIGHT_CUSTOM
    if (backlight_config.enable) {
    5fb0:	80 91 0e 02 	lds	r24, 0x020E
    5fb4:	80 ff       	sbrs	r24, 0
    5fb6:	27 c0       	rjmp	.+78     	; 0x6006 <backlight_increase+0x56>
        if (backlight_config.level < BACKLIGHT_LEVELS) {
    5fb8:	98 2f       	mov	r25, r24
    5fba:	96 95       	lsr	r25
    5fbc:	29 2f       	mov	r18, r25
    5fbe:	30 e0       	ldi	r19, 0x00	; 0
    5fc0:	28 30       	cpi	r18, 0x08	; 8
    5fc2:	31 05       	cpc	r19, r1
    5fc4:	44 f4       	brge	.+16     	; 0x5fd6 <backlight_increase+0x26>
            backlight_config.level++;
    5fc6:	9f 5f       	subi	r25, 0xFF	; 255
    5fc8:	99 0f       	add	r25, r25
    5fca:	81 70       	andi	r24, 0x01	; 1
    5fcc:	89 2b       	or	r24, r25
    5fce:	80 93 0e 02 	sts	0x020E, r24
            eeconfig_write_backlight(backlight_config.raw);
    5fd2:	0e 94 6f 24 	call	0x48de	; 0x48de <eeconfig_write_backlight>
        }
        dprintf("backlight custom increase: %u\n", backlight_config.level);
    5fd6:	80 91 bd 01 	lds	r24, 0x01BD
    5fda:	80 ff       	sbrs	r24, 0
    5fdc:	0f c0       	rjmp	.+30     	; 0x5ffc <backlight_increase+0x4c>
    5fde:	80 91 0e 02 	lds	r24, 0x020E
    5fe2:	86 95       	lsr	r24
    5fe4:	1f 92       	push	r1
    5fe6:	8f 93       	push	r24
    5fe8:	89 ea       	ldi	r24, 0xA9	; 169
    5fea:	90 e1       	ldi	r25, 0x10	; 16
    5fec:	9f 93       	push	r25
    5fee:	8f 93       	push	r24
    5ff0:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    5ff4:	0f 90       	pop	r0
    5ff6:	0f 90       	pop	r0
    5ff8:	0f 90       	pop	r0
    5ffa:	0f 90       	pop	r0
        backlight_set(backlight_config.level);
    5ffc:	80 91 0e 02 	lds	r24, 0x020E
    6000:	86 95       	lsr	r24
    6002:	0c 94 95 0a 	jmp	0x152a	; 0x152a <backlight_set>
    6006:	08 95       	ret

00006008 <backlight_decrease>:
}

void backlight_decrease(void)
{
#ifdef BACKLIGHT_CUSTOM
    if (backlight_config.enable) {
    6008:	80 91 0e 02 	lds	r24, 0x020E
    600c:	80 ff       	sbrs	r24, 0
    600e:	27 c0       	rjmp	.+78     	; 0x605e <backlight_decrease+0x56>
        if(backlight_config.level > 1)
    6010:	98 2f       	mov	r25, r24
    6012:	96 95       	lsr	r25
    6014:	29 2f       	mov	r18, r25
    6016:	30 e0       	ldi	r19, 0x00	; 0
    6018:	22 30       	cpi	r18, 0x02	; 2
    601a:	31 05       	cpc	r19, r1
    601c:	44 f0       	brlt	.+16     	; 0x602e <backlight_decrease+0x26>
        {
            backlight_config.level--;
    601e:	91 58       	subi	r25, 0x81	; 129
    6020:	99 0f       	add	r25, r25
    6022:	81 70       	andi	r24, 0x01	; 1
    6024:	89 2b       	or	r24, r25
    6026:	80 93 0e 02 	sts	0x020E, r24
            eeconfig_write_backlight(backlight_config.raw);
    602a:	0e 94 6f 24 	call	0x48de	; 0x48de <eeconfig_write_backlight>
        }
        dprintf("backlight custom decrease: %u\n", backlight_config.level);
    602e:	80 91 bd 01 	lds	r24, 0x01BD
    6032:	80 ff       	sbrs	r24, 0
    6034:	0f c0       	rjmp	.+30     	; 0x6054 <backlight_decrease+0x4c>
    6036:	80 91 0e 02 	lds	r24, 0x020E
    603a:	86 95       	lsr	r24
    603c:	1f 92       	push	r1
    603e:	8f 93       	push	r24
    6040:	8a e8       	ldi	r24, 0x8A	; 138
    6042:	90 e1       	ldi	r25, 0x10	; 16
    6044:	9f 93       	push	r25
    6046:	8f 93       	push	r24
    6048:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    604c:	0f 90       	pop	r0
    604e:	0f 90       	pop	r0
    6050:	0f 90       	pop	r0
    6052:	0f 90       	pop	r0
        backlight_set(backlight_config.level);
    6054:	80 91 0e 02 	lds	r24, 0x020E
    6058:	86 95       	lsr	r24
    605a:	0c 94 95 0a 	jmp	0x152a	; 0x152a <backlight_set>
    605e:	08 95       	ret

00006060 <backlight_toggle>:
#endif
}

void backlight_toggle(void)
{
    backlight_config.enable ^= 1;
    6060:	80 91 0e 02 	lds	r24, 0x020E
    6064:	98 2f       	mov	r25, r24
    6066:	90 95       	com	r25
    6068:	91 70       	andi	r25, 0x01	; 1
    606a:	90 fb       	bst	r25, 0
    606c:	80 f9       	bld	r24, 0
    606e:	80 93 0e 02 	sts	0x020E, r24
    if (backlight_config.enable)
    6072:	99 23       	and	r25, r25
    6074:	39 f0       	breq	.+14     	; 0x6084 <backlight_toggle+0x24>
    {
        if (backlight_config.level == 0) {
    6076:	98 2f       	mov	r25, r24
    6078:	9e 7f       	andi	r25, 0xFE	; 254
    607a:	21 f4       	brne	.+8      	; 0x6084 <backlight_toggle+0x24>
            backlight_config.level = 1;
    607c:	81 70       	andi	r24, 0x01	; 1
    607e:	82 60       	ori	r24, 0x02	; 2
    6080:	80 93 0e 02 	sts	0x020E, r24
        }
    }
    eeconfig_write_backlight(backlight_config.raw);
    6084:	80 91 0e 02 	lds	r24, 0x020E
    6088:	0e 94 6f 24 	call	0x48de	; 0x48de <eeconfig_write_backlight>
    dprintf("backlight toggle: %u\n", backlight_config.enable);
    608c:	80 91 bd 01 	lds	r24, 0x01BD
    6090:	80 ff       	sbrs	r24, 0
    6092:	0f c0       	rjmp	.+30     	; 0x60b2 <backlight_toggle+0x52>
    6094:	80 91 0e 02 	lds	r24, 0x020E
    6098:	81 70       	andi	r24, 0x01	; 1
    609a:	1f 92       	push	r1
    609c:	8f 93       	push	r24
    609e:	84 e7       	ldi	r24, 0x74	; 116
    60a0:	90 e1       	ldi	r25, 0x10	; 16
    60a2:	9f 93       	push	r25
    60a4:	8f 93       	push	r24
    60a6:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    60aa:	0f 90       	pop	r0
    60ac:	0f 90       	pop	r0
    60ae:	0f 90       	pop	r0
    60b0:	0f 90       	pop	r0
    backlight_set(backlight_config.enable ? backlight_config.level : 0);
    60b2:	80 91 0e 02 	lds	r24, 0x020E
    60b6:	80 ff       	sbrs	r24, 0
    60b8:	02 c0       	rjmp	.+4      	; 0x60be <backlight_toggle+0x5e>
    60ba:	86 95       	lsr	r24
    60bc:	01 c0       	rjmp	.+2      	; 0x60c0 <backlight_toggle+0x60>
    60be:	80 e0       	ldi	r24, 0x00	; 0
    60c0:	0c 94 95 0a 	jmp	0x152a	; 0x152a <backlight_set>

000060c4 <backlight_step>:
}

void backlight_step(void)
{
    backlight_config.level++;
    60c4:	30 91 0e 02 	lds	r19, 0x020E
    60c8:	23 2f       	mov	r18, r19
    60ca:	26 95       	lsr	r18
    60cc:	2f 5f       	subi	r18, 0xFF	; 255
    60ce:	2f 77       	andi	r18, 0x7F	; 127
    if(backlight_config.level > BACKLIGHT_LEVELS)
    60d0:	82 2f       	mov	r24, r18
    60d2:	90 e0       	ldi	r25, 0x00	; 0
    60d4:	31 70       	andi	r19, 0x01	; 1
    60d6:	09 97       	sbiw	r24, 0x09	; 9
    60d8:	2c f4       	brge	.+10     	; 0x60e4 <backlight_step+0x20>
    backlight_set(backlight_config.enable ? backlight_config.level : 0);
}

void backlight_step(void)
{
    backlight_config.level++;
    60da:	22 0f       	add	r18, r18
    60dc:	23 2b       	or	r18, r19
    60de:	20 93 0e 02 	sts	0x020E, r18
    60e2:	02 c0       	rjmp	.+4      	; 0x60e8 <backlight_step+0x24>
    if(backlight_config.level > BACKLIGHT_LEVELS)
    {
        backlight_config.level = 0;
    60e4:	30 93 0e 02 	sts	0x020E, r19
    }
    backlight_config.enable = !!backlight_config.level;
    60e8:	80 91 0e 02 	lds	r24, 0x020E
    60ec:	8e 7f       	andi	r24, 0xFE	; 254
    60ee:	91 e0       	ldi	r25, 0x01	; 1
    60f0:	09 f4       	brne	.+2      	; 0x60f4 <backlight_step+0x30>
    60f2:	90 e0       	ldi	r25, 0x00	; 0
    60f4:	80 91 0e 02 	lds	r24, 0x020E
    60f8:	90 fb       	bst	r25, 0
    60fa:	80 f9       	bld	r24, 0
    60fc:	80 93 0e 02 	sts	0x020E, r24
    eeconfig_write_backlight(backlight_config.raw);
    6100:	0e 94 6f 24 	call	0x48de	; 0x48de <eeconfig_write_backlight>
    dprintf("backlight step: %u\n", backlight_config.level);
    6104:	80 91 bd 01 	lds	r24, 0x01BD
    6108:	80 ff       	sbrs	r24, 0
    610a:	0f c0       	rjmp	.+30     	; 0x612a <backlight_step+0x66>
    610c:	80 91 0e 02 	lds	r24, 0x020E
    6110:	86 95       	lsr	r24
    6112:	1f 92       	push	r1
    6114:	8f 93       	push	r24
    6116:	80 e6       	ldi	r24, 0x60	; 96
    6118:	90 e1       	ldi	r25, 0x10	; 16
    611a:	9f 93       	push	r25
    611c:	8f 93       	push	r24
    611e:	0e 94 4f 09 	call	0x129e	; 0x129e <__xprintf>
    6122:	0f 90       	pop	r0
    6124:	0f 90       	pop	r0
    6126:	0f 90       	pop	r0
    6128:	0f 90       	pop	r0
    backlight_set(backlight_config.level);
    612a:	80 91 0e 02 	lds	r24, 0x020E
    612e:	86 95       	lsr	r24
    6130:	0c 94 95 0a 	jmp	0x152a	; 0x152a <backlight_set>

00006134 <backlight_level>:
}

void backlight_level(uint8_t level)
{
    backlight_config.level = level;
    6134:	88 0f       	add	r24, r24
    6136:	90 91 0e 02 	lds	r25, 0x020E
    613a:	91 70       	andi	r25, 0x01	; 1
    613c:	98 2b       	or	r25, r24
    613e:	90 93 0e 02 	sts	0x020E, r25
    backlight_config.enable = !!backlight_config.level;
    6142:	9e 7f       	andi	r25, 0xFE	; 254
    6144:	21 e0       	ldi	r18, 0x01	; 1
    6146:	09 f4       	brne	.+2      	; 0x614a <backlight_level+0x16>
    6148:	20 e0       	ldi	r18, 0x00	; 0
    614a:	80 91 0e 02 	lds	r24, 0x020E
    614e:	20 fb       	bst	r18, 0
    6150:	80 f9       	bld	r24, 0
    6152:	80 93 0e 02 	sts	0x020E, r24
    eeconfig_write_backlight(backlight_config.raw);
    6156:	0e 94 6f 24 	call	0x48de	; 0x48de <eeconfig_write_backlight>
    backlight_set(backlight_config.level);
    615a:	80 91 0e 02 	lds	r24, 0x020E
    615e:	86 95       	lsr	r24
    6160:	0c 94 95 0a 	jmp	0x152a	; 0x152a <backlight_set>

00006164 <update_led_state>:
    }
}
#endif

void update_led_state(led_state_t state, uint8_t force)
{
    6164:	df 92       	push	r13
    6166:	ef 92       	push	r14
    6168:	ff 92       	push	r15
    616a:	0f 93       	push	r16
    616c:	1f 93       	push	r17
    616e:	cf 93       	push	r28
    6170:	df 93       	push	r29
    6172:	f8 2e       	mov	r15, r24
    6174:	e6 2e       	mov	r14, r22
    led_state_t diff = led_state_last ^ state;
    6176:	00 91 f5 01 	lds	r16, 0x01F5
    617a:	08 27       	eor	r16, r24
    if (force || diff) {
    617c:	61 11       	cpse	r22, r1
    617e:	01 c0       	rjmp	.+2      	; 0x6182 <update_led_state+0x1e>
    6180:	b1 f1       	breq	.+108    	; 0x61ee <update_led_state+0x8a>
    }
}
#endif

void update_led_state(led_state_t state, uint8_t force)
{
    6182:	c0 e0       	ldi	r28, 0x00	; 0
    6184:	d0 e0       	ldi	r29, 0x00	; 0
    if (force || diff) {
        for (uint8_t i = 0; i < LED_COUNT; i++) {
            if (softpwm_led_get_state() && (backlight_binding & LED_BIT(i))) {
                continue;
            }
            if (force || diff & LED_BIT(i)) {
    6186:	10 e0       	ldi	r17, 0x00	; 0
    6188:	dc 2e       	mov	r13, r28
void update_led_state(led_state_t state, uint8_t force)
{
    led_state_t diff = led_state_last ^ state;
    if (force || diff) {
        for (uint8_t i = 0; i < LED_COUNT; i++) {
            if (softpwm_led_get_state() && (backlight_binding & LED_BIT(i))) {
    618a:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <softpwm_led_get_state>
    618e:	88 23       	and	r24, r24
    6190:	59 f0       	breq	.+22     	; 0x61a8 <update_led_state+0x44>
    6192:	20 91 f1 01 	lds	r18, 0x01F1
    6196:	30 e0       	ldi	r19, 0x00	; 0
    6198:	0c 2e       	mov	r0, r28
    619a:	02 c0       	rjmp	.+4      	; 0x61a0 <update_led_state+0x3c>
    619c:	36 95       	lsr	r19
    619e:	27 95       	ror	r18
    61a0:	0a 94       	dec	r0
    61a2:	e2 f7       	brpl	.-8      	; 0x619c <update_led_state+0x38>
    61a4:	20 fd       	sbrc	r18, 0
    61a6:	1d c0       	rjmp	.+58     	; 0x61e2 <update_led_state+0x7e>
                continue;
            }
            if (force || diff & LED_BIT(i)) {
    61a8:	e1 10       	cpse	r14, r1
    61aa:	09 c0       	rjmp	.+18     	; 0x61be <update_led_state+0x5a>
    61ac:	98 01       	movw	r18, r16
    61ae:	0c 2e       	mov	r0, r28
    61b0:	02 c0       	rjmp	.+4      	; 0x61b6 <update_led_state+0x52>
    61b2:	36 95       	lsr	r19
    61b4:	27 95       	ror	r18
    61b6:	0a 94       	dec	r0
    61b8:	e2 f7       	brpl	.-8      	; 0x61b2 <update_led_state+0x4e>
    61ba:	20 ff       	sbrs	r18, 0
    61bc:	12 c0       	rjmp	.+36     	; 0x61e2 <update_led_state+0x7e>
                if ((state ^ reverse_binding) & LED_BIT(i)) {
    61be:	20 91 f0 01 	lds	r18, 0x01F0
    61c2:	2f 25       	eor	r18, r15
    61c4:	30 e0       	ldi	r19, 0x00	; 0
    61c6:	0c 2e       	mov	r0, r28
    61c8:	02 c0       	rjmp	.+4      	; 0x61ce <update_led_state+0x6a>
    61ca:	36 95       	lsr	r19
    61cc:	27 95       	ror	r18
    61ce:	0a 94       	dec	r0
    61d0:	e2 f7       	brpl	.-8      	; 0x61ca <update_led_state+0x66>
                    ledmap_led_on(i);
    61d2:	8d 2d       	mov	r24, r13
        for (uint8_t i = 0; i < LED_COUNT; i++) {
            if (softpwm_led_get_state() && (backlight_binding & LED_BIT(i))) {
                continue;
            }
            if (force || diff & LED_BIT(i)) {
                if ((state ^ reverse_binding) & LED_BIT(i)) {
    61d4:	20 ff       	sbrs	r18, 0
    61d6:	03 c0       	rjmp	.+6      	; 0x61de <update_led_state+0x7a>
                    ledmap_led_on(i);
    61d8:	0e 94 1b 0b 	call	0x1636	; 0x1636 <ledmap_led_on>
    61dc:	02 c0       	rjmp	.+4      	; 0x61e2 <update_led_state+0x7e>
                }
                else {
                    ledmap_led_off(i);
    61de:	0e 94 32 0b 	call	0x1664	; 0x1664 <ledmap_led_off>
    61e2:	21 96       	adiw	r28, 0x01	; 1

void update_led_state(led_state_t state, uint8_t force)
{
    led_state_t diff = led_state_last ^ state;
    if (force || diff) {
        for (uint8_t i = 0; i < LED_COUNT; i++) {
    61e4:	c5 30       	cpi	r28, 0x05	; 5
    61e6:	d1 05       	cpc	r29, r1
    61e8:	79 f6       	brne	.-98     	; 0x6188 <update_led_state+0x24>
                else {
                    ledmap_led_off(i);
                }
            }
        }
        led_state_last = state;
    61ea:	f0 92 f5 01 	sts	0x01F5, r15
    }
}
    61ee:	df 91       	pop	r29
    61f0:	cf 91       	pop	r28
    61f2:	1f 91       	pop	r17
    61f4:	0f 91       	pop	r16
    61f6:	ff 90       	pop	r15
    61f8:	ef 90       	pop	r14
    61fa:	df 90       	pop	r13
    61fc:	08 95       	ret

000061fe <ledmap_init>:
static led_binding_t reverse_binding = 0;

static void update_led_state(led_state_t state, uint8_t force);

void ledmap_init(void)
{
    61fe:	0f 93       	push	r16
    6200:	1f 93       	push	r17
    6202:	cf 93       	push	r28
    6204:	df 93       	push	r29
    6206:	c0 e0       	ldi	r28, 0x00	; 0
    6208:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t i = 0; i < LED_COUNT; i++) {
        ledmap_t ledmap = ledmap_get_code(i);
        if (ledmap.reverse) {
            LED_BIT_SET(reverse_binding, i);
    620a:	01 e0       	ldi	r16, 0x01	; 1
    620c:	10 e0       	ldi	r17, 0x00	; 0
static void update_led_state(led_state_t state, uint8_t force);

void ledmap_init(void)
{
    for (uint8_t i = 0; i < LED_COUNT; i++) {
        ledmap_t ledmap = ledmap_get_code(i);
    620e:	8c 2f       	mov	r24, r28
    6210:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <ledmap_in_eeprom_get_code>
        if (ledmap.reverse) {
    6214:	94 ff       	sbrs	r25, 4
    6216:	0b c0       	rjmp	.+22     	; 0x622e <ledmap_init+0x30>
            LED_BIT_SET(reverse_binding, i);
    6218:	80 91 f0 01 	lds	r24, 0x01F0
    621c:	98 01       	movw	r18, r16
    621e:	0c 2e       	mov	r0, r28
    6220:	01 c0       	rjmp	.+2      	; 0x6224 <ledmap_init+0x26>
    6222:	22 0f       	add	r18, r18
    6224:	0a 94       	dec	r0
    6226:	ea f7       	brpl	.-6      	; 0x6222 <ledmap_init+0x24>
    6228:	82 2b       	or	r24, r18
    622a:	80 93 f0 01 	sts	0x01F0, r24
        }
        if (ledmap.backlight) {
    622e:	95 ff       	sbrs	r25, 5
    6230:	0b c0       	rjmp	.+22     	; 0x6248 <ledmap_init+0x4a>
            LED_BIT_SET(backlight_binding, i);
    6232:	80 91 f1 01 	lds	r24, 0x01F1
    6236:	98 01       	movw	r18, r16
    6238:	0c 2e       	mov	r0, r28
    623a:	01 c0       	rjmp	.+2      	; 0x623e <ledmap_init+0x40>
    623c:	22 0f       	add	r18, r18
    623e:	0a 94       	dec	r0
    6240:	ea f7       	brpl	.-6      	; 0x623c <ledmap_init+0x3e>
    6242:	82 2b       	or	r24, r18
    6244:	80 93 f1 01 	sts	0x01F1, r24
        }
        switch (ledmap.binding) {
    6248:	9f 70       	andi	r25, 0x0F	; 15
    624a:	89 2f       	mov	r24, r25
    624c:	90 e0       	ldi	r25, 0x00	; 0
    624e:	82 30       	cpi	r24, 0x02	; 2
    6250:	91 05       	cpc	r25, r1
    6252:	89 f0       	breq	.+34     	; 0x6276 <ledmap_init+0x78>
    6254:	83 30       	cpi	r24, 0x03	; 3
    6256:	91 05       	cpc	r25, r1
    6258:	d1 f0       	breq	.+52     	; 0x628e <ledmap_init+0x90>
    625a:	81 30       	cpi	r24, 0x01	; 1
    625c:	91 05       	cpc	r25, r1
    625e:	11 f5       	brne	.+68     	; 0x62a4 <ledmap_init+0xa6>
            case LEDMAP_BINDING_DEFAULT_LAYER:
                LED_BIT_SET(default_layer_binding, i);
    6260:	0c 2e       	mov	r0, r28
    6262:	01 c0       	rjmp	.+2      	; 0x6266 <ledmap_init+0x68>
    6264:	88 0f       	add	r24, r24
    6266:	0a 94       	dec	r0
    6268:	ea f7       	brpl	.-6      	; 0x6264 <ledmap_init+0x66>
    626a:	90 91 f3 01 	lds	r25, 0x01F3
    626e:	98 2b       	or	r25, r24
    6270:	90 93 f3 01 	sts	0x01F3, r25
                break;
    6274:	17 c0       	rjmp	.+46     	; 0x62a4 <ledmap_init+0xa6>
            case LEDMAP_BINDING_LAYER:
                LED_BIT_SET(layer_binding, i);
    6276:	20 91 f2 01 	lds	r18, 0x01F2
    627a:	c8 01       	movw	r24, r16
    627c:	0c 2e       	mov	r0, r28
    627e:	01 c0       	rjmp	.+2      	; 0x6282 <ledmap_init+0x84>
    6280:	88 0f       	add	r24, r24
    6282:	0a 94       	dec	r0
    6284:	ea f7       	brpl	.-6      	; 0x6280 <ledmap_init+0x82>
    6286:	28 2b       	or	r18, r24
    6288:	20 93 f2 01 	sts	0x01F2, r18
                break;
    628c:	0b c0       	rjmp	.+22     	; 0x62a4 <ledmap_init+0xa6>
            case LEDMAP_BINDING_USB_LED:
                LED_BIT_SET(usb_led_binding, i);
    628e:	20 91 f4 01 	lds	r18, 0x01F4
    6292:	c8 01       	movw	r24, r16
    6294:	0c 2e       	mov	r0, r28
    6296:	01 c0       	rjmp	.+2      	; 0x629a <ledmap_init+0x9c>
    6298:	88 0f       	add	r24, r24
    629a:	0a 94       	dec	r0
    629c:	ea f7       	brpl	.-6      	; 0x6298 <ledmap_init+0x9a>
    629e:	28 2b       	or	r18, r24
    62a0:	20 93 f4 01 	sts	0x01F4, r18
    62a4:	21 96       	adiw	r28, 0x01	; 1

static void update_led_state(led_state_t state, uint8_t force);

void ledmap_init(void)
{
    for (uint8_t i = 0; i < LED_COUNT; i++) {
    62a6:	c5 30       	cpi	r28, 0x05	; 5
    62a8:	d1 05       	cpc	r29, r1
    62aa:	09 f0       	breq	.+2      	; 0x62ae <ledmap_init+0xb0>
    62ac:	b0 cf       	rjmp	.-160    	; 0x620e <ledmap_init+0x10>
            case LEDMAP_BINDING_USB_LED:
                LED_BIT_SET(usb_led_binding, i);
                break;
        }
    }
    ledmap_led_init();
    62ae:	0e 94 10 0b 	call	0x1620	; 0x1620 <ledmap_led_init>
    update_led_state(0, 1);
    62b2:	61 e0       	ldi	r22, 0x01	; 1
    62b4:	80 e0       	ldi	r24, 0x00	; 0
}
    62b6:	df 91       	pop	r29
    62b8:	cf 91       	pop	r28
    62ba:	1f 91       	pop	r17
    62bc:	0f 91       	pop	r16
                LED_BIT_SET(usb_led_binding, i);
                break;
        }
    }
    ledmap_led_init();
    update_led_state(0, 1);
    62be:	0c 94 b2 30 	jmp	0x6164	; 0x6164 <update_led_state>

000062c2 <led_set>:
}

void led_set(uint8_t usb_led)
{
    62c2:	cf 92       	push	r12
    62c4:	df 92       	push	r13
    62c6:	ef 92       	push	r14
    62c8:	ff 92       	push	r15
    62ca:	0f 93       	push	r16
    62cc:	1f 93       	push	r17
    62ce:	cf 93       	push	r28
    62d0:	df 93       	push	r29
    if (usb_led_binding) {
    62d2:	90 91 f4 01 	lds	r25, 0x01F4
    62d6:	99 23       	and	r25, r25
    62d8:	c9 f1       	breq	.+114    	; 0x634c <led_set+0x8a>
        led_state_t led_state = led_state_last;
    62da:	d0 90 f5 01 	lds	r13, 0x01F5
    62de:	c0 e0       	ldi	r28, 0x00	; 0
    62e0:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t i = 0; i < LED_COUNT; i++) {
            if (usb_led_binding & LED_BIT(i)) {
                uint8_t param = ledmap_get_code(i).param;
                (usb_led & (1 << param)) ? LED_BIT_SET(led_state, i) : LED_BIT_CLEAR(led_state, i);
    62e2:	e8 2e       	mov	r14, r24
    62e4:	f1 2c       	mov	r15, r1
    62e6:	01 e0       	ldi	r16, 0x01	; 1
    62e8:	10 e0       	ldi	r17, 0x00	; 0
void led_set(uint8_t usb_led)
{
    if (usb_led_binding) {
        led_state_t led_state = led_state_last;
        for (uint8_t i = 0; i < LED_COUNT; i++) {
            if (usb_led_binding & LED_BIT(i)) {
    62ea:	20 91 f4 01 	lds	r18, 0x01F4
    62ee:	30 e0       	ldi	r19, 0x00	; 0
    62f0:	8c 2f       	mov	r24, r28
    62f2:	0c 2e       	mov	r0, r28
    62f4:	02 c0       	rjmp	.+4      	; 0x62fa <led_set+0x38>
    62f6:	36 95       	lsr	r19
    62f8:	27 95       	ror	r18
    62fa:	0a 94       	dec	r0
    62fc:	e2 f7       	brpl	.-8      	; 0x62f6 <led_set+0x34>
    62fe:	20 ff       	sbrs	r18, 0
    6300:	15 c0       	rjmp	.+42     	; 0x632c <led_set+0x6a>
                uint8_t param = ledmap_get_code(i).param;
    6302:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <ledmap_in_eeprom_get_code>
                (usb_led & (1 << param)) ? LED_BIT_SET(led_state, i) : LED_BIT_CLEAR(led_state, i);
    6306:	97 01       	movw	r18, r14
    6308:	02 c0       	rjmp	.+4      	; 0x630e <led_set+0x4c>
    630a:	35 95       	asr	r19
    630c:	27 95       	ror	r18
    630e:	8a 95       	dec	r24
    6310:	e2 f7       	brpl	.-8      	; 0x630a <led_set+0x48>
    6312:	c9 01       	movw	r24, r18
    6314:	98 01       	movw	r18, r16
    6316:	0c 2e       	mov	r0, r28
    6318:	01 c0       	rjmp	.+2      	; 0x631c <led_set+0x5a>
    631a:	22 0f       	add	r18, r18
    631c:	0a 94       	dec	r0
    631e:	ea f7       	brpl	.-6      	; 0x631a <led_set+0x58>
    6320:	80 ff       	sbrs	r24, 0
    6322:	02 c0       	rjmp	.+4      	; 0x6328 <led_set+0x66>
    6324:	d2 2a       	or	r13, r18
    6326:	02 c0       	rjmp	.+4      	; 0x632c <led_set+0x6a>
    6328:	20 95       	com	r18
    632a:	d2 22       	and	r13, r18
    632c:	21 96       	adiw	r28, 0x01	; 1

void led_set(uint8_t usb_led)
{
    if (usb_led_binding) {
        led_state_t led_state = led_state_last;
        for (uint8_t i = 0; i < LED_COUNT; i++) {
    632e:	c5 30       	cpi	r28, 0x05	; 5
    6330:	d1 05       	cpc	r29, r1
    6332:	d9 f6       	brne	.-74     	; 0x62ea <led_set+0x28>
            if (usb_led_binding & LED_BIT(i)) {
                uint8_t param = ledmap_get_code(i).param;
                (usb_led & (1 << param)) ? LED_BIT_SET(led_state, i) : LED_BIT_CLEAR(led_state, i);
            }
        }
        update_led_state(led_state, 0);
    6334:	60 e0       	ldi	r22, 0x00	; 0
    6336:	8d 2d       	mov	r24, r13
    }
}
    6338:	df 91       	pop	r29
    633a:	cf 91       	pop	r28
    633c:	1f 91       	pop	r17
    633e:	0f 91       	pop	r16
    6340:	ff 90       	pop	r15
    6342:	ef 90       	pop	r14
    6344:	df 90       	pop	r13
    6346:	cf 90       	pop	r12
            if (usb_led_binding & LED_BIT(i)) {
                uint8_t param = ledmap_get_code(i).param;
                (usb_led & (1 << param)) ? LED_BIT_SET(led_state, i) : LED_BIT_CLEAR(led_state, i);
            }
        }
        update_led_state(led_state, 0);
    6348:	0c 94 b2 30 	jmp	0x6164	; 0x6164 <update_led_state>
    }
}
    634c:	df 91       	pop	r29
    634e:	cf 91       	pop	r28
    6350:	1f 91       	pop	r17
    6352:	0f 91       	pop	r16
    6354:	ff 90       	pop	r15
    6356:	ef 90       	pop	r14
    6358:	df 90       	pop	r13
    635a:	cf 90       	pop	r12
    635c:	08 95       	ret

0000635e <default_layer_state_change>:

#ifndef NO_ACTION_LAYER
void default_layer_state_change(uint32_t state)
{
    635e:	af 92       	push	r10
    6360:	bf 92       	push	r11
    6362:	cf 92       	push	r12
    6364:	df 92       	push	r13
    6366:	ef 92       	push	r14
    6368:	ff 92       	push	r15
    636a:	0f 93       	push	r16
    636c:	1f 93       	push	r17
    636e:	cf 93       	push	r28
    6370:	df 93       	push	r29
    6372:	6b 01       	movw	r12, r22
    6374:	7c 01       	movw	r14, r24
    if (default_layer_binding) {
    6376:	80 91 f3 01 	lds	r24, 0x01F3
    637a:	88 23       	and	r24, r24
    637c:	e9 f1       	breq	.+122    	; 0x63f8 <default_layer_state_change+0x9a>
        led_state_t led_state = led_state_last;
    637e:	b0 90 f5 01 	lds	r11, 0x01F5
    6382:	c0 e0       	ldi	r28, 0x00	; 0
    6384:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t i = 0; i < LED_COUNT; i++) {
            if (default_layer_binding & LED_BIT(i)) {
                uint8_t param = ledmap_get_code(i).param;
                (state & (1UL << param)) ? LED_BIT_SET(led_state, i) : LED_BIT_CLEAR(led_state, i);
    6386:	01 e0       	ldi	r16, 0x01	; 1
    6388:	10 e0       	ldi	r17, 0x00	; 0
void default_layer_state_change(uint32_t state)
{
    if (default_layer_binding) {
        led_state_t led_state = led_state_last;
        for (uint8_t i = 0; i < LED_COUNT; i++) {
            if (default_layer_binding & LED_BIT(i)) {
    638a:	20 91 f3 01 	lds	r18, 0x01F3
    638e:	30 e0       	ldi	r19, 0x00	; 0
    6390:	0c 2e       	mov	r0, r28
    6392:	02 c0       	rjmp	.+4      	; 0x6398 <default_layer_state_change+0x3a>
    6394:	36 95       	lsr	r19
    6396:	27 95       	ror	r18
    6398:	0a 94       	dec	r0
    639a:	e2 f7       	brpl	.-8      	; 0x6394 <default_layer_state_change+0x36>
    639c:	20 ff       	sbrs	r18, 0
    639e:	1a c0       	rjmp	.+52     	; 0x63d4 <default_layer_state_change+0x76>
                uint8_t param = ledmap_get_code(i).param;
    63a0:	8c 2f       	mov	r24, r28
    63a2:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <ledmap_in_eeprom_get_code>
                (state & (1UL << param)) ? LED_BIT_SET(led_state, i) : LED_BIT_CLEAR(led_state, i);
    63a6:	a7 01       	movw	r20, r14
    63a8:	96 01       	movw	r18, r12
    63aa:	04 c0       	rjmp	.+8      	; 0x63b4 <default_layer_state_change+0x56>
    63ac:	56 95       	lsr	r21
    63ae:	47 95       	ror	r20
    63b0:	37 95       	ror	r19
    63b2:	27 95       	ror	r18
    63b4:	8a 95       	dec	r24
    63b6:	d2 f7       	brpl	.-12     	; 0x63ac <default_layer_state_change+0x4e>
    63b8:	da 01       	movw	r26, r20
    63ba:	c9 01       	movw	r24, r18
    63bc:	98 01       	movw	r18, r16
    63be:	0c 2e       	mov	r0, r28
    63c0:	01 c0       	rjmp	.+2      	; 0x63c4 <default_layer_state_change+0x66>
    63c2:	22 0f       	add	r18, r18
    63c4:	0a 94       	dec	r0
    63c6:	ea f7       	brpl	.-6      	; 0x63c2 <default_layer_state_change+0x64>
    63c8:	80 ff       	sbrs	r24, 0
    63ca:	02 c0       	rjmp	.+4      	; 0x63d0 <default_layer_state_change+0x72>
    63cc:	b2 2a       	or	r11, r18
    63ce:	02 c0       	rjmp	.+4      	; 0x63d4 <default_layer_state_change+0x76>
    63d0:	20 95       	com	r18
    63d2:	b2 22       	and	r11, r18
    63d4:	21 96       	adiw	r28, 0x01	; 1
#ifndef NO_ACTION_LAYER
void default_layer_state_change(uint32_t state)
{
    if (default_layer_binding) {
        led_state_t led_state = led_state_last;
        for (uint8_t i = 0; i < LED_COUNT; i++) {
    63d6:	c5 30       	cpi	r28, 0x05	; 5
    63d8:	d1 05       	cpc	r29, r1
    63da:	b9 f6       	brne	.-82     	; 0x638a <default_layer_state_change+0x2c>
            if (default_layer_binding & LED_BIT(i)) {
                uint8_t param = ledmap_get_code(i).param;
                (state & (1UL << param)) ? LED_BIT_SET(led_state, i) : LED_BIT_CLEAR(led_state, i);
            }
        }
        update_led_state(led_state, 0);
    63dc:	60 e0       	ldi	r22, 0x00	; 0
    63de:	8b 2d       	mov	r24, r11
    }
}
    63e0:	df 91       	pop	r29
    63e2:	cf 91       	pop	r28
    63e4:	1f 91       	pop	r17
    63e6:	0f 91       	pop	r16
    63e8:	ff 90       	pop	r15
    63ea:	ef 90       	pop	r14
    63ec:	df 90       	pop	r13
    63ee:	cf 90       	pop	r12
    63f0:	bf 90       	pop	r11
    63f2:	af 90       	pop	r10
            if (default_layer_binding & LED_BIT(i)) {
                uint8_t param = ledmap_get_code(i).param;
                (state & (1UL << param)) ? LED_BIT_SET(led_state, i) : LED_BIT_CLEAR(led_state, i);
            }
        }
        update_led_state(led_state, 0);
    63f4:	0c 94 b2 30 	jmp	0x6164	; 0x6164 <update_led_state>
    }
}
    63f8:	df 91       	pop	r29
    63fa:	cf 91       	pop	r28
    63fc:	1f 91       	pop	r17
    63fe:	0f 91       	pop	r16
    6400:	ff 90       	pop	r15
    6402:	ef 90       	pop	r14
    6404:	df 90       	pop	r13
    6406:	cf 90       	pop	r12
    6408:	bf 90       	pop	r11
    640a:	af 90       	pop	r10
    640c:	08 95       	ret

0000640e <layer_state_change>:

void layer_state_change(uint32_t state)
{
    640e:	af 92       	push	r10
    6410:	bf 92       	push	r11
    6412:	cf 92       	push	r12
    6414:	df 92       	push	r13
    6416:	ef 92       	push	r14
    6418:	ff 92       	push	r15
    641a:	0f 93       	push	r16
    641c:	1f 93       	push	r17
    641e:	cf 93       	push	r28
    6420:	df 93       	push	r29
    6422:	6b 01       	movw	r12, r22
    6424:	7c 01       	movw	r14, r24
    if (layer_binding) {
    6426:	80 91 f2 01 	lds	r24, 0x01F2
    642a:	88 23       	and	r24, r24
    642c:	e9 f1       	breq	.+122    	; 0x64a8 <layer_state_change+0x9a>
        led_state_t led_state = led_state_last;
    642e:	b0 90 f5 01 	lds	r11, 0x01F5
    6432:	c0 e0       	ldi	r28, 0x00	; 0
    6434:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t i = 0; i < LED_COUNT; i++) {
            if (layer_binding & LED_BIT(i)) {
                uint8_t param = ledmap_get_code(i).param;
                (state & (1UL << param)) ? LED_BIT_SET(led_state, i) : LED_BIT_CLEAR(led_state, i);
    6436:	01 e0       	ldi	r16, 0x01	; 1
    6438:	10 e0       	ldi	r17, 0x00	; 0
void layer_state_change(uint32_t state)
{
    if (layer_binding) {
        led_state_t led_state = led_state_last;
        for (uint8_t i = 0; i < LED_COUNT; i++) {
            if (layer_binding & LED_BIT(i)) {
    643a:	20 91 f2 01 	lds	r18, 0x01F2
    643e:	30 e0       	ldi	r19, 0x00	; 0
    6440:	0c 2e       	mov	r0, r28
    6442:	02 c0       	rjmp	.+4      	; 0x6448 <layer_state_change+0x3a>
    6444:	36 95       	lsr	r19
    6446:	27 95       	ror	r18
    6448:	0a 94       	dec	r0
    644a:	e2 f7       	brpl	.-8      	; 0x6444 <layer_state_change+0x36>
    644c:	20 ff       	sbrs	r18, 0
    644e:	1a c0       	rjmp	.+52     	; 0x6484 <layer_state_change+0x76>
                uint8_t param = ledmap_get_code(i).param;
    6450:	8c 2f       	mov	r24, r28
    6452:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <ledmap_in_eeprom_get_code>
                (state & (1UL << param)) ? LED_BIT_SET(led_state, i) : LED_BIT_CLEAR(led_state, i);
    6456:	a7 01       	movw	r20, r14
    6458:	96 01       	movw	r18, r12
    645a:	04 c0       	rjmp	.+8      	; 0x6464 <layer_state_change+0x56>
    645c:	56 95       	lsr	r21
    645e:	47 95       	ror	r20
    6460:	37 95       	ror	r19
    6462:	27 95       	ror	r18
    6464:	8a 95       	dec	r24
    6466:	d2 f7       	brpl	.-12     	; 0x645c <layer_state_change+0x4e>
    6468:	da 01       	movw	r26, r20
    646a:	c9 01       	movw	r24, r18
    646c:	98 01       	movw	r18, r16
    646e:	0c 2e       	mov	r0, r28
    6470:	01 c0       	rjmp	.+2      	; 0x6474 <layer_state_change+0x66>
    6472:	22 0f       	add	r18, r18
    6474:	0a 94       	dec	r0
    6476:	ea f7       	brpl	.-6      	; 0x6472 <layer_state_change+0x64>
    6478:	80 ff       	sbrs	r24, 0
    647a:	02 c0       	rjmp	.+4      	; 0x6480 <layer_state_change+0x72>
    647c:	b2 2a       	or	r11, r18
    647e:	02 c0       	rjmp	.+4      	; 0x6484 <layer_state_change+0x76>
    6480:	20 95       	com	r18
    6482:	b2 22       	and	r11, r18
    6484:	21 96       	adiw	r28, 0x01	; 1

void layer_state_change(uint32_t state)
{
    if (layer_binding) {
        led_state_t led_state = led_state_last;
        for (uint8_t i = 0; i < LED_COUNT; i++) {
    6486:	c5 30       	cpi	r28, 0x05	; 5
    6488:	d1 05       	cpc	r29, r1
    648a:	b9 f6       	brne	.-82     	; 0x643a <layer_state_change+0x2c>
            if (layer_binding & LED_BIT(i)) {
                uint8_t param = ledmap_get_code(i).param;
                (state & (1UL << param)) ? LED_BIT_SET(led_state, i) : LED_BIT_CLEAR(led_state, i);
            }
        }
        update_led_state(led_state, 0);
    648c:	60 e0       	ldi	r22, 0x00	; 0
    648e:	8b 2d       	mov	r24, r11
    }
}
    6490:	df 91       	pop	r29
    6492:	cf 91       	pop	r28
    6494:	1f 91       	pop	r17
    6496:	0f 91       	pop	r16
    6498:	ff 90       	pop	r15
    649a:	ef 90       	pop	r14
    649c:	df 90       	pop	r13
    649e:	cf 90       	pop	r12
    64a0:	bf 90       	pop	r11
    64a2:	af 90       	pop	r10
            if (layer_binding & LED_BIT(i)) {
                uint8_t param = ledmap_get_code(i).param;
                (state & (1UL << param)) ? LED_BIT_SET(led_state, i) : LED_BIT_CLEAR(led_state, i);
            }
        }
        update_led_state(led_state, 0);
    64a4:	0c 94 b2 30 	jmp	0x6164	; 0x6164 <update_led_state>
    }
}
    64a8:	df 91       	pop	r29
    64aa:	cf 91       	pop	r28
    64ac:	1f 91       	pop	r17
    64ae:	0f 91       	pop	r16
    64b0:	ff 90       	pop	r15
    64b2:	ef 90       	pop	r14
    64b4:	df 90       	pop	r13
    64b6:	cf 90       	pop	r12
    64b8:	bf 90       	pop	r11
    64ba:	af 90       	pop	r10
    64bc:	08 95       	ret

000064be <softpwm_led_init>:
#endif

#ifdef SOFTPWM_LED_ENABLE
void softpwm_led_init(void)
{
    64be:	08 95       	ret

000064c0 <softpwm_led_on>:
}

void softpwm_led_on(uint8_t index)
{
    if (backlight_binding & LED_BIT(index)) {
    64c0:	20 91 f1 01 	lds	r18, 0x01F1
    64c4:	30 e0       	ldi	r19, 0x00	; 0
    64c6:	08 2e       	mov	r0, r24
    64c8:	02 c0       	rjmp	.+4      	; 0x64ce <softpwm_led_on+0xe>
    64ca:	36 95       	lsr	r19
    64cc:	27 95       	ror	r18
    64ce:	0a 94       	dec	r0
    64d0:	e2 f7       	brpl	.-8      	; 0x64ca <softpwm_led_on+0xa>
    64d2:	20 fd       	sbrc	r18, 0
        ledmap_led_on(index);
    64d4:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <ledmap_led_on>
    64d8:	08 95       	ret

000064da <softpwm_led_off>:
    }
}

void softpwm_led_off(uint8_t index)
{
    if (backlight_binding & LED_BIT(index)) {
    64da:	20 91 f1 01 	lds	r18, 0x01F1
    64de:	30 e0       	ldi	r19, 0x00	; 0
    64e0:	08 2e       	mov	r0, r24
    64e2:	02 c0       	rjmp	.+4      	; 0x64e8 <softpwm_led_off+0xe>
    64e4:	36 95       	lsr	r19
    64e6:	27 95       	ror	r18
    64e8:	0a 94       	dec	r0
    64ea:	e2 f7       	brpl	.-8      	; 0x64e4 <softpwm_led_off+0xa>
    64ec:	20 fd       	sbrc	r18, 0
        ledmap_led_off(index);
    64ee:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <ledmap_led_off>
    64f2:	08 95       	ret

000064f4 <softpwm_led_state_change>:
    }
}

void softpwm_led_state_change(uint8_t state)
{
    if (state) {
    64f4:	81 11       	cpse	r24, r1
    64f6:	05 c0       	rjmp	.+10     	; 0x6502 <softpwm_led_state_change+0xe>
    }
    else {
        update_led_state(led_state_last, 1);
    64f8:	61 e0       	ldi	r22, 0x01	; 1
    64fa:	80 91 f5 01 	lds	r24, 0x01F5
    64fe:	0c 94 b2 30 	jmp	0x6164	; 0x6164 <update_led_state>
    6502:	08 95       	ret

00006504 <ledmap_in_eeprom_init>:
#undef ledmap_get_code

static ledmap_t ledmap[LED_COUNT];

void ledmap_in_eeprom_init(void)
{
    6504:	cf 92       	push	r12
    6506:	df 92       	push	r13
    6508:	ef 92       	push	r14
    650a:	ff 92       	push	r15
    650c:	0f 93       	push	r16
    650e:	1f 93       	push	r17
    6510:	cf 93       	push	r28
    6512:	df 93       	push	r29
    6514:	06 ef       	ldi	r16, 0xF6	; 246
    6516:	11 e0       	ldi	r17, 0x01	; 1
    6518:	97 e0       	ldi	r25, 0x07	; 7
    651a:	e9 2e       	mov	r14, r25
    651c:	f1 2c       	mov	r15, r1
    651e:	c0 e0       	ldi	r28, 0x00	; 0
    6520:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t i = 0; i < LED_COUNT; i++) {
        ledmap[i].code = eeprom_read_word(EECONFIG_LEDMAP + i);
    6522:	c7 01       	movw	r24, r14
    6524:	0e 94 34 34 	call	0x6868	; 0x6868 <__eerd_word_m32u4>
    6528:	f8 01       	movw	r30, r16
    652a:	91 83       	std	Z+1, r25	; 0x01
    652c:	80 83       	st	Z, r24
        /* ledmap[i].code = LEDMAP_UNCONFIGURED; */
        if (ledmap[i].code == LEDMAP_UNCONFIGURED) {
    652e:	01 96       	adiw	r24, 0x01	; 1
    6530:	99 f4       	brne	.+38     	; 0x6558 <ledmap_in_eeprom_init+0x54>
            ledmap[i] = ledmap_get_code(i);
    6532:	6e 01       	movw	r12, r28
    6534:	cc 0c       	add	r12, r12
    6536:	dd 1c       	adc	r13, r13
    6538:	c6 01       	movw	r24, r12
    653a:	8a 50       	subi	r24, 0x0A	; 10
    653c:	9e 4f       	sbci	r25, 0xFE	; 254
    653e:	6c 01       	movw	r12, r24
    6540:	8c 2f       	mov	r24, r28
    6542:	0e 94 07 0b 	call	0x160e	; 0x160e <ledmap_get_code>
    6546:	f6 01       	movw	r30, r12
    6548:	91 83       	std	Z+1, r25	; 0x01
    654a:	80 83       	st	Z, r24
            eeprom_write_word(EECONFIG_LEDMAP + i, ledmap[i].code);
    654c:	f8 01       	movw	r30, r16
    654e:	60 81       	ld	r22, Z
    6550:	71 81       	ldd	r23, Z+1	; 0x01
    6552:	c7 01       	movw	r24, r14
    6554:	0e 94 48 34 	call	0x6890	; 0x6890 <__eewr_word_m32u4>
    6558:	21 96       	adiw	r28, 0x01	; 1
    655a:	f2 e0       	ldi	r31, 0x02	; 2
    655c:	ef 0e       	add	r14, r31
    655e:	f1 1c       	adc	r15, r1
    6560:	0e 5f       	subi	r16, 0xFE	; 254
    6562:	1f 4f       	sbci	r17, 0xFF	; 255

static ledmap_t ledmap[LED_COUNT];

void ledmap_in_eeprom_init(void)
{
    for (uint8_t i = 0; i < LED_COUNT; i++) {
    6564:	c5 30       	cpi	r28, 0x05	; 5
    6566:	d1 05       	cpc	r29, r1
    6568:	e1 f6       	brne	.-72     	; 0x6522 <ledmap_in_eeprom_init+0x1e>
        if (ledmap[i].code == LEDMAP_UNCONFIGURED) {
            ledmap[i] = ledmap_get_code(i);
            eeprom_write_word(EECONFIG_LEDMAP + i, ledmap[i].code);
        }
    }
}
    656a:	df 91       	pop	r29
    656c:	cf 91       	pop	r28
    656e:	1f 91       	pop	r17
    6570:	0f 91       	pop	r16
    6572:	ff 90       	pop	r15
    6574:	ef 90       	pop	r14
    6576:	df 90       	pop	r13
    6578:	cf 90       	pop	r12
    657a:	08 95       	ret

0000657c <write_ledmap_to_eeprom>:

void write_ledmap_to_eeprom(void)
{
    657c:	1f 93       	push	r17
    657e:	cf 93       	push	r28
    6580:	df 93       	push	r29
    6582:	c7 e0       	ldi	r28, 0x07	; 7
    6584:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t i = 0; i < LED_COUNT; i++) {
    6586:	10 e0       	ldi	r17, 0x00	; 0
        eeprom_write_word(EECONFIG_LEDMAP + i, ledmap_get_code(i).code);
    6588:	81 2f       	mov	r24, r17
    658a:	0e 94 07 0b 	call	0x160e	; 0x160e <ledmap_get_code>
    658e:	bc 01       	movw	r22, r24
    6590:	ce 01       	movw	r24, r28
    6592:	0e 94 48 34 	call	0x6890	; 0x6890 <__eewr_word_m32u4>
    }
}

void write_ledmap_to_eeprom(void)
{
    for (uint8_t i = 0; i < LED_COUNT; i++) {
    6596:	1f 5f       	subi	r17, 0xFF	; 255
    6598:	22 96       	adiw	r28, 0x02	; 2
    659a:	15 30       	cpi	r17, 0x05	; 5
    659c:	a9 f7       	brne	.-22     	; 0x6588 <write_ledmap_to_eeprom+0xc>
        eeprom_write_word(EECONFIG_LEDMAP + i, ledmap_get_code(i).code);
    }
}
    659e:	df 91       	pop	r29
    65a0:	cf 91       	pop	r28
    65a2:	1f 91       	pop	r17
    65a4:	08 95       	ret

000065a6 <ledmap_in_eeprom_get_code>:

ledmap_t ledmap_in_eeprom_get_code(uint8_t i)
{
    return ledmap[i];
    65a6:	e8 2f       	mov	r30, r24
    65a8:	f0 e0       	ldi	r31, 0x00	; 0
    65aa:	ee 0f       	add	r30, r30
    65ac:	ff 1f       	adc	r31, r31
    65ae:	ea 50       	subi	r30, 0x0A	; 10
    65b0:	fe 4f       	sbci	r31, 0xFE	; 254
}
    65b2:	80 81       	ld	r24, Z
    65b4:	91 81       	ldd	r25, Z+1	; 0x01
    65b6:	08 95       	ret

000065b8 <__fixsfsi>:
    65b8:	04 d0       	rcall	.+8      	; 0x65c2 <__fixunssfsi>
    65ba:	68 94       	set
    65bc:	b1 11       	cpse	r27, r1
    65be:	8d c0       	rjmp	.+282    	; 0x66da <__fp_szero>
    65c0:	08 95       	ret

000065c2 <__fixunssfsi>:
    65c2:	70 d0       	rcall	.+224    	; 0x66a4 <__fp_splitA>
    65c4:	88 f0       	brcs	.+34     	; 0x65e8 <__fixunssfsi+0x26>
    65c6:	9f 57       	subi	r25, 0x7F	; 127
    65c8:	90 f0       	brcs	.+36     	; 0x65ee <__fixunssfsi+0x2c>
    65ca:	b9 2f       	mov	r27, r25
    65cc:	99 27       	eor	r25, r25
    65ce:	b7 51       	subi	r27, 0x17	; 23
    65d0:	a0 f0       	brcs	.+40     	; 0x65fa <__fixunssfsi+0x38>
    65d2:	d1 f0       	breq	.+52     	; 0x6608 <__fixunssfsi+0x46>
    65d4:	66 0f       	add	r22, r22
    65d6:	77 1f       	adc	r23, r23
    65d8:	88 1f       	adc	r24, r24
    65da:	99 1f       	adc	r25, r25
    65dc:	1a f0       	brmi	.+6      	; 0x65e4 <__fixunssfsi+0x22>
    65de:	ba 95       	dec	r27
    65e0:	c9 f7       	brne	.-14     	; 0x65d4 <__fixunssfsi+0x12>
    65e2:	12 c0       	rjmp	.+36     	; 0x6608 <__fixunssfsi+0x46>
    65e4:	b1 30       	cpi	r27, 0x01	; 1
    65e6:	81 f0       	breq	.+32     	; 0x6608 <__fixunssfsi+0x46>
    65e8:	77 d0       	rcall	.+238    	; 0x66d8 <__fp_zero>
    65ea:	b1 e0       	ldi	r27, 0x01	; 1
    65ec:	08 95       	ret
    65ee:	74 c0       	rjmp	.+232    	; 0x66d8 <__fp_zero>
    65f0:	67 2f       	mov	r22, r23
    65f2:	78 2f       	mov	r23, r24
    65f4:	88 27       	eor	r24, r24
    65f6:	b8 5f       	subi	r27, 0xF8	; 248
    65f8:	39 f0       	breq	.+14     	; 0x6608 <__fixunssfsi+0x46>
    65fa:	b9 3f       	cpi	r27, 0xF9	; 249
    65fc:	cc f3       	brlt	.-14     	; 0x65f0 <__fixunssfsi+0x2e>
    65fe:	86 95       	lsr	r24
    6600:	77 95       	ror	r23
    6602:	67 95       	ror	r22
    6604:	b3 95       	inc	r27
    6606:	d9 f7       	brne	.-10     	; 0x65fe <__fixunssfsi+0x3c>
    6608:	3e f4       	brtc	.+14     	; 0x6618 <__fixunssfsi+0x56>
    660a:	90 95       	com	r25
    660c:	80 95       	com	r24
    660e:	70 95       	com	r23
    6610:	61 95       	neg	r22
    6612:	7f 4f       	sbci	r23, 0xFF	; 255
    6614:	8f 4f       	sbci	r24, 0xFF	; 255
    6616:	9f 4f       	sbci	r25, 0xFF	; 255
    6618:	08 95       	ret

0000661a <__floatunsisf>:
    661a:	e8 94       	clt
    661c:	09 c0       	rjmp	.+18     	; 0x6630 <__floatsisf+0x12>

0000661e <__floatsisf>:
    661e:	97 fb       	bst	r25, 7
    6620:	3e f4       	brtc	.+14     	; 0x6630 <__floatsisf+0x12>
    6622:	90 95       	com	r25
    6624:	80 95       	com	r24
    6626:	70 95       	com	r23
    6628:	61 95       	neg	r22
    662a:	7f 4f       	sbci	r23, 0xFF	; 255
    662c:	8f 4f       	sbci	r24, 0xFF	; 255
    662e:	9f 4f       	sbci	r25, 0xFF	; 255
    6630:	99 23       	and	r25, r25
    6632:	a9 f0       	breq	.+42     	; 0x665e <__floatsisf+0x40>
    6634:	f9 2f       	mov	r31, r25
    6636:	96 e9       	ldi	r25, 0x96	; 150
    6638:	bb 27       	eor	r27, r27
    663a:	93 95       	inc	r25
    663c:	f6 95       	lsr	r31
    663e:	87 95       	ror	r24
    6640:	77 95       	ror	r23
    6642:	67 95       	ror	r22
    6644:	b7 95       	ror	r27
    6646:	f1 11       	cpse	r31, r1
    6648:	f8 cf       	rjmp	.-16     	; 0x663a <__floatsisf+0x1c>
    664a:	fa f4       	brpl	.+62     	; 0x668a <__floatsisf+0x6c>
    664c:	bb 0f       	add	r27, r27
    664e:	11 f4       	brne	.+4      	; 0x6654 <__floatsisf+0x36>
    6650:	60 ff       	sbrs	r22, 0
    6652:	1b c0       	rjmp	.+54     	; 0x668a <__floatsisf+0x6c>
    6654:	6f 5f       	subi	r22, 0xFF	; 255
    6656:	7f 4f       	sbci	r23, 0xFF	; 255
    6658:	8f 4f       	sbci	r24, 0xFF	; 255
    665a:	9f 4f       	sbci	r25, 0xFF	; 255
    665c:	16 c0       	rjmp	.+44     	; 0x668a <__floatsisf+0x6c>
    665e:	88 23       	and	r24, r24
    6660:	11 f0       	breq	.+4      	; 0x6666 <__floatsisf+0x48>
    6662:	96 e9       	ldi	r25, 0x96	; 150
    6664:	11 c0       	rjmp	.+34     	; 0x6688 <__floatsisf+0x6a>
    6666:	77 23       	and	r23, r23
    6668:	21 f0       	breq	.+8      	; 0x6672 <__floatsisf+0x54>
    666a:	9e e8       	ldi	r25, 0x8E	; 142
    666c:	87 2f       	mov	r24, r23
    666e:	76 2f       	mov	r23, r22
    6670:	05 c0       	rjmp	.+10     	; 0x667c <__floatsisf+0x5e>
    6672:	66 23       	and	r22, r22
    6674:	71 f0       	breq	.+28     	; 0x6692 <__floatsisf+0x74>
    6676:	96 e8       	ldi	r25, 0x86	; 134
    6678:	86 2f       	mov	r24, r22
    667a:	70 e0       	ldi	r23, 0x00	; 0
    667c:	60 e0       	ldi	r22, 0x00	; 0
    667e:	2a f0       	brmi	.+10     	; 0x668a <__floatsisf+0x6c>
    6680:	9a 95       	dec	r25
    6682:	66 0f       	add	r22, r22
    6684:	77 1f       	adc	r23, r23
    6686:	88 1f       	adc	r24, r24
    6688:	da f7       	brpl	.-10     	; 0x6680 <__floatsisf+0x62>
    668a:	88 0f       	add	r24, r24
    668c:	96 95       	lsr	r25
    668e:	87 95       	ror	r24
    6690:	97 f9       	bld	r25, 7
    6692:	08 95       	ret

00006694 <__fp_split3>:
    6694:	57 fd       	sbrc	r21, 7
    6696:	90 58       	subi	r25, 0x80	; 128
    6698:	44 0f       	add	r20, r20
    669a:	55 1f       	adc	r21, r21
    669c:	59 f0       	breq	.+22     	; 0x66b4 <__fp_splitA+0x10>
    669e:	5f 3f       	cpi	r21, 0xFF	; 255
    66a0:	71 f0       	breq	.+28     	; 0x66be <__fp_splitA+0x1a>
    66a2:	47 95       	ror	r20

000066a4 <__fp_splitA>:
    66a4:	88 0f       	add	r24, r24
    66a6:	97 fb       	bst	r25, 7
    66a8:	99 1f       	adc	r25, r25
    66aa:	61 f0       	breq	.+24     	; 0x66c4 <__fp_splitA+0x20>
    66ac:	9f 3f       	cpi	r25, 0xFF	; 255
    66ae:	79 f0       	breq	.+30     	; 0x66ce <__fp_splitA+0x2a>
    66b0:	87 95       	ror	r24
    66b2:	08 95       	ret
    66b4:	12 16       	cp	r1, r18
    66b6:	13 06       	cpc	r1, r19
    66b8:	14 06       	cpc	r1, r20
    66ba:	55 1f       	adc	r21, r21
    66bc:	f2 cf       	rjmp	.-28     	; 0x66a2 <__fp_split3+0xe>
    66be:	46 95       	lsr	r20
    66c0:	f1 df       	rcall	.-30     	; 0x66a4 <__fp_splitA>
    66c2:	08 c0       	rjmp	.+16     	; 0x66d4 <__fp_splitA+0x30>
    66c4:	16 16       	cp	r1, r22
    66c6:	17 06       	cpc	r1, r23
    66c8:	18 06       	cpc	r1, r24
    66ca:	99 1f       	adc	r25, r25
    66cc:	f1 cf       	rjmp	.-30     	; 0x66b0 <__fp_splitA+0xc>
    66ce:	86 95       	lsr	r24
    66d0:	71 05       	cpc	r23, r1
    66d2:	61 05       	cpc	r22, r1
    66d4:	08 94       	sec
    66d6:	08 95       	ret

000066d8 <__fp_zero>:
    66d8:	e8 94       	clt

000066da <__fp_szero>:
    66da:	bb 27       	eor	r27, r27
    66dc:	66 27       	eor	r22, r22
    66de:	77 27       	eor	r23, r23
    66e0:	cb 01       	movw	r24, r22
    66e2:	97 f9       	bld	r25, 7
    66e4:	08 95       	ret

000066e6 <__mulsf3>:
    66e6:	0b d0       	rcall	.+22     	; 0x66fe <__mulsf3x>
    66e8:	78 c0       	rjmp	.+240    	; 0x67da <__fp_round>
    66ea:	69 d0       	rcall	.+210    	; 0x67be <__fp_pscA>
    66ec:	28 f0       	brcs	.+10     	; 0x66f8 <__mulsf3+0x12>
    66ee:	6e d0       	rcall	.+220    	; 0x67cc <__fp_pscB>
    66f0:	18 f0       	brcs	.+6      	; 0x66f8 <__mulsf3+0x12>
    66f2:	95 23       	and	r25, r21
    66f4:	09 f0       	breq	.+2      	; 0x66f8 <__mulsf3+0x12>
    66f6:	5a c0       	rjmp	.+180    	; 0x67ac <__fp_inf>
    66f8:	5f c0       	rjmp	.+190    	; 0x67b8 <__fp_nan>
    66fa:	11 24       	eor	r1, r1
    66fc:	ee cf       	rjmp	.-36     	; 0x66da <__fp_szero>

000066fe <__mulsf3x>:
    66fe:	ca df       	rcall	.-108    	; 0x6694 <__fp_split3>
    6700:	a0 f3       	brcs	.-24     	; 0x66ea <__mulsf3+0x4>

00006702 <__mulsf3_pse>:
    6702:	95 9f       	mul	r25, r21
    6704:	d1 f3       	breq	.-12     	; 0x66fa <__mulsf3+0x14>
    6706:	95 0f       	add	r25, r21
    6708:	50 e0       	ldi	r21, 0x00	; 0
    670a:	55 1f       	adc	r21, r21
    670c:	62 9f       	mul	r22, r18
    670e:	f0 01       	movw	r30, r0
    6710:	72 9f       	mul	r23, r18
    6712:	bb 27       	eor	r27, r27
    6714:	f0 0d       	add	r31, r0
    6716:	b1 1d       	adc	r27, r1
    6718:	63 9f       	mul	r22, r19
    671a:	aa 27       	eor	r26, r26
    671c:	f0 0d       	add	r31, r0
    671e:	b1 1d       	adc	r27, r1
    6720:	aa 1f       	adc	r26, r26
    6722:	64 9f       	mul	r22, r20
    6724:	66 27       	eor	r22, r22
    6726:	b0 0d       	add	r27, r0
    6728:	a1 1d       	adc	r26, r1
    672a:	66 1f       	adc	r22, r22
    672c:	82 9f       	mul	r24, r18
    672e:	22 27       	eor	r18, r18
    6730:	b0 0d       	add	r27, r0
    6732:	a1 1d       	adc	r26, r1
    6734:	62 1f       	adc	r22, r18
    6736:	73 9f       	mul	r23, r19
    6738:	b0 0d       	add	r27, r0
    673a:	a1 1d       	adc	r26, r1
    673c:	62 1f       	adc	r22, r18
    673e:	83 9f       	mul	r24, r19
    6740:	a0 0d       	add	r26, r0
    6742:	61 1d       	adc	r22, r1
    6744:	22 1f       	adc	r18, r18
    6746:	74 9f       	mul	r23, r20
    6748:	33 27       	eor	r19, r19
    674a:	a0 0d       	add	r26, r0
    674c:	61 1d       	adc	r22, r1
    674e:	23 1f       	adc	r18, r19
    6750:	84 9f       	mul	r24, r20
    6752:	60 0d       	add	r22, r0
    6754:	21 1d       	adc	r18, r1
    6756:	82 2f       	mov	r24, r18
    6758:	76 2f       	mov	r23, r22
    675a:	6a 2f       	mov	r22, r26
    675c:	11 24       	eor	r1, r1
    675e:	9f 57       	subi	r25, 0x7F	; 127
    6760:	50 40       	sbci	r21, 0x00	; 0
    6762:	8a f0       	brmi	.+34     	; 0x6786 <__mulsf3_pse+0x84>
    6764:	e1 f0       	breq	.+56     	; 0x679e <__mulsf3_pse+0x9c>
    6766:	88 23       	and	r24, r24
    6768:	4a f0       	brmi	.+18     	; 0x677c <__mulsf3_pse+0x7a>
    676a:	ee 0f       	add	r30, r30
    676c:	ff 1f       	adc	r31, r31
    676e:	bb 1f       	adc	r27, r27
    6770:	66 1f       	adc	r22, r22
    6772:	77 1f       	adc	r23, r23
    6774:	88 1f       	adc	r24, r24
    6776:	91 50       	subi	r25, 0x01	; 1
    6778:	50 40       	sbci	r21, 0x00	; 0
    677a:	a9 f7       	brne	.-22     	; 0x6766 <__mulsf3_pse+0x64>
    677c:	9e 3f       	cpi	r25, 0xFE	; 254
    677e:	51 05       	cpc	r21, r1
    6780:	70 f0       	brcs	.+28     	; 0x679e <__mulsf3_pse+0x9c>
    6782:	14 c0       	rjmp	.+40     	; 0x67ac <__fp_inf>
    6784:	aa cf       	rjmp	.-172    	; 0x66da <__fp_szero>
    6786:	5f 3f       	cpi	r21, 0xFF	; 255
    6788:	ec f3       	brlt	.-6      	; 0x6784 <__mulsf3_pse+0x82>
    678a:	98 3e       	cpi	r25, 0xE8	; 232
    678c:	dc f3       	brlt	.-10     	; 0x6784 <__mulsf3_pse+0x82>
    678e:	86 95       	lsr	r24
    6790:	77 95       	ror	r23
    6792:	67 95       	ror	r22
    6794:	b7 95       	ror	r27
    6796:	f7 95       	ror	r31
    6798:	e7 95       	ror	r30
    679a:	9f 5f       	subi	r25, 0xFF	; 255
    679c:	c1 f7       	brne	.-16     	; 0x678e <__mulsf3_pse+0x8c>
    679e:	fe 2b       	or	r31, r30
    67a0:	88 0f       	add	r24, r24
    67a2:	91 1d       	adc	r25, r1
    67a4:	96 95       	lsr	r25
    67a6:	87 95       	ror	r24
    67a8:	97 f9       	bld	r25, 7
    67aa:	08 95       	ret

000067ac <__fp_inf>:
    67ac:	97 f9       	bld	r25, 7
    67ae:	9f 67       	ori	r25, 0x7F	; 127
    67b0:	80 e8       	ldi	r24, 0x80	; 128
    67b2:	70 e0       	ldi	r23, 0x00	; 0
    67b4:	60 e0       	ldi	r22, 0x00	; 0
    67b6:	08 95       	ret

000067b8 <__fp_nan>:
    67b8:	9f ef       	ldi	r25, 0xFF	; 255
    67ba:	80 ec       	ldi	r24, 0xC0	; 192
    67bc:	08 95       	ret

000067be <__fp_pscA>:
    67be:	00 24       	eor	r0, r0
    67c0:	0a 94       	dec	r0
    67c2:	16 16       	cp	r1, r22
    67c4:	17 06       	cpc	r1, r23
    67c6:	18 06       	cpc	r1, r24
    67c8:	09 06       	cpc	r0, r25
    67ca:	08 95       	ret

000067cc <__fp_pscB>:
    67cc:	00 24       	eor	r0, r0
    67ce:	0a 94       	dec	r0
    67d0:	12 16       	cp	r1, r18
    67d2:	13 06       	cpc	r1, r19
    67d4:	14 06       	cpc	r1, r20
    67d6:	05 06       	cpc	r0, r21
    67d8:	08 95       	ret

000067da <__fp_round>:
    67da:	09 2e       	mov	r0, r25
    67dc:	03 94       	inc	r0
    67de:	00 0c       	add	r0, r0
    67e0:	11 f4       	brne	.+4      	; 0x67e6 <__fp_round+0xc>
    67e2:	88 23       	and	r24, r24
    67e4:	52 f0       	brmi	.+20     	; 0x67fa <__fp_round+0x20>
    67e6:	bb 0f       	add	r27, r27
    67e8:	40 f4       	brcc	.+16     	; 0x67fa <__fp_round+0x20>
    67ea:	bf 2b       	or	r27, r31
    67ec:	11 f4       	brne	.+4      	; 0x67f2 <__fp_round+0x18>
    67ee:	60 ff       	sbrs	r22, 0
    67f0:	04 c0       	rjmp	.+8      	; 0x67fa <__fp_round+0x20>
    67f2:	6f 5f       	subi	r22, 0xFF	; 255
    67f4:	7f 4f       	sbci	r23, 0xFF	; 255
    67f6:	8f 4f       	sbci	r24, 0xFF	; 255
    67f8:	9f 4f       	sbci	r25, 0xFF	; 255
    67fa:	08 95       	ret

000067fc <__divmodhi4>:
    67fc:	97 fb       	bst	r25, 7
    67fe:	07 2e       	mov	r0, r23
    6800:	16 f4       	brtc	.+4      	; 0x6806 <__divmodhi4+0xa>
    6802:	00 94       	com	r0
    6804:	07 d0       	rcall	.+14     	; 0x6814 <__divmodhi4_neg1>
    6806:	77 fd       	sbrc	r23, 7
    6808:	09 d0       	rcall	.+18     	; 0x681c <__divmodhi4_neg2>
    680a:	0e 94 18 34 	call	0x6830	; 0x6830 <__udivmodhi4>
    680e:	07 fc       	sbrc	r0, 7
    6810:	05 d0       	rcall	.+10     	; 0x681c <__divmodhi4_neg2>
    6812:	3e f4       	brtc	.+14     	; 0x6822 <__divmodhi4_exit>

00006814 <__divmodhi4_neg1>:
    6814:	90 95       	com	r25
    6816:	81 95       	neg	r24
    6818:	9f 4f       	sbci	r25, 0xFF	; 255
    681a:	08 95       	ret

0000681c <__divmodhi4_neg2>:
    681c:	70 95       	com	r23
    681e:	61 95       	neg	r22
    6820:	7f 4f       	sbci	r23, 0xFF	; 255

00006822 <__divmodhi4_exit>:
    6822:	08 95       	ret

00006824 <__tablejump2__>:
    6824:	ee 0f       	add	r30, r30
    6826:	ff 1f       	adc	r31, r31

00006828 <__tablejump__>:
    6828:	05 90       	lpm	r0, Z+
    682a:	f4 91       	lpm	r31, Z
    682c:	e0 2d       	mov	r30, r0
    682e:	09 94       	ijmp

00006830 <__udivmodhi4>:
    6830:	aa 1b       	sub	r26, r26
    6832:	bb 1b       	sub	r27, r27
    6834:	51 e1       	ldi	r21, 0x11	; 17
    6836:	07 c0       	rjmp	.+14     	; 0x6846 <__udivmodhi4_ep>

00006838 <__udivmodhi4_loop>:
    6838:	aa 1f       	adc	r26, r26
    683a:	bb 1f       	adc	r27, r27
    683c:	a6 17       	cp	r26, r22
    683e:	b7 07       	cpc	r27, r23
    6840:	10 f0       	brcs	.+4      	; 0x6846 <__udivmodhi4_ep>
    6842:	a6 1b       	sub	r26, r22
    6844:	b7 0b       	sbc	r27, r23

00006846 <__udivmodhi4_ep>:
    6846:	88 1f       	adc	r24, r24
    6848:	99 1f       	adc	r25, r25
    684a:	5a 95       	dec	r21
    684c:	a9 f7       	brne	.-22     	; 0x6838 <__udivmodhi4_loop>
    684e:	80 95       	com	r24
    6850:	90 95       	com	r25
    6852:	bc 01       	movw	r22, r24
    6854:	cd 01       	movw	r24, r26
    6856:	08 95       	ret

00006858 <__eerd_byte_m32u4>:
    6858:	f9 99       	sbic	0x1f, 1	; 31
    685a:	fe cf       	rjmp	.-4      	; 0x6858 <__eerd_byte_m32u4>
    685c:	92 bd       	out	0x22, r25	; 34
    685e:	81 bd       	out	0x21, r24	; 33
    6860:	f8 9a       	sbi	0x1f, 0	; 31
    6862:	99 27       	eor	r25, r25
    6864:	80 b5       	in	r24, 0x20	; 32
    6866:	08 95       	ret

00006868 <__eerd_word_m32u4>:
    6868:	a8 e1       	ldi	r26, 0x18	; 24
    686a:	b0 e0       	ldi	r27, 0x00	; 0
    686c:	42 e0       	ldi	r20, 0x02	; 2
    686e:	50 e0       	ldi	r21, 0x00	; 0
    6870:	0c 94 4f 34 	jmp	0x689e	; 0x689e <__eerd_blraw_m32u4>

00006874 <__eewr_byte_m32u4>:
    6874:	26 2f       	mov	r18, r22

00006876 <__eewr_r18_m32u4>:
    6876:	f9 99       	sbic	0x1f, 1	; 31
    6878:	fe cf       	rjmp	.-4      	; 0x6876 <__eewr_r18_m32u4>
    687a:	1f ba       	out	0x1f, r1	; 31
    687c:	92 bd       	out	0x22, r25	; 34
    687e:	81 bd       	out	0x21, r24	; 33
    6880:	20 bd       	out	0x20, r18	; 32
    6882:	0f b6       	in	r0, 0x3f	; 63
    6884:	f8 94       	cli
    6886:	fa 9a       	sbi	0x1f, 2	; 31
    6888:	f9 9a       	sbi	0x1f, 1	; 31
    688a:	0f be       	out	0x3f, r0	; 63
    688c:	01 96       	adiw	r24, 0x01	; 1
    688e:	08 95       	ret

00006890 <__eewr_word_m32u4>:
    6890:	0e 94 3a 34 	call	0x6874	; 0x6874 <__eewr_byte_m32u4>
    6894:	27 2f       	mov	r18, r23
    6896:	0c 94 3b 34 	jmp	0x6876	; 0x6876 <__eewr_r18_m32u4>

0000689a <__eerd_block_m32u4>:
    689a:	dc 01       	movw	r26, r24
    689c:	cb 01       	movw	r24, r22

0000689e <__eerd_blraw_m32u4>:
    689e:	fc 01       	movw	r30, r24
    68a0:	f9 99       	sbic	0x1f, 1	; 31
    68a2:	fe cf       	rjmp	.-4      	; 0x68a0 <__eerd_blraw_m32u4+0x2>
    68a4:	06 c0       	rjmp	.+12     	; 0x68b2 <__eerd_blraw_m32u4+0x14>
    68a6:	f2 bd       	out	0x22, r31	; 34
    68a8:	e1 bd       	out	0x21, r30	; 33
    68aa:	f8 9a       	sbi	0x1f, 0	; 31
    68ac:	31 96       	adiw	r30, 0x01	; 1
    68ae:	00 b4       	in	r0, 0x20	; 32
    68b0:	0d 92       	st	X+, r0
    68b2:	41 50       	subi	r20, 0x01	; 1
    68b4:	50 40       	sbci	r21, 0x00	; 0
    68b6:	b8 f7       	brcc	.-18     	; 0x68a6 <__eerd_blraw_m32u4+0x8>
    68b8:	08 95       	ret

000068ba <_exit>:
    68ba:	f8 94       	cli

000068bc <__stop_program>:
    68bc:	ff cf       	rjmp	.-2      	; 0x68bc <__stop_program>
